Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    APOSTROPHE
    ARRAY
    AS
    CATCH
    CLONE
    CLOSETAGAL
    CONST
    CONTINUE
    DECLARE
    DIE
    DOT
    EMPTY
    ENDDECLARE
    ENDFOR
    ENDFOREACH
    ENDIF
    ENDSWITCH
    ENDWHILE
    EXIT
    FOREACH
    GLOBAL
    GOTO
    HASHTAG
    IMPLEMENTS
    INCLUDE_ONCE
    INTERFACE
    ISSET
    LIST
    MINUSEQUAL
    NAMESPACE
    PLUSEQUAL
    PRINT
    QUOTES
    THROW
    TRAIT
    TRY
    UNSET
    USE
    VAR
    XOR
    __HALT_COMPILER

Grammar

Rule 0     S' -> program
Rule 1     program -> OPENTAG declaration_list CLOSETAG
Rule 2     declaration_list -> declaration_list declaration
Rule 3     declaration_list -> declaration
Rule 4     declaration -> var_declaration
Rule 5     declaration -> fun_declaration
Rule 6     declaration -> area fun_declaration
Rule 7     declaration -> header_declaration
Rule 8     declaration -> class_declaration
Rule 9     declaration -> echo_stmt
Rule 10    declaration -> selection_stmt
Rule 11    declaration -> iteration_stmt
Rule 12    declaration -> typeclass
Rule 13    declaration -> comments
Rule 14    echo_stmt -> echo_stmt ECHO STRING SEMI
Rule 15    echo_stmt -> echo_stmt ECHO VARIABLE SEMI
Rule 16    echo_stmt -> empty
Rule 17    echo_stmt -> echo_stmt ECHO NUM SEMI
Rule 18    echo_stmt -> echo_stmt ECHO boolean SEMI
Rule 19    echo_stmt -> echo_stmt ECHO fun_declaration SEMI
Rule 20    header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI
Rule 21    header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI
Rule 22    class_declaration -> area CLASS ID LBLOCK attribute RBLOCK
Rule 23    class_declaration -> CLASS ID LBLOCK attribute RBLOCK
Rule 24    class_declaration -> CLASS ID LBLOCK RBLOCK
Rule 25    class_declaration -> CLASS ID EXTENDS ID LBLOCK attribute RBLOCK
Rule 26    class_declaration -> CLASS ID EXTENDS ID LBLOCK RBLOCK
Rule 27    attribute -> attribute area var_declaration
Rule 28    attribute -> area var_declaration
Rule 29    attribute -> attribute area fun_declaration
Rule 30    attribute -> area fun_declaration
Rule 31    comments -> COMMENTS
Rule 32    area -> PRIVATE
Rule 33    area -> PUBLIC
Rule 34    area -> PROTECTED
Rule 35    var_declaration -> VARIABLE SEMI var_declaration
Rule 36    var_declaration -> VARIABLE SEMI
Rule 37    var_declaration -> TIMESTIMES VARIABLE SEMI
Rule 38    var_declaration -> TIMESTIMES VARIABLE SEMI var_declaration
Rule 39    var_declaration -> VARIABLE EQUAL NUM SEMI var_declaration
Rule 40    var_declaration -> VARIABLE EQUAL NUM SEMI
Rule 41    var_declaration -> VARIABLE EQUAL boolean SEMI var_declaration
Rule 42    var_declaration -> VARIABLE EQUAL boolean SEMI
Rule 43    var_declaration -> VARIABLE EQUAL VARIABLE SEMI var_declaration
Rule 44    var_declaration -> VARIABLE EQUAL VARIABLE SEMI
Rule 45    var_declaration -> AMPERSANT VARIABLE SEMI var_declaration
Rule 46    var_declaration -> AMPERSANT VARIABLE EQUAL VARIABLE SEMI selection_stmt
Rule 47    var_declaration -> AMPERSANT VARIABLE SEMI
Rule 48    var_declaration -> VARIABLE EQUAL simple_expression SEMI
Rule 49    fun_declaration -> FUNCTION ID LPAREN params RPAREN
Rule 50    fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt
Rule 51    params -> param_list
Rule 52    params -> empty
Rule 53    param_list -> param_list COMMA param_list
Rule 54    param_list -> param
Rule 55    param -> VARIABLE
Rule 56    param -> VARIABLE LBRACKET RBRACKET
Rule 57    compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
Rule 58    local_declarations -> local_declarations var_declaration
Rule 59    local_declarations -> empty
Rule 60    statement_list -> statement_list statement
Rule 61    statement_list -> empty
Rule 62    statement -> expression_stmt
Rule 63    statement -> compount_stmt
Rule 64    statement -> selection_stmt
Rule 65    statement -> iteration_stmt
Rule 66    statement -> return_stmt
Rule 67    statement -> class_declaration
Rule 68    statement -> echo_stmt
Rule 69    expression_stmt -> expression SEMI
Rule 70    selection_stmt -> IF LPAREN expression RPAREN statement
Rule 71    selection_stmt -> IF LPAREN expression RPAREN statement selection
Rule 72    selection -> ELSE statement
Rule 73    selection -> ELSEIF statement selection
Rule 74    selection_stmt -> SWITCH LPAREN var RPAREN statement
Rule 75    selection_stmt -> CASE NUM COLON statement BREAK SEMI
Rule 76    selection_stmt -> DEFAULT COLON statement BREAK SEMI
Rule 77    iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement
Rule 78    iteration_stmt -> WHILE LPAREN expression RPAREN statement
Rule 79    iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN
Rule 80    return_stmt -> RETURN SEMI
Rule 81    return_stmt -> RETURN expression SEMI
Rule 82    expression -> var EQUAL expression
Rule 83    expression -> simple_expression
Rule 84    expression -> var EQUAL AMPERSANT VARIABLE
Rule 85    expression -> expression AND expression
Rule 86    expression -> expression OR expression
Rule 87    var -> VARIABLE
Rule 88    var -> VARIABLE LBRACKET expression RBRACKET
Rule 89    simple_expression -> additive_expression relop additive_expression
Rule 90    simple_expression -> additive_expression
Rule 91    relop -> LESS
Rule 92    relop -> LESSEQUAL
Rule 93    relop -> GREATER
Rule 94    relop -> GREATEREQUAL
Rule 95    relop -> DEQUAL
Rule 96    relop -> DISTINT
Rule 97    relop -> ISEQUAL
Rule 98    additive_expression -> additive_expression addop term
Rule 99    additive_expression -> term
Rule 100   additive_expression -> term MINUSMINUS
Rule 101   additive_expression -> term PLUSPLUS
Rule 102   addop -> PLUS
Rule 103   addop -> MINUS
Rule 104   term -> term mulop factor
Rule 105   term -> factor
Rule 106   mulop -> TIMES
Rule 107   mulop -> DIVIDE
Rule 108   factor -> LPAREN expression RPAREN
Rule 109   factor -> var
Rule 110   factor -> NUM
Rule 111   factor -> boolean
Rule 112   factor -> VARIABLE LPAREN args RPAREN
Rule 113   args -> args_list
Rule 114   args -> empty
Rule 115   args -> VOID
Rule 116   args_list -> args_list COMMA expression
Rule 117   args_list -> expression
Rule 118   boolean -> TRUE
Rule 119   boolean -> FALSE
Rule 120   typeclass -> ID VARIABLE EQUAL NEW constructor SEMI
Rule 121   constructor -> ID LPAREN RPAREN
Rule 122   constructor -> ID LPAREN args RPAREN
Rule 123   empty -> <empty>

Terminals, with rules where they appear

ABSTRACT             : 
AMPERSANT            : 45 46 47 84
AND                  : 85
APOSTROPHE           : 
ARRAY                : 
AS                   : 
BREAK                : 75 76
CASE                 : 75
CATCH                : 
CLASS                : 22 23 24 25 26
CLONE                : 
CLOSETAG             : 1
CLOSETAGAL           : 
COLON                : 75 76
COMMA                : 53 116
COMMENTS             : 31
CONST                : 
CONTINUE             : 
DECLARE              : 
DEFAULT              : 76
DEQUAL               : 95
DIE                  : 
DISTINT              : 96
DIVIDE               : 107
DO                   : 79
DOT                  : 
ECHO                 : 14 15 17 18 19
ELSE                 : 72
ELSEIF               : 73
EMPTY                : 
ENDDECLARE           : 
ENDFOR               : 
ENDFOREACH           : 
ENDIF                : 
ENDSWITCH            : 
ENDWHILE             : 
EQUAL                : 39 40 41 42 43 44 46 48 82 84 120
EXIT                 : 
EXTENDS              : 25 26
FALSE                : 119
FOR                  : 77
FOREACH              : 
FUNCTION             : 49 50
GLOBAL               : 
GOTO                 : 
GREATER              : 93
GREATEREQUAL         : 94
HASHTAG              : 
ID                   : 22 23 24 25 25 26 26 49 50 120 121 122
IF                   : 70 71
IMPLEMENTS           : 
INCLUDE              : 21
INCLUDE_ONCE         : 
INTERFACE            : 
ISEQUAL              : 97
ISSET                : 
LBLOCK               : 22 23 24 25 26 57 79
LBRACKET             : 56 88
LESS                 : 91
LESSEQUAL            : 92
LIST                 : 
LPAREN               : 20 21 49 50 70 71 74 77 78 79 108 112 121 122
MINUS                : 103
MINUSEQUAL           : 
MINUSMINUS           : 100
NAMESPACE            : 
NEW                  : 120
NUM                  : 17 39 40 75 110
OPENTAG              : 1
OR                   : 86
PLUS                 : 102
PLUSEQUAL            : 
PLUSPLUS             : 101
PRINT                : 
PRIVATE              : 32
PROTECTED            : 34
PUBLIC               : 33
QUOTES               : 
RBLOCK               : 22 23 24 25 26 57 79
RBRACKET             : 56 88
REQUIRE              : 20
RETURN               : 80 81
RPAREN               : 20 21 49 50 70 71 74 77 78 79 108 112 121 122
SEMI                 : 14 15 17 18 19 20 21 35 36 37 38 39 40 41 42 43 44 45 46 47 48 69 75 76 77 77 79 80 81 120
STRING               : 14 20 21
SWITCH               : 74
THROW                : 
TIMES                : 106
TIMESTIMES           : 37 38
TRAIT                : 
TRUE                 : 118
TRY                  : 
UNSET                : 
USE                  : 
VAR                  : 
VARIABLE             : 15 35 36 37 38 39 40 41 42 43 43 44 44 45 46 46 47 48 55 56 84 87 88 112 120
VOID                 : 115
WHILE                : 78 79
XOR                  : 
__HALT_COMPILER      : 
error                : 

Nonterminals, with rules where they appear

additive_expression  : 77 89 89 90 98
addop                : 98
area                 : 6 22 27 28 29 30
args                 : 112 122
args_list            : 113 116
attribute            : 22 23 25 27 29
boolean              : 18 41 42 111
class_declaration    : 8 67
comments             : 13
compount_stmt        : 50 63
constructor          : 120
declaration          : 2 3
declaration_list     : 1 2
echo_stmt            : 9 14 15 17 18 19 57 57 57 68
empty                : 16 52 59 61 114
expression           : 69 70 71 77 78 79 81 82 85 85 86 86 88 108 116 117
expression_stmt      : 62
factor               : 104 105
fun_declaration      : 5 6 19 29 30
header_declaration   : 7
iteration_stmt       : 11 65
local_declarations   : 57 58
mulop                : 104
param                : 54
param_list           : 51 53 53
params               : 49 50
program              : 0
relop                : 89
return_stmt          : 66
selection            : 71 73
selection_stmt       : 10 46 64
simple_expression    : 48 83
statement            : 60 70 71 72 73 74 75 76 77 78 79
statement_list       : 57 60
term                 : 98 99 100 101 104
typeclass            : 12
var                  : 74 82 84 109
var_declaration      : 4 27 28 35 38 39 41 43 45 58 77

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . OPENTAG declaration_list CLOSETAG

    OPENTAG         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> OPENTAG . declaration_list CLOSETAG
    (2) declaration_list -> . declaration_list declaration
    (3) declaration_list -> . declaration
    (4) declaration -> . var_declaration
    (5) declaration -> . fun_declaration
    (6) declaration -> . area fun_declaration
    (7) declaration -> . header_declaration
    (8) declaration -> . class_declaration
    (9) declaration -> . echo_stmt
    (10) declaration -> . selection_stmt
    (11) declaration -> . iteration_stmt
    (12) declaration -> . typeclass
    (13) declaration -> . comments
    (35) var_declaration -> . VARIABLE SEMI var_declaration
    (36) var_declaration -> . VARIABLE SEMI
    (37) var_declaration -> . TIMESTIMES VARIABLE SEMI
    (38) var_declaration -> . TIMESTIMES VARIABLE SEMI var_declaration
    (39) var_declaration -> . VARIABLE EQUAL NUM SEMI var_declaration
    (40) var_declaration -> . VARIABLE EQUAL NUM SEMI
    (41) var_declaration -> . VARIABLE EQUAL boolean SEMI var_declaration
    (42) var_declaration -> . VARIABLE EQUAL boolean SEMI
    (43) var_declaration -> . VARIABLE EQUAL VARIABLE SEMI var_declaration
    (44) var_declaration -> . VARIABLE EQUAL VARIABLE SEMI
    (45) var_declaration -> . AMPERSANT VARIABLE SEMI var_declaration
    (46) var_declaration -> . AMPERSANT VARIABLE EQUAL VARIABLE SEMI selection_stmt
    (47) var_declaration -> . AMPERSANT VARIABLE SEMI
    (48) var_declaration -> . VARIABLE EQUAL simple_expression SEMI
    (49) fun_declaration -> . FUNCTION ID LPAREN params RPAREN
    (50) fun_declaration -> . FUNCTION ID LPAREN params RPAREN compount_stmt
    (32) area -> . PRIVATE
    (33) area -> . PUBLIC
    (34) area -> . PROTECTED
    (20) header_declaration -> . REQUIRE LPAREN STRING RPAREN SEMI
    (21) header_declaration -> . INCLUDE LPAREN STRING RPAREN SEMI
    (22) class_declaration -> . area CLASS ID LBLOCK attribute RBLOCK
    (23) class_declaration -> . CLASS ID LBLOCK attribute RBLOCK
    (24) class_declaration -> . CLASS ID LBLOCK RBLOCK
    (25) class_declaration -> . CLASS ID EXTENDS ID LBLOCK attribute RBLOCK
    (26) class_declaration -> . CLASS ID EXTENDS ID LBLOCK RBLOCK
    (14) echo_stmt -> . echo_stmt ECHO STRING SEMI
    (15) echo_stmt -> . echo_stmt ECHO VARIABLE SEMI
    (16) echo_stmt -> . empty
    (17) echo_stmt -> . echo_stmt ECHO NUM SEMI
    (18) echo_stmt -> . echo_stmt ECHO boolean SEMI
    (19) echo_stmt -> . echo_stmt ECHO fun_declaration SEMI
    (70) selection_stmt -> . IF LPAREN expression RPAREN statement
    (71) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (74) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (75) selection_stmt -> . CASE NUM COLON statement BREAK SEMI
    (76) selection_stmt -> . DEFAULT COLON statement BREAK SEMI
    (77) iteration_stmt -> . FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement
    (78) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (79) iteration_stmt -> . DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN
    (120) typeclass -> . ID VARIABLE EQUAL NEW constructor SEMI
    (31) comments -> . COMMENTS
    (123) empty -> .

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for TIMESTIMES resolved as shift
  ! shift/reduce conflict for AMPERSANT resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for REQUIRE resolved as shift
  ! shift/reduce conflict for INCLUDE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for COMMENTS resolved as shift
    VARIABLE        shift and go to state 15
    TIMESTIMES      shift and go to state 16
    AMPERSANT       shift and go to state 17
    FUNCTION        shift and go to state 18
    PRIVATE         shift and go to state 20
    PUBLIC          shift and go to state 21
    PROTECTED       shift and go to state 22
    REQUIRE         shift and go to state 23
    INCLUDE         shift and go to state 24
    CLASS           shift and go to state 25
    IF              shift and go to state 27
    SWITCH          shift and go to state 28
    CASE            shift and go to state 29
    DEFAULT         shift and go to state 30
    FOR             shift and go to state 31
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    ID              shift and go to state 19
    COMMENTS        shift and go to state 34
    ECHO            reduce using rule 123 (empty -> .)
    CLOSETAG        reduce using rule 123 (empty -> .)

  ! VARIABLE        [ reduce using rule 123 (empty -> .) ]
  ! TIMESTIMES      [ reduce using rule 123 (empty -> .) ]
  ! AMPERSANT       [ reduce using rule 123 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 123 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 123 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 123 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 123 (empty -> .) ]
  ! REQUIRE         [ reduce using rule 123 (empty -> .) ]
  ! INCLUDE         [ reduce using rule 123 (empty -> .) ]
  ! CLASS           [ reduce using rule 123 (empty -> .) ]
  ! IF              [ reduce using rule 123 (empty -> .) ]
  ! SWITCH          [ reduce using rule 123 (empty -> .) ]
  ! CASE            [ reduce using rule 123 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 123 (empty -> .) ]
  ! FOR             [ reduce using rule 123 (empty -> .) ]
  ! WHILE           [ reduce using rule 123 (empty -> .) ]
  ! DO              [ reduce using rule 123 (empty -> .) ]
  ! ID              [ reduce using rule 123 (empty -> .) ]
  ! COMMENTS        [ reduce using rule 123 (empty -> .) ]

    declaration_list               shift and go to state 3
    declaration                    shift and go to state 4
    var_declaration                shift and go to state 5
    fun_declaration                shift and go to state 6
    area                           shift and go to state 7
    header_declaration             shift and go to state 8
    class_declaration              shift and go to state 9
    echo_stmt                      shift and go to state 10
    selection_stmt                 shift and go to state 11
    iteration_stmt                 shift and go to state 12
    typeclass                      shift and go to state 13
    comments                       shift and go to state 14
    empty                          shift and go to state 26

state 3

    (1) program -> OPENTAG declaration_list . CLOSETAG
    (2) declaration_list -> declaration_list . declaration
    (4) declaration -> . var_declaration
    (5) declaration -> . fun_declaration
    (6) declaration -> . area fun_declaration
    (7) declaration -> . header_declaration
    (8) declaration -> . class_declaration
    (9) declaration -> . echo_stmt
    (10) declaration -> . selection_stmt
    (11) declaration -> . iteration_stmt
    (12) declaration -> . typeclass
    (13) declaration -> . comments
    (35) var_declaration -> . VARIABLE SEMI var_declaration
    (36) var_declaration -> . VARIABLE SEMI
    (37) var_declaration -> . TIMESTIMES VARIABLE SEMI
    (38) var_declaration -> . TIMESTIMES VARIABLE SEMI var_declaration
    (39) var_declaration -> . VARIABLE EQUAL NUM SEMI var_declaration
    (40) var_declaration -> . VARIABLE EQUAL NUM SEMI
    (41) var_declaration -> . VARIABLE EQUAL boolean SEMI var_declaration
    (42) var_declaration -> . VARIABLE EQUAL boolean SEMI
    (43) var_declaration -> . VARIABLE EQUAL VARIABLE SEMI var_declaration
    (44) var_declaration -> . VARIABLE EQUAL VARIABLE SEMI
    (45) var_declaration -> . AMPERSANT VARIABLE SEMI var_declaration
    (46) var_declaration -> . AMPERSANT VARIABLE EQUAL VARIABLE SEMI selection_stmt
    (47) var_declaration -> . AMPERSANT VARIABLE SEMI
    (48) var_declaration -> . VARIABLE EQUAL simple_expression SEMI
    (49) fun_declaration -> . FUNCTION ID LPAREN params RPAREN
    (50) fun_declaration -> . FUNCTION ID LPAREN params RPAREN compount_stmt
    (32) area -> . PRIVATE
    (33) area -> . PUBLIC
    (34) area -> . PROTECTED
    (20) header_declaration -> . REQUIRE LPAREN STRING RPAREN SEMI
    (21) header_declaration -> . INCLUDE LPAREN STRING RPAREN SEMI
    (22) class_declaration -> . area CLASS ID LBLOCK attribute RBLOCK
    (23) class_declaration -> . CLASS ID LBLOCK attribute RBLOCK
    (24) class_declaration -> . CLASS ID LBLOCK RBLOCK
    (25) class_declaration -> . CLASS ID EXTENDS ID LBLOCK attribute RBLOCK
    (26) class_declaration -> . CLASS ID EXTENDS ID LBLOCK RBLOCK
    (14) echo_stmt -> . echo_stmt ECHO STRING SEMI
    (15) echo_stmt -> . echo_stmt ECHO VARIABLE SEMI
    (16) echo_stmt -> . empty
    (17) echo_stmt -> . echo_stmt ECHO NUM SEMI
    (18) echo_stmt -> . echo_stmt ECHO boolean SEMI
    (19) echo_stmt -> . echo_stmt ECHO fun_declaration SEMI
    (70) selection_stmt -> . IF LPAREN expression RPAREN statement
    (71) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (74) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (75) selection_stmt -> . CASE NUM COLON statement BREAK SEMI
    (76) selection_stmt -> . DEFAULT COLON statement BREAK SEMI
    (77) iteration_stmt -> . FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement
    (78) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (79) iteration_stmt -> . DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN
    (120) typeclass -> . ID VARIABLE EQUAL NEW constructor SEMI
    (31) comments -> . COMMENTS
    (123) empty -> .

  ! shift/reduce conflict for CLOSETAG resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for TIMESTIMES resolved as shift
  ! shift/reduce conflict for AMPERSANT resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for REQUIRE resolved as shift
  ! shift/reduce conflict for INCLUDE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for COMMENTS resolved as shift
    CLOSETAG        shift and go to state 35
    VARIABLE        shift and go to state 15
    TIMESTIMES      shift and go to state 16
    AMPERSANT       shift and go to state 17
    FUNCTION        shift and go to state 18
    PRIVATE         shift and go to state 20
    PUBLIC          shift and go to state 21
    PROTECTED       shift and go to state 22
    REQUIRE         shift and go to state 23
    INCLUDE         shift and go to state 24
    CLASS           shift and go to state 25
    IF              shift and go to state 27
    SWITCH          shift and go to state 28
    CASE            shift and go to state 29
    DEFAULT         shift and go to state 30
    FOR             shift and go to state 31
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    ID              shift and go to state 19
    COMMENTS        shift and go to state 34
    ECHO            reduce using rule 123 (empty -> .)

  ! CLOSETAG        [ reduce using rule 123 (empty -> .) ]
  ! VARIABLE        [ reduce using rule 123 (empty -> .) ]
  ! TIMESTIMES      [ reduce using rule 123 (empty -> .) ]
  ! AMPERSANT       [ reduce using rule 123 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 123 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 123 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 123 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 123 (empty -> .) ]
  ! REQUIRE         [ reduce using rule 123 (empty -> .) ]
  ! INCLUDE         [ reduce using rule 123 (empty -> .) ]
  ! CLASS           [ reduce using rule 123 (empty -> .) ]
  ! IF              [ reduce using rule 123 (empty -> .) ]
  ! SWITCH          [ reduce using rule 123 (empty -> .) ]
  ! CASE            [ reduce using rule 123 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 123 (empty -> .) ]
  ! FOR             [ reduce using rule 123 (empty -> .) ]
  ! WHILE           [ reduce using rule 123 (empty -> .) ]
  ! DO              [ reduce using rule 123 (empty -> .) ]
  ! ID              [ reduce using rule 123 (empty -> .) ]
  ! COMMENTS        [ reduce using rule 123 (empty -> .) ]

    declaration                    shift and go to state 36
    var_declaration                shift and go to state 5
    fun_declaration                shift and go to state 6
    area                           shift and go to state 7
    header_declaration             shift and go to state 8
    class_declaration              shift and go to state 9
    echo_stmt                      shift and go to state 10
    selection_stmt                 shift and go to state 11
    iteration_stmt                 shift and go to state 12
    typeclass                      shift and go to state 13
    comments                       shift and go to state 14
    empty                          shift and go to state 26

state 4

    (3) declaration_list -> declaration .

    CLOSETAG        reduce using rule 3 (declaration_list -> declaration .)
    VARIABLE        reduce using rule 3 (declaration_list -> declaration .)
    TIMESTIMES      reduce using rule 3 (declaration_list -> declaration .)
    AMPERSANT       reduce using rule 3 (declaration_list -> declaration .)
    FUNCTION        reduce using rule 3 (declaration_list -> declaration .)
    PRIVATE         reduce using rule 3 (declaration_list -> declaration .)
    PUBLIC          reduce using rule 3 (declaration_list -> declaration .)
    PROTECTED       reduce using rule 3 (declaration_list -> declaration .)
    REQUIRE         reduce using rule 3 (declaration_list -> declaration .)
    INCLUDE         reduce using rule 3 (declaration_list -> declaration .)
    CLASS           reduce using rule 3 (declaration_list -> declaration .)
    IF              reduce using rule 3 (declaration_list -> declaration .)
    SWITCH          reduce using rule 3 (declaration_list -> declaration .)
    CASE            reduce using rule 3 (declaration_list -> declaration .)
    DEFAULT         reduce using rule 3 (declaration_list -> declaration .)
    FOR             reduce using rule 3 (declaration_list -> declaration .)
    WHILE           reduce using rule 3 (declaration_list -> declaration .)
    DO              reduce using rule 3 (declaration_list -> declaration .)
    ID              reduce using rule 3 (declaration_list -> declaration .)
    COMMENTS        reduce using rule 3 (declaration_list -> declaration .)
    ECHO            reduce using rule 3 (declaration_list -> declaration .)


state 5

    (4) declaration -> var_declaration .

    CLOSETAG        reduce using rule 4 (declaration -> var_declaration .)
    VARIABLE        reduce using rule 4 (declaration -> var_declaration .)
    TIMESTIMES      reduce using rule 4 (declaration -> var_declaration .)
    AMPERSANT       reduce using rule 4 (declaration -> var_declaration .)
    FUNCTION        reduce using rule 4 (declaration -> var_declaration .)
    PRIVATE         reduce using rule 4 (declaration -> var_declaration .)
    PUBLIC          reduce using rule 4 (declaration -> var_declaration .)
    PROTECTED       reduce using rule 4 (declaration -> var_declaration .)
    REQUIRE         reduce using rule 4 (declaration -> var_declaration .)
    INCLUDE         reduce using rule 4 (declaration -> var_declaration .)
    CLASS           reduce using rule 4 (declaration -> var_declaration .)
    IF              reduce using rule 4 (declaration -> var_declaration .)
    SWITCH          reduce using rule 4 (declaration -> var_declaration .)
    CASE            reduce using rule 4 (declaration -> var_declaration .)
    DEFAULT         reduce using rule 4 (declaration -> var_declaration .)
    FOR             reduce using rule 4 (declaration -> var_declaration .)
    WHILE           reduce using rule 4 (declaration -> var_declaration .)
    DO              reduce using rule 4 (declaration -> var_declaration .)
    ID              reduce using rule 4 (declaration -> var_declaration .)
    COMMENTS        reduce using rule 4 (declaration -> var_declaration .)
    ECHO            reduce using rule 4 (declaration -> var_declaration .)


state 6

    (5) declaration -> fun_declaration .

    CLOSETAG        reduce using rule 5 (declaration -> fun_declaration .)
    VARIABLE        reduce using rule 5 (declaration -> fun_declaration .)
    TIMESTIMES      reduce using rule 5 (declaration -> fun_declaration .)
    AMPERSANT       reduce using rule 5 (declaration -> fun_declaration .)
    FUNCTION        reduce using rule 5 (declaration -> fun_declaration .)
    PRIVATE         reduce using rule 5 (declaration -> fun_declaration .)
    PUBLIC          reduce using rule 5 (declaration -> fun_declaration .)
    PROTECTED       reduce using rule 5 (declaration -> fun_declaration .)
    REQUIRE         reduce using rule 5 (declaration -> fun_declaration .)
    INCLUDE         reduce using rule 5 (declaration -> fun_declaration .)
    CLASS           reduce using rule 5 (declaration -> fun_declaration .)
    IF              reduce using rule 5 (declaration -> fun_declaration .)
    SWITCH          reduce using rule 5 (declaration -> fun_declaration .)
    CASE            reduce using rule 5 (declaration -> fun_declaration .)
    DEFAULT         reduce using rule 5 (declaration -> fun_declaration .)
    FOR             reduce using rule 5 (declaration -> fun_declaration .)
    WHILE           reduce using rule 5 (declaration -> fun_declaration .)
    DO              reduce using rule 5 (declaration -> fun_declaration .)
    ID              reduce using rule 5 (declaration -> fun_declaration .)
    COMMENTS        reduce using rule 5 (declaration -> fun_declaration .)
    ECHO            reduce using rule 5 (declaration -> fun_declaration .)


state 7

    (6) declaration -> area . fun_declaration
    (22) class_declaration -> area . CLASS ID LBLOCK attribute RBLOCK
    (49) fun_declaration -> . FUNCTION ID LPAREN params RPAREN
    (50) fun_declaration -> . FUNCTION ID LPAREN params RPAREN compount_stmt

    CLASS           shift and go to state 38
    FUNCTION        shift and go to state 18

    fun_declaration                shift and go to state 37

state 8

    (7) declaration -> header_declaration .

    CLOSETAG        reduce using rule 7 (declaration -> header_declaration .)
    VARIABLE        reduce using rule 7 (declaration -> header_declaration .)
    TIMESTIMES      reduce using rule 7 (declaration -> header_declaration .)
    AMPERSANT       reduce using rule 7 (declaration -> header_declaration .)
    FUNCTION        reduce using rule 7 (declaration -> header_declaration .)
    PRIVATE         reduce using rule 7 (declaration -> header_declaration .)
    PUBLIC          reduce using rule 7 (declaration -> header_declaration .)
    PROTECTED       reduce using rule 7 (declaration -> header_declaration .)
    REQUIRE         reduce using rule 7 (declaration -> header_declaration .)
    INCLUDE         reduce using rule 7 (declaration -> header_declaration .)
    CLASS           reduce using rule 7 (declaration -> header_declaration .)
    IF              reduce using rule 7 (declaration -> header_declaration .)
    SWITCH          reduce using rule 7 (declaration -> header_declaration .)
    CASE            reduce using rule 7 (declaration -> header_declaration .)
    DEFAULT         reduce using rule 7 (declaration -> header_declaration .)
    FOR             reduce using rule 7 (declaration -> header_declaration .)
    WHILE           reduce using rule 7 (declaration -> header_declaration .)
    DO              reduce using rule 7 (declaration -> header_declaration .)
    ID              reduce using rule 7 (declaration -> header_declaration .)
    COMMENTS        reduce using rule 7 (declaration -> header_declaration .)
    ECHO            reduce using rule 7 (declaration -> header_declaration .)


state 9

    (8) declaration -> class_declaration .

    CLOSETAG        reduce using rule 8 (declaration -> class_declaration .)
    VARIABLE        reduce using rule 8 (declaration -> class_declaration .)
    TIMESTIMES      reduce using rule 8 (declaration -> class_declaration .)
    AMPERSANT       reduce using rule 8 (declaration -> class_declaration .)
    FUNCTION        reduce using rule 8 (declaration -> class_declaration .)
    PRIVATE         reduce using rule 8 (declaration -> class_declaration .)
    PUBLIC          reduce using rule 8 (declaration -> class_declaration .)
    PROTECTED       reduce using rule 8 (declaration -> class_declaration .)
    REQUIRE         reduce using rule 8 (declaration -> class_declaration .)
    INCLUDE         reduce using rule 8 (declaration -> class_declaration .)
    CLASS           reduce using rule 8 (declaration -> class_declaration .)
    IF              reduce using rule 8 (declaration -> class_declaration .)
    SWITCH          reduce using rule 8 (declaration -> class_declaration .)
    CASE            reduce using rule 8 (declaration -> class_declaration .)
    DEFAULT         reduce using rule 8 (declaration -> class_declaration .)
    FOR             reduce using rule 8 (declaration -> class_declaration .)
    WHILE           reduce using rule 8 (declaration -> class_declaration .)
    DO              reduce using rule 8 (declaration -> class_declaration .)
    ID              reduce using rule 8 (declaration -> class_declaration .)
    COMMENTS        reduce using rule 8 (declaration -> class_declaration .)
    ECHO            reduce using rule 8 (declaration -> class_declaration .)


state 10

    (9) declaration -> echo_stmt .
    (14) echo_stmt -> echo_stmt . ECHO STRING SEMI
    (15) echo_stmt -> echo_stmt . ECHO VARIABLE SEMI
    (17) echo_stmt -> echo_stmt . ECHO NUM SEMI
    (18) echo_stmt -> echo_stmt . ECHO boolean SEMI
    (19) echo_stmt -> echo_stmt . ECHO fun_declaration SEMI

  ! shift/reduce conflict for ECHO resolved as shift
    CLOSETAG        reduce using rule 9 (declaration -> echo_stmt .)
    VARIABLE        reduce using rule 9 (declaration -> echo_stmt .)
    TIMESTIMES      reduce using rule 9 (declaration -> echo_stmt .)
    AMPERSANT       reduce using rule 9 (declaration -> echo_stmt .)
    FUNCTION        reduce using rule 9 (declaration -> echo_stmt .)
    PRIVATE         reduce using rule 9 (declaration -> echo_stmt .)
    PUBLIC          reduce using rule 9 (declaration -> echo_stmt .)
    PROTECTED       reduce using rule 9 (declaration -> echo_stmt .)
    REQUIRE         reduce using rule 9 (declaration -> echo_stmt .)
    INCLUDE         reduce using rule 9 (declaration -> echo_stmt .)
    CLASS           reduce using rule 9 (declaration -> echo_stmt .)
    IF              reduce using rule 9 (declaration -> echo_stmt .)
    SWITCH          reduce using rule 9 (declaration -> echo_stmt .)
    CASE            reduce using rule 9 (declaration -> echo_stmt .)
    DEFAULT         reduce using rule 9 (declaration -> echo_stmt .)
    FOR             reduce using rule 9 (declaration -> echo_stmt .)
    WHILE           reduce using rule 9 (declaration -> echo_stmt .)
    DO              reduce using rule 9 (declaration -> echo_stmt .)
    ID              reduce using rule 9 (declaration -> echo_stmt .)
    COMMENTS        reduce using rule 9 (declaration -> echo_stmt .)
    ECHO            shift and go to state 39

  ! ECHO            [ reduce using rule 9 (declaration -> echo_stmt .) ]


state 11

    (10) declaration -> selection_stmt .

    CLOSETAG        reduce using rule 10 (declaration -> selection_stmt .)
    VARIABLE        reduce using rule 10 (declaration -> selection_stmt .)
    TIMESTIMES      reduce using rule 10 (declaration -> selection_stmt .)
    AMPERSANT       reduce using rule 10 (declaration -> selection_stmt .)
    FUNCTION        reduce using rule 10 (declaration -> selection_stmt .)
    PRIVATE         reduce using rule 10 (declaration -> selection_stmt .)
    PUBLIC          reduce using rule 10 (declaration -> selection_stmt .)
    PROTECTED       reduce using rule 10 (declaration -> selection_stmt .)
    REQUIRE         reduce using rule 10 (declaration -> selection_stmt .)
    INCLUDE         reduce using rule 10 (declaration -> selection_stmt .)
    CLASS           reduce using rule 10 (declaration -> selection_stmt .)
    IF              reduce using rule 10 (declaration -> selection_stmt .)
    SWITCH          reduce using rule 10 (declaration -> selection_stmt .)
    CASE            reduce using rule 10 (declaration -> selection_stmt .)
    DEFAULT         reduce using rule 10 (declaration -> selection_stmt .)
    FOR             reduce using rule 10 (declaration -> selection_stmt .)
    WHILE           reduce using rule 10 (declaration -> selection_stmt .)
    DO              reduce using rule 10 (declaration -> selection_stmt .)
    ID              reduce using rule 10 (declaration -> selection_stmt .)
    COMMENTS        reduce using rule 10 (declaration -> selection_stmt .)
    ECHO            reduce using rule 10 (declaration -> selection_stmt .)


state 12

    (11) declaration -> iteration_stmt .

    CLOSETAG        reduce using rule 11 (declaration -> iteration_stmt .)
    VARIABLE        reduce using rule 11 (declaration -> iteration_stmt .)
    TIMESTIMES      reduce using rule 11 (declaration -> iteration_stmt .)
    AMPERSANT       reduce using rule 11 (declaration -> iteration_stmt .)
    FUNCTION        reduce using rule 11 (declaration -> iteration_stmt .)
    PRIVATE         reduce using rule 11 (declaration -> iteration_stmt .)
    PUBLIC          reduce using rule 11 (declaration -> iteration_stmt .)
    PROTECTED       reduce using rule 11 (declaration -> iteration_stmt .)
    REQUIRE         reduce using rule 11 (declaration -> iteration_stmt .)
    INCLUDE         reduce using rule 11 (declaration -> iteration_stmt .)
    CLASS           reduce using rule 11 (declaration -> iteration_stmt .)
    IF              reduce using rule 11 (declaration -> iteration_stmt .)
    SWITCH          reduce using rule 11 (declaration -> iteration_stmt .)
    CASE            reduce using rule 11 (declaration -> iteration_stmt .)
    DEFAULT         reduce using rule 11 (declaration -> iteration_stmt .)
    FOR             reduce using rule 11 (declaration -> iteration_stmt .)
    WHILE           reduce using rule 11 (declaration -> iteration_stmt .)
    DO              reduce using rule 11 (declaration -> iteration_stmt .)
    ID              reduce using rule 11 (declaration -> iteration_stmt .)
    COMMENTS        reduce using rule 11 (declaration -> iteration_stmt .)
    ECHO            reduce using rule 11 (declaration -> iteration_stmt .)


state 13

    (12) declaration -> typeclass .

    CLOSETAG        reduce using rule 12 (declaration -> typeclass .)
    VARIABLE        reduce using rule 12 (declaration -> typeclass .)
    TIMESTIMES      reduce using rule 12 (declaration -> typeclass .)
    AMPERSANT       reduce using rule 12 (declaration -> typeclass .)
    FUNCTION        reduce using rule 12 (declaration -> typeclass .)
    PRIVATE         reduce using rule 12 (declaration -> typeclass .)
    PUBLIC          reduce using rule 12 (declaration -> typeclass .)
    PROTECTED       reduce using rule 12 (declaration -> typeclass .)
    REQUIRE         reduce using rule 12 (declaration -> typeclass .)
    INCLUDE         reduce using rule 12 (declaration -> typeclass .)
    CLASS           reduce using rule 12 (declaration -> typeclass .)
    IF              reduce using rule 12 (declaration -> typeclass .)
    SWITCH          reduce using rule 12 (declaration -> typeclass .)
    CASE            reduce using rule 12 (declaration -> typeclass .)
    DEFAULT         reduce using rule 12 (declaration -> typeclass .)
    FOR             reduce using rule 12 (declaration -> typeclass .)
    WHILE           reduce using rule 12 (declaration -> typeclass .)
    DO              reduce using rule 12 (declaration -> typeclass .)
    ID              reduce using rule 12 (declaration -> typeclass .)
    COMMENTS        reduce using rule 12 (declaration -> typeclass .)
    ECHO            reduce using rule 12 (declaration -> typeclass .)


state 14

    (13) declaration -> comments .

    CLOSETAG        reduce using rule 13 (declaration -> comments .)
    VARIABLE        reduce using rule 13 (declaration -> comments .)
    TIMESTIMES      reduce using rule 13 (declaration -> comments .)
    AMPERSANT       reduce using rule 13 (declaration -> comments .)
    FUNCTION        reduce using rule 13 (declaration -> comments .)
    PRIVATE         reduce using rule 13 (declaration -> comments .)
    PUBLIC          reduce using rule 13 (declaration -> comments .)
    PROTECTED       reduce using rule 13 (declaration -> comments .)
    REQUIRE         reduce using rule 13 (declaration -> comments .)
    INCLUDE         reduce using rule 13 (declaration -> comments .)
    CLASS           reduce using rule 13 (declaration -> comments .)
    IF              reduce using rule 13 (declaration -> comments .)
    SWITCH          reduce using rule 13 (declaration -> comments .)
    CASE            reduce using rule 13 (declaration -> comments .)
    DEFAULT         reduce using rule 13 (declaration -> comments .)
    FOR             reduce using rule 13 (declaration -> comments .)
    WHILE           reduce using rule 13 (declaration -> comments .)
    DO              reduce using rule 13 (declaration -> comments .)
    ID              reduce using rule 13 (declaration -> comments .)
    COMMENTS        reduce using rule 13 (declaration -> comments .)
    ECHO            reduce using rule 13 (declaration -> comments .)


state 15

    (35) var_declaration -> VARIABLE . SEMI var_declaration
    (36) var_declaration -> VARIABLE . SEMI
    (39) var_declaration -> VARIABLE . EQUAL NUM SEMI var_declaration
    (40) var_declaration -> VARIABLE . EQUAL NUM SEMI
    (41) var_declaration -> VARIABLE . EQUAL boolean SEMI var_declaration
    (42) var_declaration -> VARIABLE . EQUAL boolean SEMI
    (43) var_declaration -> VARIABLE . EQUAL VARIABLE SEMI var_declaration
    (44) var_declaration -> VARIABLE . EQUAL VARIABLE SEMI
    (48) var_declaration -> VARIABLE . EQUAL simple_expression SEMI

    SEMI            shift and go to state 40
    EQUAL           shift and go to state 41


state 16

    (37) var_declaration -> TIMESTIMES . VARIABLE SEMI
    (38) var_declaration -> TIMESTIMES . VARIABLE SEMI var_declaration

    VARIABLE        shift and go to state 42


state 17

    (45) var_declaration -> AMPERSANT . VARIABLE SEMI var_declaration
    (46) var_declaration -> AMPERSANT . VARIABLE EQUAL VARIABLE SEMI selection_stmt
    (47) var_declaration -> AMPERSANT . VARIABLE SEMI

    VARIABLE        shift and go to state 43


state 18

    (49) fun_declaration -> FUNCTION . ID LPAREN params RPAREN
    (50) fun_declaration -> FUNCTION . ID LPAREN params RPAREN compount_stmt

    ID              shift and go to state 44


state 19

    (120) typeclass -> ID . VARIABLE EQUAL NEW constructor SEMI

    VARIABLE        shift and go to state 45


state 20

    (32) area -> PRIVATE .

    CLASS           reduce using rule 32 (area -> PRIVATE .)
    FUNCTION        reduce using rule 32 (area -> PRIVATE .)
    VARIABLE        reduce using rule 32 (area -> PRIVATE .)
    TIMESTIMES      reduce using rule 32 (area -> PRIVATE .)
    AMPERSANT       reduce using rule 32 (area -> PRIVATE .)


state 21

    (33) area -> PUBLIC .

    CLASS           reduce using rule 33 (area -> PUBLIC .)
    FUNCTION        reduce using rule 33 (area -> PUBLIC .)
    VARIABLE        reduce using rule 33 (area -> PUBLIC .)
    TIMESTIMES      reduce using rule 33 (area -> PUBLIC .)
    AMPERSANT       reduce using rule 33 (area -> PUBLIC .)


state 22

    (34) area -> PROTECTED .

    CLASS           reduce using rule 34 (area -> PROTECTED .)
    FUNCTION        reduce using rule 34 (area -> PROTECTED .)
    VARIABLE        reduce using rule 34 (area -> PROTECTED .)
    TIMESTIMES      reduce using rule 34 (area -> PROTECTED .)
    AMPERSANT       reduce using rule 34 (area -> PROTECTED .)


state 23

    (20) header_declaration -> REQUIRE . LPAREN STRING RPAREN SEMI

    LPAREN          shift and go to state 46


state 24

    (21) header_declaration -> INCLUDE . LPAREN STRING RPAREN SEMI

    LPAREN          shift and go to state 47


state 25

    (23) class_declaration -> CLASS . ID LBLOCK attribute RBLOCK
    (24) class_declaration -> CLASS . ID LBLOCK RBLOCK
    (25) class_declaration -> CLASS . ID EXTENDS ID LBLOCK attribute RBLOCK
    (26) class_declaration -> CLASS . ID EXTENDS ID LBLOCK RBLOCK

    ID              shift and go to state 48


state 26

    (16) echo_stmt -> empty .

    ECHO            reduce using rule 16 (echo_stmt -> empty .)
    CLOSETAG        reduce using rule 16 (echo_stmt -> empty .)
    VARIABLE        reduce using rule 16 (echo_stmt -> empty .)
    TIMESTIMES      reduce using rule 16 (echo_stmt -> empty .)
    AMPERSANT       reduce using rule 16 (echo_stmt -> empty .)
    FUNCTION        reduce using rule 16 (echo_stmt -> empty .)
    PRIVATE         reduce using rule 16 (echo_stmt -> empty .)
    PUBLIC          reduce using rule 16 (echo_stmt -> empty .)
    PROTECTED       reduce using rule 16 (echo_stmt -> empty .)
    REQUIRE         reduce using rule 16 (echo_stmt -> empty .)
    INCLUDE         reduce using rule 16 (echo_stmt -> empty .)
    CLASS           reduce using rule 16 (echo_stmt -> empty .)
    IF              reduce using rule 16 (echo_stmt -> empty .)
    SWITCH          reduce using rule 16 (echo_stmt -> empty .)
    CASE            reduce using rule 16 (echo_stmt -> empty .)
    DEFAULT         reduce using rule 16 (echo_stmt -> empty .)
    FOR             reduce using rule 16 (echo_stmt -> empty .)
    WHILE           reduce using rule 16 (echo_stmt -> empty .)
    DO              reduce using rule 16 (echo_stmt -> empty .)
    ID              reduce using rule 16 (echo_stmt -> empty .)
    COMMENTS        reduce using rule 16 (echo_stmt -> empty .)
    BREAK           reduce using rule 16 (echo_stmt -> empty .)
    SEMI            reduce using rule 16 (echo_stmt -> empty .)
    LBLOCK          reduce using rule 16 (echo_stmt -> empty .)
    RETURN          reduce using rule 16 (echo_stmt -> empty .)
    LPAREN          reduce using rule 16 (echo_stmt -> empty .)
    NUM             reduce using rule 16 (echo_stmt -> empty .)
    TRUE            reduce using rule 16 (echo_stmt -> empty .)
    FALSE           reduce using rule 16 (echo_stmt -> empty .)
    RBLOCK          reduce using rule 16 (echo_stmt -> empty .)
    ELSE            reduce using rule 16 (echo_stmt -> empty .)
    ELSEIF          reduce using rule 16 (echo_stmt -> empty .)


state 27

    (70) selection_stmt -> IF . LPAREN expression RPAREN statement
    (71) selection_stmt -> IF . LPAREN expression RPAREN statement selection

    LPAREN          shift and go to state 49


state 28

    (74) selection_stmt -> SWITCH . LPAREN var RPAREN statement

    LPAREN          shift and go to state 50


state 29

    (75) selection_stmt -> CASE . NUM COLON statement BREAK SEMI

    NUM             shift and go to state 51


state 30

    (76) selection_stmt -> DEFAULT . COLON statement BREAK SEMI

    COLON           shift and go to state 52


state 31

    (77) iteration_stmt -> FOR . LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement

    LPAREN          shift and go to state 53


state 32

    (78) iteration_stmt -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 54


state 33

    (79) iteration_stmt -> DO . LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN

    LBLOCK          shift and go to state 55


state 34

    (31) comments -> COMMENTS .

    CLOSETAG        reduce using rule 31 (comments -> COMMENTS .)
    VARIABLE        reduce using rule 31 (comments -> COMMENTS .)
    TIMESTIMES      reduce using rule 31 (comments -> COMMENTS .)
    AMPERSANT       reduce using rule 31 (comments -> COMMENTS .)
    FUNCTION        reduce using rule 31 (comments -> COMMENTS .)
    PRIVATE         reduce using rule 31 (comments -> COMMENTS .)
    PUBLIC          reduce using rule 31 (comments -> COMMENTS .)
    PROTECTED       reduce using rule 31 (comments -> COMMENTS .)
    REQUIRE         reduce using rule 31 (comments -> COMMENTS .)
    INCLUDE         reduce using rule 31 (comments -> COMMENTS .)
    CLASS           reduce using rule 31 (comments -> COMMENTS .)
    IF              reduce using rule 31 (comments -> COMMENTS .)
    SWITCH          reduce using rule 31 (comments -> COMMENTS .)
    CASE            reduce using rule 31 (comments -> COMMENTS .)
    DEFAULT         reduce using rule 31 (comments -> COMMENTS .)
    FOR             reduce using rule 31 (comments -> COMMENTS .)
    WHILE           reduce using rule 31 (comments -> COMMENTS .)
    DO              reduce using rule 31 (comments -> COMMENTS .)
    ID              reduce using rule 31 (comments -> COMMENTS .)
    COMMENTS        reduce using rule 31 (comments -> COMMENTS .)
    ECHO            reduce using rule 31 (comments -> COMMENTS .)


state 35

    (1) program -> OPENTAG declaration_list CLOSETAG .

    $end            reduce using rule 1 (program -> OPENTAG declaration_list CLOSETAG .)


state 36

    (2) declaration_list -> declaration_list declaration .

    CLOSETAG        reduce using rule 2 (declaration_list -> declaration_list declaration .)
    VARIABLE        reduce using rule 2 (declaration_list -> declaration_list declaration .)
    TIMESTIMES      reduce using rule 2 (declaration_list -> declaration_list declaration .)
    AMPERSANT       reduce using rule 2 (declaration_list -> declaration_list declaration .)
    FUNCTION        reduce using rule 2 (declaration_list -> declaration_list declaration .)
    PRIVATE         reduce using rule 2 (declaration_list -> declaration_list declaration .)
    PUBLIC          reduce using rule 2 (declaration_list -> declaration_list declaration .)
    PROTECTED       reduce using rule 2 (declaration_list -> declaration_list declaration .)
    REQUIRE         reduce using rule 2 (declaration_list -> declaration_list declaration .)
    INCLUDE         reduce using rule 2 (declaration_list -> declaration_list declaration .)
    CLASS           reduce using rule 2 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 2 (declaration_list -> declaration_list declaration .)
    SWITCH          reduce using rule 2 (declaration_list -> declaration_list declaration .)
    CASE            reduce using rule 2 (declaration_list -> declaration_list declaration .)
    DEFAULT         reduce using rule 2 (declaration_list -> declaration_list declaration .)
    FOR             reduce using rule 2 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 2 (declaration_list -> declaration_list declaration .)
    DO              reduce using rule 2 (declaration_list -> declaration_list declaration .)
    ID              reduce using rule 2 (declaration_list -> declaration_list declaration .)
    COMMENTS        reduce using rule 2 (declaration_list -> declaration_list declaration .)
    ECHO            reduce using rule 2 (declaration_list -> declaration_list declaration .)


state 37

    (6) declaration -> area fun_declaration .

    CLOSETAG        reduce using rule 6 (declaration -> area fun_declaration .)
    VARIABLE        reduce using rule 6 (declaration -> area fun_declaration .)
    TIMESTIMES      reduce using rule 6 (declaration -> area fun_declaration .)
    AMPERSANT       reduce using rule 6 (declaration -> area fun_declaration .)
    FUNCTION        reduce using rule 6 (declaration -> area fun_declaration .)
    PRIVATE         reduce using rule 6 (declaration -> area fun_declaration .)
    PUBLIC          reduce using rule 6 (declaration -> area fun_declaration .)
    PROTECTED       reduce using rule 6 (declaration -> area fun_declaration .)
    REQUIRE         reduce using rule 6 (declaration -> area fun_declaration .)
    INCLUDE         reduce using rule 6 (declaration -> area fun_declaration .)
    CLASS           reduce using rule 6 (declaration -> area fun_declaration .)
    IF              reduce using rule 6 (declaration -> area fun_declaration .)
    SWITCH          reduce using rule 6 (declaration -> area fun_declaration .)
    CASE            reduce using rule 6 (declaration -> area fun_declaration .)
    DEFAULT         reduce using rule 6 (declaration -> area fun_declaration .)
    FOR             reduce using rule 6 (declaration -> area fun_declaration .)
    WHILE           reduce using rule 6 (declaration -> area fun_declaration .)
    DO              reduce using rule 6 (declaration -> area fun_declaration .)
    ID              reduce using rule 6 (declaration -> area fun_declaration .)
    COMMENTS        reduce using rule 6 (declaration -> area fun_declaration .)
    ECHO            reduce using rule 6 (declaration -> area fun_declaration .)


state 38

    (22) class_declaration -> area CLASS . ID LBLOCK attribute RBLOCK

    ID              shift and go to state 56


state 39

    (14) echo_stmt -> echo_stmt ECHO . STRING SEMI
    (15) echo_stmt -> echo_stmt ECHO . VARIABLE SEMI
    (17) echo_stmt -> echo_stmt ECHO . NUM SEMI
    (18) echo_stmt -> echo_stmt ECHO . boolean SEMI
    (19) echo_stmt -> echo_stmt ECHO . fun_declaration SEMI
    (118) boolean -> . TRUE
    (119) boolean -> . FALSE
    (49) fun_declaration -> . FUNCTION ID LPAREN params RPAREN
    (50) fun_declaration -> . FUNCTION ID LPAREN params RPAREN compount_stmt

    STRING          shift and go to state 57
    VARIABLE        shift and go to state 58
    NUM             shift and go to state 59
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    FUNCTION        shift and go to state 18

    boolean                        shift and go to state 60
    fun_declaration                shift and go to state 61

state 40

    (35) var_declaration -> VARIABLE SEMI . var_declaration
    (36) var_declaration -> VARIABLE SEMI .
    (35) var_declaration -> . VARIABLE SEMI var_declaration
    (36) var_declaration -> . VARIABLE SEMI
    (37) var_declaration -> . TIMESTIMES VARIABLE SEMI
    (38) var_declaration -> . TIMESTIMES VARIABLE SEMI var_declaration
    (39) var_declaration -> . VARIABLE EQUAL NUM SEMI var_declaration
    (40) var_declaration -> . VARIABLE EQUAL NUM SEMI
    (41) var_declaration -> . VARIABLE EQUAL boolean SEMI var_declaration
    (42) var_declaration -> . VARIABLE EQUAL boolean SEMI
    (43) var_declaration -> . VARIABLE EQUAL VARIABLE SEMI var_declaration
    (44) var_declaration -> . VARIABLE EQUAL VARIABLE SEMI
    (45) var_declaration -> . AMPERSANT VARIABLE SEMI var_declaration
    (46) var_declaration -> . AMPERSANT VARIABLE EQUAL VARIABLE SEMI selection_stmt
    (47) var_declaration -> . AMPERSANT VARIABLE SEMI
    (48) var_declaration -> . VARIABLE EQUAL simple_expression SEMI

    CLOSETAG        reduce using rule 36 (var_declaration -> VARIABLE SEMI .)
    VARIABLE        reduce using rule 36 (var_declaration -> VARIABLE SEMI .)
    TIMESTIMES      reduce using rule 36 (var_declaration -> VARIABLE SEMI .)
    AMPERSANT       reduce using rule 36 (var_declaration -> VARIABLE SEMI .)
    FUNCTION        reduce using rule 36 (var_declaration -> VARIABLE SEMI .)
    PRIVATE         reduce using rule 36 (var_declaration -> VARIABLE SEMI .)
    PUBLIC          reduce using rule 36 (var_declaration -> VARIABLE SEMI .)
    PROTECTED       reduce using rule 36 (var_declaration -> VARIABLE SEMI .)
    REQUIRE         reduce using rule 36 (var_declaration -> VARIABLE SEMI .)
    INCLUDE         reduce using rule 36 (var_declaration -> VARIABLE SEMI .)
    CLASS           reduce using rule 36 (var_declaration -> VARIABLE SEMI .)
    IF              reduce using rule 36 (var_declaration -> VARIABLE SEMI .)
    SWITCH          reduce using rule 36 (var_declaration -> VARIABLE SEMI .)
    CASE            reduce using rule 36 (var_declaration -> VARIABLE SEMI .)
    DEFAULT         reduce using rule 36 (var_declaration -> VARIABLE SEMI .)
    FOR             reduce using rule 36 (var_declaration -> VARIABLE SEMI .)
    WHILE           reduce using rule 36 (var_declaration -> VARIABLE SEMI .)
    DO              reduce using rule 36 (var_declaration -> VARIABLE SEMI .)
    ID              reduce using rule 36 (var_declaration -> VARIABLE SEMI .)
    COMMENTS        reduce using rule 36 (var_declaration -> VARIABLE SEMI .)
    ECHO            reduce using rule 36 (var_declaration -> VARIABLE SEMI .)
    SEMI            reduce using rule 36 (var_declaration -> VARIABLE SEMI .)
    RBLOCK          reduce using rule 36 (var_declaration -> VARIABLE SEMI .)
    LBLOCK          reduce using rule 36 (var_declaration -> VARIABLE SEMI .)
    RETURN          reduce using rule 36 (var_declaration -> VARIABLE SEMI .)
    LPAREN          reduce using rule 36 (var_declaration -> VARIABLE SEMI .)
    NUM             reduce using rule 36 (var_declaration -> VARIABLE SEMI .)
    TRUE            reduce using rule 36 (var_declaration -> VARIABLE SEMI .)
    FALSE           reduce using rule 36 (var_declaration -> VARIABLE SEMI .)

  ! VARIABLE        [ shift and go to state 15 ]
  ! TIMESTIMES      [ shift and go to state 16 ]
  ! AMPERSANT       [ shift and go to state 17 ]

    var_declaration                shift and go to state 64

state 41

    (39) var_declaration -> VARIABLE EQUAL . NUM SEMI var_declaration
    (40) var_declaration -> VARIABLE EQUAL . NUM SEMI
    (41) var_declaration -> VARIABLE EQUAL . boolean SEMI var_declaration
    (42) var_declaration -> VARIABLE EQUAL . boolean SEMI
    (43) var_declaration -> VARIABLE EQUAL . VARIABLE SEMI var_declaration
    (44) var_declaration -> VARIABLE EQUAL . VARIABLE SEMI
    (48) var_declaration -> VARIABLE EQUAL . simple_expression SEMI
    (118) boolean -> . TRUE
    (119) boolean -> . FALSE
    (89) simple_expression -> . additive_expression relop additive_expression
    (90) simple_expression -> . additive_expression
    (98) additive_expression -> . additive_expression addop term
    (99) additive_expression -> . term
    (100) additive_expression -> . term MINUSMINUS
    (101) additive_expression -> . term PLUSPLUS
    (104) term -> . term mulop factor
    (105) term -> . factor
    (108) factor -> . LPAREN expression RPAREN
    (109) factor -> . var
    (110) factor -> . NUM
    (111) factor -> . boolean
    (112) factor -> . VARIABLE LPAREN args RPAREN
    (87) var -> . VARIABLE
    (88) var -> . VARIABLE LBRACKET expression RBRACKET

    NUM             shift and go to state 66
    VARIABLE        shift and go to state 65
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    LPAREN          shift and go to state 72

    boolean                        shift and go to state 67
    simple_expression              shift and go to state 68
    additive_expression            shift and go to state 69
    term                           shift and go to state 70
    factor                         shift and go to state 71
    var                            shift and go to state 73

state 42

    (37) var_declaration -> TIMESTIMES VARIABLE . SEMI
    (38) var_declaration -> TIMESTIMES VARIABLE . SEMI var_declaration

    SEMI            shift and go to state 74


state 43

    (45) var_declaration -> AMPERSANT VARIABLE . SEMI var_declaration
    (46) var_declaration -> AMPERSANT VARIABLE . EQUAL VARIABLE SEMI selection_stmt
    (47) var_declaration -> AMPERSANT VARIABLE . SEMI

    SEMI            shift and go to state 75
    EQUAL           shift and go to state 76


state 44

    (49) fun_declaration -> FUNCTION ID . LPAREN params RPAREN
    (50) fun_declaration -> FUNCTION ID . LPAREN params RPAREN compount_stmt

    LPAREN          shift and go to state 77


state 45

    (120) typeclass -> ID VARIABLE . EQUAL NEW constructor SEMI

    EQUAL           shift and go to state 78


state 46

    (20) header_declaration -> REQUIRE LPAREN . STRING RPAREN SEMI

    STRING          shift and go to state 79


state 47

    (21) header_declaration -> INCLUDE LPAREN . STRING RPAREN SEMI

    STRING          shift and go to state 80


state 48

    (23) class_declaration -> CLASS ID . LBLOCK attribute RBLOCK
    (24) class_declaration -> CLASS ID . LBLOCK RBLOCK
    (25) class_declaration -> CLASS ID . EXTENDS ID LBLOCK attribute RBLOCK
    (26) class_declaration -> CLASS ID . EXTENDS ID LBLOCK RBLOCK

    LBLOCK          shift and go to state 81
    EXTENDS         shift and go to state 82


state 49

    (70) selection_stmt -> IF LPAREN . expression RPAREN statement
    (71) selection_stmt -> IF LPAREN . expression RPAREN statement selection
    (82) expression -> . var EQUAL expression
    (83) expression -> . simple_expression
    (84) expression -> . var EQUAL AMPERSANT VARIABLE
    (85) expression -> . expression AND expression
    (86) expression -> . expression OR expression
    (87) var -> . VARIABLE
    (88) var -> . VARIABLE LBRACKET expression RBRACKET
    (89) simple_expression -> . additive_expression relop additive_expression
    (90) simple_expression -> . additive_expression
    (98) additive_expression -> . additive_expression addop term
    (99) additive_expression -> . term
    (100) additive_expression -> . term MINUSMINUS
    (101) additive_expression -> . term PLUSPLUS
    (104) term -> . term mulop factor
    (105) term -> . factor
    (108) factor -> . LPAREN expression RPAREN
    (109) factor -> . var
    (110) factor -> . NUM
    (111) factor -> . boolean
    (112) factor -> . VARIABLE LPAREN args RPAREN
    (118) boolean -> . TRUE
    (119) boolean -> . FALSE

    VARIABLE        shift and go to state 86
    LPAREN          shift and go to state 72
    NUM             shift and go to state 87
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63

    expression                     shift and go to state 83
    var                            shift and go to state 84
    simple_expression              shift and go to state 85
    additive_expression            shift and go to state 69
    term                           shift and go to state 70
    factor                         shift and go to state 71
    boolean                        shift and go to state 88

state 50

    (74) selection_stmt -> SWITCH LPAREN . var RPAREN statement
    (87) var -> . VARIABLE
    (88) var -> . VARIABLE LBRACKET expression RBRACKET

    VARIABLE        shift and go to state 90

    var                            shift and go to state 89

state 51

    (75) selection_stmt -> CASE NUM . COLON statement BREAK SEMI

    COLON           shift and go to state 91


state 52

    (76) selection_stmt -> DEFAULT COLON . statement BREAK SEMI
    (62) statement -> . expression_stmt
    (63) statement -> . compount_stmt
    (64) statement -> . selection_stmt
    (65) statement -> . iteration_stmt
    (66) statement -> . return_stmt
    (67) statement -> . class_declaration
    (68) statement -> . echo_stmt
    (69) expression_stmt -> . expression SEMI
    (57) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (70) selection_stmt -> . IF LPAREN expression RPAREN statement
    (71) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (74) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (75) selection_stmt -> . CASE NUM COLON statement BREAK SEMI
    (76) selection_stmt -> . DEFAULT COLON statement BREAK SEMI
    (77) iteration_stmt -> . FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement
    (78) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (79) iteration_stmt -> . DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN
    (80) return_stmt -> . RETURN SEMI
    (81) return_stmt -> . RETURN expression SEMI
    (22) class_declaration -> . area CLASS ID LBLOCK attribute RBLOCK
    (23) class_declaration -> . CLASS ID LBLOCK attribute RBLOCK
    (24) class_declaration -> . CLASS ID LBLOCK RBLOCK
    (25) class_declaration -> . CLASS ID EXTENDS ID LBLOCK attribute RBLOCK
    (26) class_declaration -> . CLASS ID EXTENDS ID LBLOCK RBLOCK
    (14) echo_stmt -> . echo_stmt ECHO STRING SEMI
    (15) echo_stmt -> . echo_stmt ECHO VARIABLE SEMI
    (16) echo_stmt -> . empty
    (17) echo_stmt -> . echo_stmt ECHO NUM SEMI
    (18) echo_stmt -> . echo_stmt ECHO boolean SEMI
    (19) echo_stmt -> . echo_stmt ECHO fun_declaration SEMI
    (82) expression -> . var EQUAL expression
    (83) expression -> . simple_expression
    (84) expression -> . var EQUAL AMPERSANT VARIABLE
    (85) expression -> . expression AND expression
    (86) expression -> . expression OR expression
    (32) area -> . PRIVATE
    (33) area -> . PUBLIC
    (34) area -> . PROTECTED
    (123) empty -> .
    (87) var -> . VARIABLE
    (88) var -> . VARIABLE LBRACKET expression RBRACKET
    (89) simple_expression -> . additive_expression relop additive_expression
    (90) simple_expression -> . additive_expression
    (98) additive_expression -> . additive_expression addop term
    (99) additive_expression -> . term
    (100) additive_expression -> . term MINUSMINUS
    (101) additive_expression -> . term PLUSPLUS
    (104) term -> . term mulop factor
    (105) term -> . factor
    (108) factor -> . LPAREN expression RPAREN
    (109) factor -> . var
    (110) factor -> . NUM
    (111) factor -> . boolean
    (112) factor -> . VARIABLE LPAREN args RPAREN
    (118) boolean -> . TRUE
    (119) boolean -> . FALSE

    LBLOCK          shift and go to state 101
    IF              shift and go to state 27
    SWITCH          shift and go to state 28
    CASE            shift and go to state 29
    DEFAULT         shift and go to state 30
    FOR             shift and go to state 31
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    RETURN          shift and go to state 102
    CLASS           shift and go to state 25
    PRIVATE         shift and go to state 20
    PUBLIC          shift and go to state 21
    PROTECTED       shift and go to state 22
    ECHO            reduce using rule 123 (empty -> .)
    BREAK           reduce using rule 123 (empty -> .)
    VARIABLE        shift and go to state 86
    LPAREN          shift and go to state 72
    NUM             shift and go to state 87
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63

    statement                      shift and go to state 92
    expression_stmt                shift and go to state 93
    compount_stmt                  shift and go to state 94
    selection_stmt                 shift and go to state 95
    iteration_stmt                 shift and go to state 96
    return_stmt                    shift and go to state 97
    class_declaration              shift and go to state 98
    echo_stmt                      shift and go to state 99
    expression                     shift and go to state 100
    var                            shift and go to state 84
    additive_expression            shift and go to state 69
    area                           shift and go to state 103
    empty                          shift and go to state 26
    boolean                        shift and go to state 88
    simple_expression              shift and go to state 85
    term                           shift and go to state 70
    factor                         shift and go to state 71

state 53

    (77) iteration_stmt -> FOR LPAREN . var_declaration SEMI expression SEMI additive_expression RPAREN statement
    (35) var_declaration -> . VARIABLE SEMI var_declaration
    (36) var_declaration -> . VARIABLE SEMI
    (37) var_declaration -> . TIMESTIMES VARIABLE SEMI
    (38) var_declaration -> . TIMESTIMES VARIABLE SEMI var_declaration
    (39) var_declaration -> . VARIABLE EQUAL NUM SEMI var_declaration
    (40) var_declaration -> . VARIABLE EQUAL NUM SEMI
    (41) var_declaration -> . VARIABLE EQUAL boolean SEMI var_declaration
    (42) var_declaration -> . VARIABLE EQUAL boolean SEMI
    (43) var_declaration -> . VARIABLE EQUAL VARIABLE SEMI var_declaration
    (44) var_declaration -> . VARIABLE EQUAL VARIABLE SEMI
    (45) var_declaration -> . AMPERSANT VARIABLE SEMI var_declaration
    (46) var_declaration -> . AMPERSANT VARIABLE EQUAL VARIABLE SEMI selection_stmt
    (47) var_declaration -> . AMPERSANT VARIABLE SEMI
    (48) var_declaration -> . VARIABLE EQUAL simple_expression SEMI

    VARIABLE        shift and go to state 15
    TIMESTIMES      shift and go to state 16
    AMPERSANT       shift and go to state 17

    var_declaration                shift and go to state 104

state 54

    (78) iteration_stmt -> WHILE LPAREN . expression RPAREN statement
    (82) expression -> . var EQUAL expression
    (83) expression -> . simple_expression
    (84) expression -> . var EQUAL AMPERSANT VARIABLE
    (85) expression -> . expression AND expression
    (86) expression -> . expression OR expression
    (87) var -> . VARIABLE
    (88) var -> . VARIABLE LBRACKET expression RBRACKET
    (89) simple_expression -> . additive_expression relop additive_expression
    (90) simple_expression -> . additive_expression
    (98) additive_expression -> . additive_expression addop term
    (99) additive_expression -> . term
    (100) additive_expression -> . term MINUSMINUS
    (101) additive_expression -> . term PLUSPLUS
    (104) term -> . term mulop factor
    (105) term -> . factor
    (108) factor -> . LPAREN expression RPAREN
    (109) factor -> . var
    (110) factor -> . NUM
    (111) factor -> . boolean
    (112) factor -> . VARIABLE LPAREN args RPAREN
    (118) boolean -> . TRUE
    (119) boolean -> . FALSE

    VARIABLE        shift and go to state 86
    LPAREN          shift and go to state 72
    NUM             shift and go to state 87
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63

    expression                     shift and go to state 105
    var                            shift and go to state 84
    simple_expression              shift and go to state 85
    additive_expression            shift and go to state 69
    term                           shift and go to state 70
    factor                         shift and go to state 71
    boolean                        shift and go to state 88

state 55

    (79) iteration_stmt -> DO LBLOCK . statement SEMI RBLOCK WHILE LPAREN expression RPAREN
    (62) statement -> . expression_stmt
    (63) statement -> . compount_stmt
    (64) statement -> . selection_stmt
    (65) statement -> . iteration_stmt
    (66) statement -> . return_stmt
    (67) statement -> . class_declaration
    (68) statement -> . echo_stmt
    (69) expression_stmt -> . expression SEMI
    (57) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (70) selection_stmt -> . IF LPAREN expression RPAREN statement
    (71) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (74) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (75) selection_stmt -> . CASE NUM COLON statement BREAK SEMI
    (76) selection_stmt -> . DEFAULT COLON statement BREAK SEMI
    (77) iteration_stmt -> . FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement
    (78) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (79) iteration_stmt -> . DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN
    (80) return_stmt -> . RETURN SEMI
    (81) return_stmt -> . RETURN expression SEMI
    (22) class_declaration -> . area CLASS ID LBLOCK attribute RBLOCK
    (23) class_declaration -> . CLASS ID LBLOCK attribute RBLOCK
    (24) class_declaration -> . CLASS ID LBLOCK RBLOCK
    (25) class_declaration -> . CLASS ID EXTENDS ID LBLOCK attribute RBLOCK
    (26) class_declaration -> . CLASS ID EXTENDS ID LBLOCK RBLOCK
    (14) echo_stmt -> . echo_stmt ECHO STRING SEMI
    (15) echo_stmt -> . echo_stmt ECHO VARIABLE SEMI
    (16) echo_stmt -> . empty
    (17) echo_stmt -> . echo_stmt ECHO NUM SEMI
    (18) echo_stmt -> . echo_stmt ECHO boolean SEMI
    (19) echo_stmt -> . echo_stmt ECHO fun_declaration SEMI
    (82) expression -> . var EQUAL expression
    (83) expression -> . simple_expression
    (84) expression -> . var EQUAL AMPERSANT VARIABLE
    (85) expression -> . expression AND expression
    (86) expression -> . expression OR expression
    (32) area -> . PRIVATE
    (33) area -> . PUBLIC
    (34) area -> . PROTECTED
    (123) empty -> .
    (87) var -> . VARIABLE
    (88) var -> . VARIABLE LBRACKET expression RBRACKET
    (89) simple_expression -> . additive_expression relop additive_expression
    (90) simple_expression -> . additive_expression
    (98) additive_expression -> . additive_expression addop term
    (99) additive_expression -> . term
    (100) additive_expression -> . term MINUSMINUS
    (101) additive_expression -> . term PLUSPLUS
    (104) term -> . term mulop factor
    (105) term -> . factor
    (108) factor -> . LPAREN expression RPAREN
    (109) factor -> . var
    (110) factor -> . NUM
    (111) factor -> . boolean
    (112) factor -> . VARIABLE LPAREN args RPAREN
    (118) boolean -> . TRUE
    (119) boolean -> . FALSE

    LBLOCK          shift and go to state 101
    IF              shift and go to state 27
    SWITCH          shift and go to state 28
    CASE            shift and go to state 29
    DEFAULT         shift and go to state 30
    FOR             shift and go to state 31
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    RETURN          shift and go to state 102
    CLASS           shift and go to state 25
    PRIVATE         shift and go to state 20
    PUBLIC          shift and go to state 21
    PROTECTED       shift and go to state 22
    ECHO            reduce using rule 123 (empty -> .)
    SEMI            reduce using rule 123 (empty -> .)
    VARIABLE        shift and go to state 86
    LPAREN          shift and go to state 72
    NUM             shift and go to state 87
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63

    statement                      shift and go to state 106
    expression                     shift and go to state 100
    expression_stmt                shift and go to state 93
    compount_stmt                  shift and go to state 94
    selection_stmt                 shift and go to state 95
    iteration_stmt                 shift and go to state 96
    return_stmt                    shift and go to state 97
    class_declaration              shift and go to state 98
    echo_stmt                      shift and go to state 99
    var                            shift and go to state 84
    additive_expression            shift and go to state 69
    area                           shift and go to state 103
    empty                          shift and go to state 26
    boolean                        shift and go to state 88
    simple_expression              shift and go to state 85
    term                           shift and go to state 70
    factor                         shift and go to state 71

state 56

    (22) class_declaration -> area CLASS ID . LBLOCK attribute RBLOCK

    LBLOCK          shift and go to state 107


state 57

    (14) echo_stmt -> echo_stmt ECHO STRING . SEMI

    SEMI            shift and go to state 108


state 58

    (15) echo_stmt -> echo_stmt ECHO VARIABLE . SEMI

    SEMI            shift and go to state 109


state 59

    (17) echo_stmt -> echo_stmt ECHO NUM . SEMI

    SEMI            shift and go to state 110


state 60

    (18) echo_stmt -> echo_stmt ECHO boolean . SEMI

    SEMI            shift and go to state 111


state 61

    (19) echo_stmt -> echo_stmt ECHO fun_declaration . SEMI

    SEMI            shift and go to state 112


state 62

    (118) boolean -> TRUE .

    SEMI            reduce using rule 118 (boolean -> TRUE .)
    MINUSMINUS      reduce using rule 118 (boolean -> TRUE .)
    PLUSPLUS        reduce using rule 118 (boolean -> TRUE .)
    TIMES           reduce using rule 118 (boolean -> TRUE .)
    DIVIDE          reduce using rule 118 (boolean -> TRUE .)
    LESS            reduce using rule 118 (boolean -> TRUE .)
    LESSEQUAL       reduce using rule 118 (boolean -> TRUE .)
    GREATER         reduce using rule 118 (boolean -> TRUE .)
    GREATEREQUAL    reduce using rule 118 (boolean -> TRUE .)
    DEQUAL          reduce using rule 118 (boolean -> TRUE .)
    DISTINT         reduce using rule 118 (boolean -> TRUE .)
    ISEQUAL         reduce using rule 118 (boolean -> TRUE .)
    PLUS            reduce using rule 118 (boolean -> TRUE .)
    MINUS           reduce using rule 118 (boolean -> TRUE .)
    RPAREN          reduce using rule 118 (boolean -> TRUE .)
    AND             reduce using rule 118 (boolean -> TRUE .)
    OR              reduce using rule 118 (boolean -> TRUE .)
    COMMA           reduce using rule 118 (boolean -> TRUE .)
    RBRACKET        reduce using rule 118 (boolean -> TRUE .)


state 63

    (119) boolean -> FALSE .

    SEMI            reduce using rule 119 (boolean -> FALSE .)
    MINUSMINUS      reduce using rule 119 (boolean -> FALSE .)
    PLUSPLUS        reduce using rule 119 (boolean -> FALSE .)
    TIMES           reduce using rule 119 (boolean -> FALSE .)
    DIVIDE          reduce using rule 119 (boolean -> FALSE .)
    LESS            reduce using rule 119 (boolean -> FALSE .)
    LESSEQUAL       reduce using rule 119 (boolean -> FALSE .)
    GREATER         reduce using rule 119 (boolean -> FALSE .)
    GREATEREQUAL    reduce using rule 119 (boolean -> FALSE .)
    DEQUAL          reduce using rule 119 (boolean -> FALSE .)
    DISTINT         reduce using rule 119 (boolean -> FALSE .)
    ISEQUAL         reduce using rule 119 (boolean -> FALSE .)
    PLUS            reduce using rule 119 (boolean -> FALSE .)
    MINUS           reduce using rule 119 (boolean -> FALSE .)
    RPAREN          reduce using rule 119 (boolean -> FALSE .)
    AND             reduce using rule 119 (boolean -> FALSE .)
    OR              reduce using rule 119 (boolean -> FALSE .)
    COMMA           reduce using rule 119 (boolean -> FALSE .)
    RBRACKET        reduce using rule 119 (boolean -> FALSE .)


state 64

    (35) var_declaration -> VARIABLE SEMI var_declaration .

    CLOSETAG        reduce using rule 35 (var_declaration -> VARIABLE SEMI var_declaration .)
    VARIABLE        reduce using rule 35 (var_declaration -> VARIABLE SEMI var_declaration .)
    TIMESTIMES      reduce using rule 35 (var_declaration -> VARIABLE SEMI var_declaration .)
    AMPERSANT       reduce using rule 35 (var_declaration -> VARIABLE SEMI var_declaration .)
    FUNCTION        reduce using rule 35 (var_declaration -> VARIABLE SEMI var_declaration .)
    PRIVATE         reduce using rule 35 (var_declaration -> VARIABLE SEMI var_declaration .)
    PUBLIC          reduce using rule 35 (var_declaration -> VARIABLE SEMI var_declaration .)
    PROTECTED       reduce using rule 35 (var_declaration -> VARIABLE SEMI var_declaration .)
    REQUIRE         reduce using rule 35 (var_declaration -> VARIABLE SEMI var_declaration .)
    INCLUDE         reduce using rule 35 (var_declaration -> VARIABLE SEMI var_declaration .)
    CLASS           reduce using rule 35 (var_declaration -> VARIABLE SEMI var_declaration .)
    IF              reduce using rule 35 (var_declaration -> VARIABLE SEMI var_declaration .)
    SWITCH          reduce using rule 35 (var_declaration -> VARIABLE SEMI var_declaration .)
    CASE            reduce using rule 35 (var_declaration -> VARIABLE SEMI var_declaration .)
    DEFAULT         reduce using rule 35 (var_declaration -> VARIABLE SEMI var_declaration .)
    FOR             reduce using rule 35 (var_declaration -> VARIABLE SEMI var_declaration .)
    WHILE           reduce using rule 35 (var_declaration -> VARIABLE SEMI var_declaration .)
    DO              reduce using rule 35 (var_declaration -> VARIABLE SEMI var_declaration .)
    ID              reduce using rule 35 (var_declaration -> VARIABLE SEMI var_declaration .)
    COMMENTS        reduce using rule 35 (var_declaration -> VARIABLE SEMI var_declaration .)
    ECHO            reduce using rule 35 (var_declaration -> VARIABLE SEMI var_declaration .)
    SEMI            reduce using rule 35 (var_declaration -> VARIABLE SEMI var_declaration .)
    RBLOCK          reduce using rule 35 (var_declaration -> VARIABLE SEMI var_declaration .)
    LBLOCK          reduce using rule 35 (var_declaration -> VARIABLE SEMI var_declaration .)
    RETURN          reduce using rule 35 (var_declaration -> VARIABLE SEMI var_declaration .)
    LPAREN          reduce using rule 35 (var_declaration -> VARIABLE SEMI var_declaration .)
    NUM             reduce using rule 35 (var_declaration -> VARIABLE SEMI var_declaration .)
    TRUE            reduce using rule 35 (var_declaration -> VARIABLE SEMI var_declaration .)
    FALSE           reduce using rule 35 (var_declaration -> VARIABLE SEMI var_declaration .)


state 65

    (43) var_declaration -> VARIABLE EQUAL VARIABLE . SEMI var_declaration
    (44) var_declaration -> VARIABLE EQUAL VARIABLE . SEMI
    (112) factor -> VARIABLE . LPAREN args RPAREN
    (87) var -> VARIABLE .
    (88) var -> VARIABLE . LBRACKET expression RBRACKET

  ! shift/reduce conflict for SEMI resolved as shift
    SEMI            shift and go to state 113
    LPAREN          shift and go to state 114
    MINUSMINUS      reduce using rule 87 (var -> VARIABLE .)
    PLUSPLUS        reduce using rule 87 (var -> VARIABLE .)
    TIMES           reduce using rule 87 (var -> VARIABLE .)
    DIVIDE          reduce using rule 87 (var -> VARIABLE .)
    LESS            reduce using rule 87 (var -> VARIABLE .)
    LESSEQUAL       reduce using rule 87 (var -> VARIABLE .)
    GREATER         reduce using rule 87 (var -> VARIABLE .)
    GREATEREQUAL    reduce using rule 87 (var -> VARIABLE .)
    DEQUAL          reduce using rule 87 (var -> VARIABLE .)
    DISTINT         reduce using rule 87 (var -> VARIABLE .)
    ISEQUAL         reduce using rule 87 (var -> VARIABLE .)
    PLUS            reduce using rule 87 (var -> VARIABLE .)
    MINUS           reduce using rule 87 (var -> VARIABLE .)
    LBRACKET        shift and go to state 115

  ! SEMI            [ reduce using rule 87 (var -> VARIABLE .) ]


state 66

    (39) var_declaration -> VARIABLE EQUAL NUM . SEMI var_declaration
    (40) var_declaration -> VARIABLE EQUAL NUM . SEMI
    (110) factor -> NUM .

  ! shift/reduce conflict for SEMI resolved as shift
    SEMI            shift and go to state 116
    MINUSMINUS      reduce using rule 110 (factor -> NUM .)
    PLUSPLUS        reduce using rule 110 (factor -> NUM .)
    TIMES           reduce using rule 110 (factor -> NUM .)
    DIVIDE          reduce using rule 110 (factor -> NUM .)
    LESS            reduce using rule 110 (factor -> NUM .)
    LESSEQUAL       reduce using rule 110 (factor -> NUM .)
    GREATER         reduce using rule 110 (factor -> NUM .)
    GREATEREQUAL    reduce using rule 110 (factor -> NUM .)
    DEQUAL          reduce using rule 110 (factor -> NUM .)
    DISTINT         reduce using rule 110 (factor -> NUM .)
    ISEQUAL         reduce using rule 110 (factor -> NUM .)
    PLUS            reduce using rule 110 (factor -> NUM .)
    MINUS           reduce using rule 110 (factor -> NUM .)

  ! SEMI            [ reduce using rule 110 (factor -> NUM .) ]


state 67

    (41) var_declaration -> VARIABLE EQUAL boolean . SEMI var_declaration
    (42) var_declaration -> VARIABLE EQUAL boolean . SEMI
    (111) factor -> boolean .

  ! shift/reduce conflict for SEMI resolved as shift
    SEMI            shift and go to state 117
    MINUSMINUS      reduce using rule 111 (factor -> boolean .)
    PLUSPLUS        reduce using rule 111 (factor -> boolean .)
    TIMES           reduce using rule 111 (factor -> boolean .)
    DIVIDE          reduce using rule 111 (factor -> boolean .)
    LESS            reduce using rule 111 (factor -> boolean .)
    LESSEQUAL       reduce using rule 111 (factor -> boolean .)
    GREATER         reduce using rule 111 (factor -> boolean .)
    GREATEREQUAL    reduce using rule 111 (factor -> boolean .)
    DEQUAL          reduce using rule 111 (factor -> boolean .)
    DISTINT         reduce using rule 111 (factor -> boolean .)
    ISEQUAL         reduce using rule 111 (factor -> boolean .)
    PLUS            reduce using rule 111 (factor -> boolean .)
    MINUS           reduce using rule 111 (factor -> boolean .)

  ! SEMI            [ reduce using rule 111 (factor -> boolean .) ]


state 68

    (48) var_declaration -> VARIABLE EQUAL simple_expression . SEMI

    SEMI            shift and go to state 118


state 69

    (89) simple_expression -> additive_expression . relop additive_expression
    (90) simple_expression -> additive_expression .
    (98) additive_expression -> additive_expression . addop term
    (91) relop -> . LESS
    (92) relop -> . LESSEQUAL
    (93) relop -> . GREATER
    (94) relop -> . GREATEREQUAL
    (95) relop -> . DEQUAL
    (96) relop -> . DISTINT
    (97) relop -> . ISEQUAL
    (102) addop -> . PLUS
    (103) addop -> . MINUS

    SEMI            reduce using rule 90 (simple_expression -> additive_expression .)
    RPAREN          reduce using rule 90 (simple_expression -> additive_expression .)
    AND             reduce using rule 90 (simple_expression -> additive_expression .)
    OR              reduce using rule 90 (simple_expression -> additive_expression .)
    COMMA           reduce using rule 90 (simple_expression -> additive_expression .)
    RBRACKET        reduce using rule 90 (simple_expression -> additive_expression .)
    LESS            shift and go to state 121
    LESSEQUAL       shift and go to state 122
    GREATER         shift and go to state 123
    GREATEREQUAL    shift and go to state 124
    DEQUAL          shift and go to state 125
    DISTINT         shift and go to state 126
    ISEQUAL         shift and go to state 127
    PLUS            shift and go to state 128
    MINUS           shift and go to state 129

    relop                          shift and go to state 119
    addop                          shift and go to state 120

state 70

    (99) additive_expression -> term .
    (100) additive_expression -> term . MINUSMINUS
    (101) additive_expression -> term . PLUSPLUS
    (104) term -> term . mulop factor
    (106) mulop -> . TIMES
    (107) mulop -> . DIVIDE

    LESS            reduce using rule 99 (additive_expression -> term .)
    LESSEQUAL       reduce using rule 99 (additive_expression -> term .)
    GREATER         reduce using rule 99 (additive_expression -> term .)
    GREATEREQUAL    reduce using rule 99 (additive_expression -> term .)
    DEQUAL          reduce using rule 99 (additive_expression -> term .)
    DISTINT         reduce using rule 99 (additive_expression -> term .)
    ISEQUAL         reduce using rule 99 (additive_expression -> term .)
    PLUS            reduce using rule 99 (additive_expression -> term .)
    MINUS           reduce using rule 99 (additive_expression -> term .)
    SEMI            reduce using rule 99 (additive_expression -> term .)
    RPAREN          reduce using rule 99 (additive_expression -> term .)
    AND             reduce using rule 99 (additive_expression -> term .)
    OR              reduce using rule 99 (additive_expression -> term .)
    COMMA           reduce using rule 99 (additive_expression -> term .)
    RBRACKET        reduce using rule 99 (additive_expression -> term .)
    MINUSMINUS      shift and go to state 130
    PLUSPLUS        shift and go to state 131
    TIMES           shift and go to state 133
    DIVIDE          shift and go to state 134

    mulop                          shift and go to state 132

state 71

    (105) term -> factor .

    MINUSMINUS      reduce using rule 105 (term -> factor .)
    PLUSPLUS        reduce using rule 105 (term -> factor .)
    TIMES           reduce using rule 105 (term -> factor .)
    DIVIDE          reduce using rule 105 (term -> factor .)
    LESS            reduce using rule 105 (term -> factor .)
    LESSEQUAL       reduce using rule 105 (term -> factor .)
    GREATER         reduce using rule 105 (term -> factor .)
    GREATEREQUAL    reduce using rule 105 (term -> factor .)
    DEQUAL          reduce using rule 105 (term -> factor .)
    DISTINT         reduce using rule 105 (term -> factor .)
    ISEQUAL         reduce using rule 105 (term -> factor .)
    PLUS            reduce using rule 105 (term -> factor .)
    MINUS           reduce using rule 105 (term -> factor .)
    SEMI            reduce using rule 105 (term -> factor .)
    RPAREN          reduce using rule 105 (term -> factor .)
    AND             reduce using rule 105 (term -> factor .)
    OR              reduce using rule 105 (term -> factor .)
    COMMA           reduce using rule 105 (term -> factor .)
    RBRACKET        reduce using rule 105 (term -> factor .)


state 72

    (108) factor -> LPAREN . expression RPAREN
    (82) expression -> . var EQUAL expression
    (83) expression -> . simple_expression
    (84) expression -> . var EQUAL AMPERSANT VARIABLE
    (85) expression -> . expression AND expression
    (86) expression -> . expression OR expression
    (87) var -> . VARIABLE
    (88) var -> . VARIABLE LBRACKET expression RBRACKET
    (89) simple_expression -> . additive_expression relop additive_expression
    (90) simple_expression -> . additive_expression
    (98) additive_expression -> . additive_expression addop term
    (99) additive_expression -> . term
    (100) additive_expression -> . term MINUSMINUS
    (101) additive_expression -> . term PLUSPLUS
    (104) term -> . term mulop factor
    (105) term -> . factor
    (108) factor -> . LPAREN expression RPAREN
    (109) factor -> . var
    (110) factor -> . NUM
    (111) factor -> . boolean
    (112) factor -> . VARIABLE LPAREN args RPAREN
    (118) boolean -> . TRUE
    (119) boolean -> . FALSE

    VARIABLE        shift and go to state 86
    LPAREN          shift and go to state 72
    NUM             shift and go to state 87
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63

    expression                     shift and go to state 135
    var                            shift and go to state 84
    simple_expression              shift and go to state 85
    additive_expression            shift and go to state 69
    term                           shift and go to state 70
    factor                         shift and go to state 71
    boolean                        shift and go to state 88

state 73

    (109) factor -> var .

    MINUSMINUS      reduce using rule 109 (factor -> var .)
    PLUSPLUS        reduce using rule 109 (factor -> var .)
    TIMES           reduce using rule 109 (factor -> var .)
    DIVIDE          reduce using rule 109 (factor -> var .)
    LESS            reduce using rule 109 (factor -> var .)
    LESSEQUAL       reduce using rule 109 (factor -> var .)
    GREATER         reduce using rule 109 (factor -> var .)
    GREATEREQUAL    reduce using rule 109 (factor -> var .)
    DEQUAL          reduce using rule 109 (factor -> var .)
    DISTINT         reduce using rule 109 (factor -> var .)
    ISEQUAL         reduce using rule 109 (factor -> var .)
    PLUS            reduce using rule 109 (factor -> var .)
    MINUS           reduce using rule 109 (factor -> var .)
    SEMI            reduce using rule 109 (factor -> var .)
    RPAREN          reduce using rule 109 (factor -> var .)
    AND             reduce using rule 109 (factor -> var .)
    OR              reduce using rule 109 (factor -> var .)
    COMMA           reduce using rule 109 (factor -> var .)
    RBRACKET        reduce using rule 109 (factor -> var .)


state 74

    (37) var_declaration -> TIMESTIMES VARIABLE SEMI .
    (38) var_declaration -> TIMESTIMES VARIABLE SEMI . var_declaration
    (35) var_declaration -> . VARIABLE SEMI var_declaration
    (36) var_declaration -> . VARIABLE SEMI
    (37) var_declaration -> . TIMESTIMES VARIABLE SEMI
    (38) var_declaration -> . TIMESTIMES VARIABLE SEMI var_declaration
    (39) var_declaration -> . VARIABLE EQUAL NUM SEMI var_declaration
    (40) var_declaration -> . VARIABLE EQUAL NUM SEMI
    (41) var_declaration -> . VARIABLE EQUAL boolean SEMI var_declaration
    (42) var_declaration -> . VARIABLE EQUAL boolean SEMI
    (43) var_declaration -> . VARIABLE EQUAL VARIABLE SEMI var_declaration
    (44) var_declaration -> . VARIABLE EQUAL VARIABLE SEMI
    (45) var_declaration -> . AMPERSANT VARIABLE SEMI var_declaration
    (46) var_declaration -> . AMPERSANT VARIABLE EQUAL VARIABLE SEMI selection_stmt
    (47) var_declaration -> . AMPERSANT VARIABLE SEMI
    (48) var_declaration -> . VARIABLE EQUAL simple_expression SEMI

    CLOSETAG        reduce using rule 37 (var_declaration -> TIMESTIMES VARIABLE SEMI .)
    VARIABLE        reduce using rule 37 (var_declaration -> TIMESTIMES VARIABLE SEMI .)
    TIMESTIMES      reduce using rule 37 (var_declaration -> TIMESTIMES VARIABLE SEMI .)
    AMPERSANT       reduce using rule 37 (var_declaration -> TIMESTIMES VARIABLE SEMI .)
    FUNCTION        reduce using rule 37 (var_declaration -> TIMESTIMES VARIABLE SEMI .)
    PRIVATE         reduce using rule 37 (var_declaration -> TIMESTIMES VARIABLE SEMI .)
    PUBLIC          reduce using rule 37 (var_declaration -> TIMESTIMES VARIABLE SEMI .)
    PROTECTED       reduce using rule 37 (var_declaration -> TIMESTIMES VARIABLE SEMI .)
    REQUIRE         reduce using rule 37 (var_declaration -> TIMESTIMES VARIABLE SEMI .)
    INCLUDE         reduce using rule 37 (var_declaration -> TIMESTIMES VARIABLE SEMI .)
    CLASS           reduce using rule 37 (var_declaration -> TIMESTIMES VARIABLE SEMI .)
    IF              reduce using rule 37 (var_declaration -> TIMESTIMES VARIABLE SEMI .)
    SWITCH          reduce using rule 37 (var_declaration -> TIMESTIMES VARIABLE SEMI .)
    CASE            reduce using rule 37 (var_declaration -> TIMESTIMES VARIABLE SEMI .)
    DEFAULT         reduce using rule 37 (var_declaration -> TIMESTIMES VARIABLE SEMI .)
    FOR             reduce using rule 37 (var_declaration -> TIMESTIMES VARIABLE SEMI .)
    WHILE           reduce using rule 37 (var_declaration -> TIMESTIMES VARIABLE SEMI .)
    DO              reduce using rule 37 (var_declaration -> TIMESTIMES VARIABLE SEMI .)
    ID              reduce using rule 37 (var_declaration -> TIMESTIMES VARIABLE SEMI .)
    COMMENTS        reduce using rule 37 (var_declaration -> TIMESTIMES VARIABLE SEMI .)
    ECHO            reduce using rule 37 (var_declaration -> TIMESTIMES VARIABLE SEMI .)
    SEMI            reduce using rule 37 (var_declaration -> TIMESTIMES VARIABLE SEMI .)
    RBLOCK          reduce using rule 37 (var_declaration -> TIMESTIMES VARIABLE SEMI .)
    LBLOCK          reduce using rule 37 (var_declaration -> TIMESTIMES VARIABLE SEMI .)
    RETURN          reduce using rule 37 (var_declaration -> TIMESTIMES VARIABLE SEMI .)
    LPAREN          reduce using rule 37 (var_declaration -> TIMESTIMES VARIABLE SEMI .)
    NUM             reduce using rule 37 (var_declaration -> TIMESTIMES VARIABLE SEMI .)
    TRUE            reduce using rule 37 (var_declaration -> TIMESTIMES VARIABLE SEMI .)
    FALSE           reduce using rule 37 (var_declaration -> TIMESTIMES VARIABLE SEMI .)

  ! VARIABLE        [ shift and go to state 15 ]
  ! TIMESTIMES      [ shift and go to state 16 ]
  ! AMPERSANT       [ shift and go to state 17 ]

    var_declaration                shift and go to state 136

state 75

    (45) var_declaration -> AMPERSANT VARIABLE SEMI . var_declaration
    (47) var_declaration -> AMPERSANT VARIABLE SEMI .
    (35) var_declaration -> . VARIABLE SEMI var_declaration
    (36) var_declaration -> . VARIABLE SEMI
    (37) var_declaration -> . TIMESTIMES VARIABLE SEMI
    (38) var_declaration -> . TIMESTIMES VARIABLE SEMI var_declaration
    (39) var_declaration -> . VARIABLE EQUAL NUM SEMI var_declaration
    (40) var_declaration -> . VARIABLE EQUAL NUM SEMI
    (41) var_declaration -> . VARIABLE EQUAL boolean SEMI var_declaration
    (42) var_declaration -> . VARIABLE EQUAL boolean SEMI
    (43) var_declaration -> . VARIABLE EQUAL VARIABLE SEMI var_declaration
    (44) var_declaration -> . VARIABLE EQUAL VARIABLE SEMI
    (45) var_declaration -> . AMPERSANT VARIABLE SEMI var_declaration
    (46) var_declaration -> . AMPERSANT VARIABLE EQUAL VARIABLE SEMI selection_stmt
    (47) var_declaration -> . AMPERSANT VARIABLE SEMI
    (48) var_declaration -> . VARIABLE EQUAL simple_expression SEMI

    CLOSETAG        reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE SEMI .)
    VARIABLE        reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE SEMI .)
    TIMESTIMES      reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE SEMI .)
    AMPERSANT       reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE SEMI .)
    FUNCTION        reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE SEMI .)
    PRIVATE         reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE SEMI .)
    PUBLIC          reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE SEMI .)
    PROTECTED       reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE SEMI .)
    REQUIRE         reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE SEMI .)
    INCLUDE         reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE SEMI .)
    CLASS           reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE SEMI .)
    IF              reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE SEMI .)
    SWITCH          reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE SEMI .)
    CASE            reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE SEMI .)
    DEFAULT         reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE SEMI .)
    FOR             reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE SEMI .)
    WHILE           reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE SEMI .)
    DO              reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE SEMI .)
    ID              reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE SEMI .)
    COMMENTS        reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE SEMI .)
    ECHO            reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE SEMI .)
    SEMI            reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE SEMI .)
    RBLOCK          reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE SEMI .)
    LBLOCK          reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE SEMI .)
    RETURN          reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE SEMI .)
    LPAREN          reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE SEMI .)
    NUM             reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE SEMI .)
    TRUE            reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE SEMI .)
    FALSE           reduce using rule 47 (var_declaration -> AMPERSANT VARIABLE SEMI .)

  ! VARIABLE        [ shift and go to state 15 ]
  ! TIMESTIMES      [ shift and go to state 16 ]
  ! AMPERSANT       [ shift and go to state 17 ]

    var_declaration                shift and go to state 137

state 76

    (46) var_declaration -> AMPERSANT VARIABLE EQUAL . VARIABLE SEMI selection_stmt

    VARIABLE        shift and go to state 138


state 77

    (49) fun_declaration -> FUNCTION ID LPAREN . params RPAREN
    (50) fun_declaration -> FUNCTION ID LPAREN . params RPAREN compount_stmt
    (51) params -> . param_list
    (52) params -> . empty
    (53) param_list -> . param_list COMMA param_list
    (54) param_list -> . param
    (123) empty -> .
    (55) param -> . VARIABLE
    (56) param -> . VARIABLE LBRACKET RBRACKET

    RPAREN          reduce using rule 123 (empty -> .)
    VARIABLE        shift and go to state 143

    params                         shift and go to state 139
    param_list                     shift and go to state 140
    empty                          shift and go to state 141
    param                          shift and go to state 142

state 78

    (120) typeclass -> ID VARIABLE EQUAL . NEW constructor SEMI

    NEW             shift and go to state 144


state 79

    (20) header_declaration -> REQUIRE LPAREN STRING . RPAREN SEMI

    RPAREN          shift and go to state 145


state 80

    (21) header_declaration -> INCLUDE LPAREN STRING . RPAREN SEMI

    RPAREN          shift and go to state 146


state 81

    (23) class_declaration -> CLASS ID LBLOCK . attribute RBLOCK
    (24) class_declaration -> CLASS ID LBLOCK . RBLOCK
    (27) attribute -> . attribute area var_declaration
    (28) attribute -> . area var_declaration
    (29) attribute -> . attribute area fun_declaration
    (30) attribute -> . area fun_declaration
    (32) area -> . PRIVATE
    (33) area -> . PUBLIC
    (34) area -> . PROTECTED

    RBLOCK          shift and go to state 148
    PRIVATE         shift and go to state 20
    PUBLIC          shift and go to state 21
    PROTECTED       shift and go to state 22

    attribute                      shift and go to state 147
    area                           shift and go to state 149

state 82

    (25) class_declaration -> CLASS ID EXTENDS . ID LBLOCK attribute RBLOCK
    (26) class_declaration -> CLASS ID EXTENDS . ID LBLOCK RBLOCK

    ID              shift and go to state 150


state 83

    (70) selection_stmt -> IF LPAREN expression . RPAREN statement
    (71) selection_stmt -> IF LPAREN expression . RPAREN statement selection
    (85) expression -> expression . AND expression
    (86) expression -> expression . OR expression

    RPAREN          shift and go to state 151
    AND             shift and go to state 152
    OR              shift and go to state 153


state 84

    (82) expression -> var . EQUAL expression
    (84) expression -> var . EQUAL AMPERSANT VARIABLE
    (109) factor -> var .

    EQUAL           shift and go to state 154
    MINUSMINUS      reduce using rule 109 (factor -> var .)
    PLUSPLUS        reduce using rule 109 (factor -> var .)
    TIMES           reduce using rule 109 (factor -> var .)
    DIVIDE          reduce using rule 109 (factor -> var .)
    LESS            reduce using rule 109 (factor -> var .)
    LESSEQUAL       reduce using rule 109 (factor -> var .)
    GREATER         reduce using rule 109 (factor -> var .)
    GREATEREQUAL    reduce using rule 109 (factor -> var .)
    DEQUAL          reduce using rule 109 (factor -> var .)
    DISTINT         reduce using rule 109 (factor -> var .)
    ISEQUAL         reduce using rule 109 (factor -> var .)
    PLUS            reduce using rule 109 (factor -> var .)
    MINUS           reduce using rule 109 (factor -> var .)
    RPAREN          reduce using rule 109 (factor -> var .)
    AND             reduce using rule 109 (factor -> var .)
    OR              reduce using rule 109 (factor -> var .)
    SEMI            reduce using rule 109 (factor -> var .)
    COMMA           reduce using rule 109 (factor -> var .)
    RBRACKET        reduce using rule 109 (factor -> var .)


state 85

    (83) expression -> simple_expression .

    RPAREN          reduce using rule 83 (expression -> simple_expression .)
    AND             reduce using rule 83 (expression -> simple_expression .)
    OR              reduce using rule 83 (expression -> simple_expression .)
    SEMI            reduce using rule 83 (expression -> simple_expression .)
    COMMA           reduce using rule 83 (expression -> simple_expression .)
    RBRACKET        reduce using rule 83 (expression -> simple_expression .)


state 86

    (87) var -> VARIABLE .
    (88) var -> VARIABLE . LBRACKET expression RBRACKET
    (112) factor -> VARIABLE . LPAREN args RPAREN

    EQUAL           reduce using rule 87 (var -> VARIABLE .)
    MINUSMINUS      reduce using rule 87 (var -> VARIABLE .)
    PLUSPLUS        reduce using rule 87 (var -> VARIABLE .)
    TIMES           reduce using rule 87 (var -> VARIABLE .)
    DIVIDE          reduce using rule 87 (var -> VARIABLE .)
    LESS            reduce using rule 87 (var -> VARIABLE .)
    LESSEQUAL       reduce using rule 87 (var -> VARIABLE .)
    GREATER         reduce using rule 87 (var -> VARIABLE .)
    GREATEREQUAL    reduce using rule 87 (var -> VARIABLE .)
    DEQUAL          reduce using rule 87 (var -> VARIABLE .)
    DISTINT         reduce using rule 87 (var -> VARIABLE .)
    ISEQUAL         reduce using rule 87 (var -> VARIABLE .)
    PLUS            reduce using rule 87 (var -> VARIABLE .)
    MINUS           reduce using rule 87 (var -> VARIABLE .)
    RPAREN          reduce using rule 87 (var -> VARIABLE .)
    AND             reduce using rule 87 (var -> VARIABLE .)
    OR              reduce using rule 87 (var -> VARIABLE .)
    SEMI            reduce using rule 87 (var -> VARIABLE .)
    COMMA           reduce using rule 87 (var -> VARIABLE .)
    RBRACKET        reduce using rule 87 (var -> VARIABLE .)
    LBRACKET        shift and go to state 115
    LPAREN          shift and go to state 114


state 87

    (110) factor -> NUM .

    MINUSMINUS      reduce using rule 110 (factor -> NUM .)
    PLUSPLUS        reduce using rule 110 (factor -> NUM .)
    TIMES           reduce using rule 110 (factor -> NUM .)
    DIVIDE          reduce using rule 110 (factor -> NUM .)
    LESS            reduce using rule 110 (factor -> NUM .)
    LESSEQUAL       reduce using rule 110 (factor -> NUM .)
    GREATER         reduce using rule 110 (factor -> NUM .)
    GREATEREQUAL    reduce using rule 110 (factor -> NUM .)
    DEQUAL          reduce using rule 110 (factor -> NUM .)
    DISTINT         reduce using rule 110 (factor -> NUM .)
    ISEQUAL         reduce using rule 110 (factor -> NUM .)
    PLUS            reduce using rule 110 (factor -> NUM .)
    MINUS           reduce using rule 110 (factor -> NUM .)
    RPAREN          reduce using rule 110 (factor -> NUM .)
    AND             reduce using rule 110 (factor -> NUM .)
    OR              reduce using rule 110 (factor -> NUM .)
    SEMI            reduce using rule 110 (factor -> NUM .)
    COMMA           reduce using rule 110 (factor -> NUM .)
    RBRACKET        reduce using rule 110 (factor -> NUM .)


state 88

    (111) factor -> boolean .

    MINUSMINUS      reduce using rule 111 (factor -> boolean .)
    PLUSPLUS        reduce using rule 111 (factor -> boolean .)
    TIMES           reduce using rule 111 (factor -> boolean .)
    DIVIDE          reduce using rule 111 (factor -> boolean .)
    LESS            reduce using rule 111 (factor -> boolean .)
    LESSEQUAL       reduce using rule 111 (factor -> boolean .)
    GREATER         reduce using rule 111 (factor -> boolean .)
    GREATEREQUAL    reduce using rule 111 (factor -> boolean .)
    DEQUAL          reduce using rule 111 (factor -> boolean .)
    DISTINT         reduce using rule 111 (factor -> boolean .)
    ISEQUAL         reduce using rule 111 (factor -> boolean .)
    PLUS            reduce using rule 111 (factor -> boolean .)
    MINUS           reduce using rule 111 (factor -> boolean .)
    RPAREN          reduce using rule 111 (factor -> boolean .)
    AND             reduce using rule 111 (factor -> boolean .)
    OR              reduce using rule 111 (factor -> boolean .)
    SEMI            reduce using rule 111 (factor -> boolean .)
    COMMA           reduce using rule 111 (factor -> boolean .)
    RBRACKET        reduce using rule 111 (factor -> boolean .)


state 89

    (74) selection_stmt -> SWITCH LPAREN var . RPAREN statement

    RPAREN          shift and go to state 155


state 90

    (87) var -> VARIABLE .
    (88) var -> VARIABLE . LBRACKET expression RBRACKET

    RPAREN          reduce using rule 87 (var -> VARIABLE .)
    LBRACKET        shift and go to state 115


state 91

    (75) selection_stmt -> CASE NUM COLON . statement BREAK SEMI
    (62) statement -> . expression_stmt
    (63) statement -> . compount_stmt
    (64) statement -> . selection_stmt
    (65) statement -> . iteration_stmt
    (66) statement -> . return_stmt
    (67) statement -> . class_declaration
    (68) statement -> . echo_stmt
    (69) expression_stmt -> . expression SEMI
    (57) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (70) selection_stmt -> . IF LPAREN expression RPAREN statement
    (71) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (74) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (75) selection_stmt -> . CASE NUM COLON statement BREAK SEMI
    (76) selection_stmt -> . DEFAULT COLON statement BREAK SEMI
    (77) iteration_stmt -> . FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement
    (78) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (79) iteration_stmt -> . DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN
    (80) return_stmt -> . RETURN SEMI
    (81) return_stmt -> . RETURN expression SEMI
    (22) class_declaration -> . area CLASS ID LBLOCK attribute RBLOCK
    (23) class_declaration -> . CLASS ID LBLOCK attribute RBLOCK
    (24) class_declaration -> . CLASS ID LBLOCK RBLOCK
    (25) class_declaration -> . CLASS ID EXTENDS ID LBLOCK attribute RBLOCK
    (26) class_declaration -> . CLASS ID EXTENDS ID LBLOCK RBLOCK
    (14) echo_stmt -> . echo_stmt ECHO STRING SEMI
    (15) echo_stmt -> . echo_stmt ECHO VARIABLE SEMI
    (16) echo_stmt -> . empty
    (17) echo_stmt -> . echo_stmt ECHO NUM SEMI
    (18) echo_stmt -> . echo_stmt ECHO boolean SEMI
    (19) echo_stmt -> . echo_stmt ECHO fun_declaration SEMI
    (82) expression -> . var EQUAL expression
    (83) expression -> . simple_expression
    (84) expression -> . var EQUAL AMPERSANT VARIABLE
    (85) expression -> . expression AND expression
    (86) expression -> . expression OR expression
    (32) area -> . PRIVATE
    (33) area -> . PUBLIC
    (34) area -> . PROTECTED
    (123) empty -> .
    (87) var -> . VARIABLE
    (88) var -> . VARIABLE LBRACKET expression RBRACKET
    (89) simple_expression -> . additive_expression relop additive_expression
    (90) simple_expression -> . additive_expression
    (98) additive_expression -> . additive_expression addop term
    (99) additive_expression -> . term
    (100) additive_expression -> . term MINUSMINUS
    (101) additive_expression -> . term PLUSPLUS
    (104) term -> . term mulop factor
    (105) term -> . factor
    (108) factor -> . LPAREN expression RPAREN
    (109) factor -> . var
    (110) factor -> . NUM
    (111) factor -> . boolean
    (112) factor -> . VARIABLE LPAREN args RPAREN
    (118) boolean -> . TRUE
    (119) boolean -> . FALSE

    LBLOCK          shift and go to state 101
    IF              shift and go to state 27
    SWITCH          shift and go to state 28
    CASE            shift and go to state 29
    DEFAULT         shift and go to state 30
    FOR             shift and go to state 31
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    RETURN          shift and go to state 102
    CLASS           shift and go to state 25
    PRIVATE         shift and go to state 20
    PUBLIC          shift and go to state 21
    PROTECTED       shift and go to state 22
    ECHO            reduce using rule 123 (empty -> .)
    BREAK           reduce using rule 123 (empty -> .)
    VARIABLE        shift and go to state 86
    LPAREN          shift and go to state 72
    NUM             shift and go to state 87
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63

    statement                      shift and go to state 156
    expression_stmt                shift and go to state 93
    compount_stmt                  shift and go to state 94
    selection_stmt                 shift and go to state 95
    iteration_stmt                 shift and go to state 96
    return_stmt                    shift and go to state 97
    class_declaration              shift and go to state 98
    echo_stmt                      shift and go to state 99
    expression                     shift and go to state 100
    var                            shift and go to state 84
    additive_expression            shift and go to state 69
    area                           shift and go to state 103
    empty                          shift and go to state 26
    boolean                        shift and go to state 88
    simple_expression              shift and go to state 85
    term                           shift and go to state 70
    factor                         shift and go to state 71

state 92

    (76) selection_stmt -> DEFAULT COLON statement . BREAK SEMI

    BREAK           shift and go to state 157


state 93

    (62) statement -> expression_stmt .

    BREAK           reduce using rule 62 (statement -> expression_stmt .)
    SEMI            reduce using rule 62 (statement -> expression_stmt .)
    ELSE            reduce using rule 62 (statement -> expression_stmt .)
    ELSEIF          reduce using rule 62 (statement -> expression_stmt .)
    CLOSETAG        reduce using rule 62 (statement -> expression_stmt .)
    VARIABLE        reduce using rule 62 (statement -> expression_stmt .)
    TIMESTIMES      reduce using rule 62 (statement -> expression_stmt .)
    AMPERSANT       reduce using rule 62 (statement -> expression_stmt .)
    FUNCTION        reduce using rule 62 (statement -> expression_stmt .)
    PRIVATE         reduce using rule 62 (statement -> expression_stmt .)
    PUBLIC          reduce using rule 62 (statement -> expression_stmt .)
    PROTECTED       reduce using rule 62 (statement -> expression_stmt .)
    REQUIRE         reduce using rule 62 (statement -> expression_stmt .)
    INCLUDE         reduce using rule 62 (statement -> expression_stmt .)
    CLASS           reduce using rule 62 (statement -> expression_stmt .)
    IF              reduce using rule 62 (statement -> expression_stmt .)
    SWITCH          reduce using rule 62 (statement -> expression_stmt .)
    CASE            reduce using rule 62 (statement -> expression_stmt .)
    DEFAULT         reduce using rule 62 (statement -> expression_stmt .)
    FOR             reduce using rule 62 (statement -> expression_stmt .)
    WHILE           reduce using rule 62 (statement -> expression_stmt .)
    DO              reduce using rule 62 (statement -> expression_stmt .)
    ID              reduce using rule 62 (statement -> expression_stmt .)
    COMMENTS        reduce using rule 62 (statement -> expression_stmt .)
    ECHO            reduce using rule 62 (statement -> expression_stmt .)
    RBLOCK          reduce using rule 62 (statement -> expression_stmt .)
    LBLOCK          reduce using rule 62 (statement -> expression_stmt .)
    RETURN          reduce using rule 62 (statement -> expression_stmt .)
    LPAREN          reduce using rule 62 (statement -> expression_stmt .)
    NUM             reduce using rule 62 (statement -> expression_stmt .)
    TRUE            reduce using rule 62 (statement -> expression_stmt .)
    FALSE           reduce using rule 62 (statement -> expression_stmt .)


state 94

    (63) statement -> compount_stmt .

    BREAK           reduce using rule 63 (statement -> compount_stmt .)
    SEMI            reduce using rule 63 (statement -> compount_stmt .)
    ELSE            reduce using rule 63 (statement -> compount_stmt .)
    ELSEIF          reduce using rule 63 (statement -> compount_stmt .)
    CLOSETAG        reduce using rule 63 (statement -> compount_stmt .)
    VARIABLE        reduce using rule 63 (statement -> compount_stmt .)
    TIMESTIMES      reduce using rule 63 (statement -> compount_stmt .)
    AMPERSANT       reduce using rule 63 (statement -> compount_stmt .)
    FUNCTION        reduce using rule 63 (statement -> compount_stmt .)
    PRIVATE         reduce using rule 63 (statement -> compount_stmt .)
    PUBLIC          reduce using rule 63 (statement -> compount_stmt .)
    PROTECTED       reduce using rule 63 (statement -> compount_stmt .)
    REQUIRE         reduce using rule 63 (statement -> compount_stmt .)
    INCLUDE         reduce using rule 63 (statement -> compount_stmt .)
    CLASS           reduce using rule 63 (statement -> compount_stmt .)
    IF              reduce using rule 63 (statement -> compount_stmt .)
    SWITCH          reduce using rule 63 (statement -> compount_stmt .)
    CASE            reduce using rule 63 (statement -> compount_stmt .)
    DEFAULT         reduce using rule 63 (statement -> compount_stmt .)
    FOR             reduce using rule 63 (statement -> compount_stmt .)
    WHILE           reduce using rule 63 (statement -> compount_stmt .)
    DO              reduce using rule 63 (statement -> compount_stmt .)
    ID              reduce using rule 63 (statement -> compount_stmt .)
    COMMENTS        reduce using rule 63 (statement -> compount_stmt .)
    ECHO            reduce using rule 63 (statement -> compount_stmt .)
    RBLOCK          reduce using rule 63 (statement -> compount_stmt .)
    LBLOCK          reduce using rule 63 (statement -> compount_stmt .)
    RETURN          reduce using rule 63 (statement -> compount_stmt .)
    LPAREN          reduce using rule 63 (statement -> compount_stmt .)
    NUM             reduce using rule 63 (statement -> compount_stmt .)
    TRUE            reduce using rule 63 (statement -> compount_stmt .)
    FALSE           reduce using rule 63 (statement -> compount_stmt .)


state 95

    (64) statement -> selection_stmt .

    BREAK           reduce using rule 64 (statement -> selection_stmt .)
    SEMI            reduce using rule 64 (statement -> selection_stmt .)
    ELSE            reduce using rule 64 (statement -> selection_stmt .)
    ELSEIF          reduce using rule 64 (statement -> selection_stmt .)
    CLOSETAG        reduce using rule 64 (statement -> selection_stmt .)
    VARIABLE        reduce using rule 64 (statement -> selection_stmt .)
    TIMESTIMES      reduce using rule 64 (statement -> selection_stmt .)
    AMPERSANT       reduce using rule 64 (statement -> selection_stmt .)
    FUNCTION        reduce using rule 64 (statement -> selection_stmt .)
    PRIVATE         reduce using rule 64 (statement -> selection_stmt .)
    PUBLIC          reduce using rule 64 (statement -> selection_stmt .)
    PROTECTED       reduce using rule 64 (statement -> selection_stmt .)
    REQUIRE         reduce using rule 64 (statement -> selection_stmt .)
    INCLUDE         reduce using rule 64 (statement -> selection_stmt .)
    CLASS           reduce using rule 64 (statement -> selection_stmt .)
    IF              reduce using rule 64 (statement -> selection_stmt .)
    SWITCH          reduce using rule 64 (statement -> selection_stmt .)
    CASE            reduce using rule 64 (statement -> selection_stmt .)
    DEFAULT         reduce using rule 64 (statement -> selection_stmt .)
    FOR             reduce using rule 64 (statement -> selection_stmt .)
    WHILE           reduce using rule 64 (statement -> selection_stmt .)
    DO              reduce using rule 64 (statement -> selection_stmt .)
    ID              reduce using rule 64 (statement -> selection_stmt .)
    COMMENTS        reduce using rule 64 (statement -> selection_stmt .)
    ECHO            reduce using rule 64 (statement -> selection_stmt .)
    RBLOCK          reduce using rule 64 (statement -> selection_stmt .)
    LBLOCK          reduce using rule 64 (statement -> selection_stmt .)
    RETURN          reduce using rule 64 (statement -> selection_stmt .)
    LPAREN          reduce using rule 64 (statement -> selection_stmt .)
    NUM             reduce using rule 64 (statement -> selection_stmt .)
    TRUE            reduce using rule 64 (statement -> selection_stmt .)
    FALSE           reduce using rule 64 (statement -> selection_stmt .)


state 96

    (65) statement -> iteration_stmt .

    BREAK           reduce using rule 65 (statement -> iteration_stmt .)
    SEMI            reduce using rule 65 (statement -> iteration_stmt .)
    ELSE            reduce using rule 65 (statement -> iteration_stmt .)
    ELSEIF          reduce using rule 65 (statement -> iteration_stmt .)
    CLOSETAG        reduce using rule 65 (statement -> iteration_stmt .)
    VARIABLE        reduce using rule 65 (statement -> iteration_stmt .)
    TIMESTIMES      reduce using rule 65 (statement -> iteration_stmt .)
    AMPERSANT       reduce using rule 65 (statement -> iteration_stmt .)
    FUNCTION        reduce using rule 65 (statement -> iteration_stmt .)
    PRIVATE         reduce using rule 65 (statement -> iteration_stmt .)
    PUBLIC          reduce using rule 65 (statement -> iteration_stmt .)
    PROTECTED       reduce using rule 65 (statement -> iteration_stmt .)
    REQUIRE         reduce using rule 65 (statement -> iteration_stmt .)
    INCLUDE         reduce using rule 65 (statement -> iteration_stmt .)
    CLASS           reduce using rule 65 (statement -> iteration_stmt .)
    IF              reduce using rule 65 (statement -> iteration_stmt .)
    SWITCH          reduce using rule 65 (statement -> iteration_stmt .)
    CASE            reduce using rule 65 (statement -> iteration_stmt .)
    DEFAULT         reduce using rule 65 (statement -> iteration_stmt .)
    FOR             reduce using rule 65 (statement -> iteration_stmt .)
    WHILE           reduce using rule 65 (statement -> iteration_stmt .)
    DO              reduce using rule 65 (statement -> iteration_stmt .)
    ID              reduce using rule 65 (statement -> iteration_stmt .)
    COMMENTS        reduce using rule 65 (statement -> iteration_stmt .)
    ECHO            reduce using rule 65 (statement -> iteration_stmt .)
    RBLOCK          reduce using rule 65 (statement -> iteration_stmt .)
    LBLOCK          reduce using rule 65 (statement -> iteration_stmt .)
    RETURN          reduce using rule 65 (statement -> iteration_stmt .)
    LPAREN          reduce using rule 65 (statement -> iteration_stmt .)
    NUM             reduce using rule 65 (statement -> iteration_stmt .)
    TRUE            reduce using rule 65 (statement -> iteration_stmt .)
    FALSE           reduce using rule 65 (statement -> iteration_stmt .)


state 97

    (66) statement -> return_stmt .

    BREAK           reduce using rule 66 (statement -> return_stmt .)
    SEMI            reduce using rule 66 (statement -> return_stmt .)
    ELSE            reduce using rule 66 (statement -> return_stmt .)
    ELSEIF          reduce using rule 66 (statement -> return_stmt .)
    CLOSETAG        reduce using rule 66 (statement -> return_stmt .)
    VARIABLE        reduce using rule 66 (statement -> return_stmt .)
    TIMESTIMES      reduce using rule 66 (statement -> return_stmt .)
    AMPERSANT       reduce using rule 66 (statement -> return_stmt .)
    FUNCTION        reduce using rule 66 (statement -> return_stmt .)
    PRIVATE         reduce using rule 66 (statement -> return_stmt .)
    PUBLIC          reduce using rule 66 (statement -> return_stmt .)
    PROTECTED       reduce using rule 66 (statement -> return_stmt .)
    REQUIRE         reduce using rule 66 (statement -> return_stmt .)
    INCLUDE         reduce using rule 66 (statement -> return_stmt .)
    CLASS           reduce using rule 66 (statement -> return_stmt .)
    IF              reduce using rule 66 (statement -> return_stmt .)
    SWITCH          reduce using rule 66 (statement -> return_stmt .)
    CASE            reduce using rule 66 (statement -> return_stmt .)
    DEFAULT         reduce using rule 66 (statement -> return_stmt .)
    FOR             reduce using rule 66 (statement -> return_stmt .)
    WHILE           reduce using rule 66 (statement -> return_stmt .)
    DO              reduce using rule 66 (statement -> return_stmt .)
    ID              reduce using rule 66 (statement -> return_stmt .)
    COMMENTS        reduce using rule 66 (statement -> return_stmt .)
    ECHO            reduce using rule 66 (statement -> return_stmt .)
    RBLOCK          reduce using rule 66 (statement -> return_stmt .)
    LBLOCK          reduce using rule 66 (statement -> return_stmt .)
    RETURN          reduce using rule 66 (statement -> return_stmt .)
    LPAREN          reduce using rule 66 (statement -> return_stmt .)
    NUM             reduce using rule 66 (statement -> return_stmt .)
    TRUE            reduce using rule 66 (statement -> return_stmt .)
    FALSE           reduce using rule 66 (statement -> return_stmt .)


state 98

    (67) statement -> class_declaration .

    BREAK           reduce using rule 67 (statement -> class_declaration .)
    SEMI            reduce using rule 67 (statement -> class_declaration .)
    ELSE            reduce using rule 67 (statement -> class_declaration .)
    ELSEIF          reduce using rule 67 (statement -> class_declaration .)
    CLOSETAG        reduce using rule 67 (statement -> class_declaration .)
    VARIABLE        reduce using rule 67 (statement -> class_declaration .)
    TIMESTIMES      reduce using rule 67 (statement -> class_declaration .)
    AMPERSANT       reduce using rule 67 (statement -> class_declaration .)
    FUNCTION        reduce using rule 67 (statement -> class_declaration .)
    PRIVATE         reduce using rule 67 (statement -> class_declaration .)
    PUBLIC          reduce using rule 67 (statement -> class_declaration .)
    PROTECTED       reduce using rule 67 (statement -> class_declaration .)
    REQUIRE         reduce using rule 67 (statement -> class_declaration .)
    INCLUDE         reduce using rule 67 (statement -> class_declaration .)
    CLASS           reduce using rule 67 (statement -> class_declaration .)
    IF              reduce using rule 67 (statement -> class_declaration .)
    SWITCH          reduce using rule 67 (statement -> class_declaration .)
    CASE            reduce using rule 67 (statement -> class_declaration .)
    DEFAULT         reduce using rule 67 (statement -> class_declaration .)
    FOR             reduce using rule 67 (statement -> class_declaration .)
    WHILE           reduce using rule 67 (statement -> class_declaration .)
    DO              reduce using rule 67 (statement -> class_declaration .)
    ID              reduce using rule 67 (statement -> class_declaration .)
    COMMENTS        reduce using rule 67 (statement -> class_declaration .)
    ECHO            reduce using rule 67 (statement -> class_declaration .)
    RBLOCK          reduce using rule 67 (statement -> class_declaration .)
    LBLOCK          reduce using rule 67 (statement -> class_declaration .)
    RETURN          reduce using rule 67 (statement -> class_declaration .)
    LPAREN          reduce using rule 67 (statement -> class_declaration .)
    NUM             reduce using rule 67 (statement -> class_declaration .)
    TRUE            reduce using rule 67 (statement -> class_declaration .)
    FALSE           reduce using rule 67 (statement -> class_declaration .)


state 99

    (68) statement -> echo_stmt .
    (14) echo_stmt -> echo_stmt . ECHO STRING SEMI
    (15) echo_stmt -> echo_stmt . ECHO VARIABLE SEMI
    (17) echo_stmt -> echo_stmt . ECHO NUM SEMI
    (18) echo_stmt -> echo_stmt . ECHO boolean SEMI
    (19) echo_stmt -> echo_stmt . ECHO fun_declaration SEMI

  ! shift/reduce conflict for ECHO resolved as shift
    BREAK           reduce using rule 68 (statement -> echo_stmt .)
    SEMI            reduce using rule 68 (statement -> echo_stmt .)
    ELSE            reduce using rule 68 (statement -> echo_stmt .)
    ELSEIF          reduce using rule 68 (statement -> echo_stmt .)
    CLOSETAG        reduce using rule 68 (statement -> echo_stmt .)
    VARIABLE        reduce using rule 68 (statement -> echo_stmt .)
    TIMESTIMES      reduce using rule 68 (statement -> echo_stmt .)
    AMPERSANT       reduce using rule 68 (statement -> echo_stmt .)
    FUNCTION        reduce using rule 68 (statement -> echo_stmt .)
    PRIVATE         reduce using rule 68 (statement -> echo_stmt .)
    PUBLIC          reduce using rule 68 (statement -> echo_stmt .)
    PROTECTED       reduce using rule 68 (statement -> echo_stmt .)
    REQUIRE         reduce using rule 68 (statement -> echo_stmt .)
    INCLUDE         reduce using rule 68 (statement -> echo_stmt .)
    CLASS           reduce using rule 68 (statement -> echo_stmt .)
    IF              reduce using rule 68 (statement -> echo_stmt .)
    SWITCH          reduce using rule 68 (statement -> echo_stmt .)
    CASE            reduce using rule 68 (statement -> echo_stmt .)
    DEFAULT         reduce using rule 68 (statement -> echo_stmt .)
    FOR             reduce using rule 68 (statement -> echo_stmt .)
    WHILE           reduce using rule 68 (statement -> echo_stmt .)
    DO              reduce using rule 68 (statement -> echo_stmt .)
    ID              reduce using rule 68 (statement -> echo_stmt .)
    COMMENTS        reduce using rule 68 (statement -> echo_stmt .)
    RBLOCK          reduce using rule 68 (statement -> echo_stmt .)
    LBLOCK          reduce using rule 68 (statement -> echo_stmt .)
    RETURN          reduce using rule 68 (statement -> echo_stmt .)
    LPAREN          reduce using rule 68 (statement -> echo_stmt .)
    NUM             reduce using rule 68 (statement -> echo_stmt .)
    TRUE            reduce using rule 68 (statement -> echo_stmt .)
    FALSE           reduce using rule 68 (statement -> echo_stmt .)
    ECHO            shift and go to state 39

  ! ECHO            [ reduce using rule 68 (statement -> echo_stmt .) ]


state 100

    (69) expression_stmt -> expression . SEMI
    (85) expression -> expression . AND expression
    (86) expression -> expression . OR expression

    SEMI            shift and go to state 158
    AND             shift and go to state 152
    OR              shift and go to state 153


state 101

    (57) compount_stmt -> LBLOCK . echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (14) echo_stmt -> . echo_stmt ECHO STRING SEMI
    (15) echo_stmt -> . echo_stmt ECHO VARIABLE SEMI
    (16) echo_stmt -> . empty
    (17) echo_stmt -> . echo_stmt ECHO NUM SEMI
    (18) echo_stmt -> . echo_stmt ECHO boolean SEMI
    (19) echo_stmt -> . echo_stmt ECHO fun_declaration SEMI
    (123) empty -> .

    ECHO            reduce using rule 123 (empty -> .)
    VARIABLE        reduce using rule 123 (empty -> .)
    TIMESTIMES      reduce using rule 123 (empty -> .)
    AMPERSANT       reduce using rule 123 (empty -> .)
    LBLOCK          reduce using rule 123 (empty -> .)
    IF              reduce using rule 123 (empty -> .)
    SWITCH          reduce using rule 123 (empty -> .)
    CASE            reduce using rule 123 (empty -> .)
    DEFAULT         reduce using rule 123 (empty -> .)
    FOR             reduce using rule 123 (empty -> .)
    WHILE           reduce using rule 123 (empty -> .)
    DO              reduce using rule 123 (empty -> .)
    RETURN          reduce using rule 123 (empty -> .)
    CLASS           reduce using rule 123 (empty -> .)
    PRIVATE         reduce using rule 123 (empty -> .)
    PUBLIC          reduce using rule 123 (empty -> .)
    PROTECTED       reduce using rule 123 (empty -> .)
    LPAREN          reduce using rule 123 (empty -> .)
    NUM             reduce using rule 123 (empty -> .)
    TRUE            reduce using rule 123 (empty -> .)
    FALSE           reduce using rule 123 (empty -> .)
    RBLOCK          reduce using rule 123 (empty -> .)

    echo_stmt                      shift and go to state 159
    empty                          shift and go to state 26

state 102

    (80) return_stmt -> RETURN . SEMI
    (81) return_stmt -> RETURN . expression SEMI
    (82) expression -> . var EQUAL expression
    (83) expression -> . simple_expression
    (84) expression -> . var EQUAL AMPERSANT VARIABLE
    (85) expression -> . expression AND expression
    (86) expression -> . expression OR expression
    (87) var -> . VARIABLE
    (88) var -> . VARIABLE LBRACKET expression RBRACKET
    (89) simple_expression -> . additive_expression relop additive_expression
    (90) simple_expression -> . additive_expression
    (98) additive_expression -> . additive_expression addop term
    (99) additive_expression -> . term
    (100) additive_expression -> . term MINUSMINUS
    (101) additive_expression -> . term PLUSPLUS
    (104) term -> . term mulop factor
    (105) term -> . factor
    (108) factor -> . LPAREN expression RPAREN
    (109) factor -> . var
    (110) factor -> . NUM
    (111) factor -> . boolean
    (112) factor -> . VARIABLE LPAREN args RPAREN
    (118) boolean -> . TRUE
    (119) boolean -> . FALSE

    SEMI            shift and go to state 160
    VARIABLE        shift and go to state 86
    LPAREN          shift and go to state 72
    NUM             shift and go to state 87
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63

    expression                     shift and go to state 161
    var                            shift and go to state 84
    simple_expression              shift and go to state 85
    additive_expression            shift and go to state 69
    term                           shift and go to state 70
    factor                         shift and go to state 71
    boolean                        shift and go to state 88

state 103

    (22) class_declaration -> area . CLASS ID LBLOCK attribute RBLOCK

    CLASS           shift and go to state 38


state 104

    (77) iteration_stmt -> FOR LPAREN var_declaration . SEMI expression SEMI additive_expression RPAREN statement

    SEMI            shift and go to state 162


state 105

    (78) iteration_stmt -> WHILE LPAREN expression . RPAREN statement
    (85) expression -> expression . AND expression
    (86) expression -> expression . OR expression

    RPAREN          shift and go to state 163
    AND             shift and go to state 152
    OR              shift and go to state 153


state 106

    (79) iteration_stmt -> DO LBLOCK statement . SEMI RBLOCK WHILE LPAREN expression RPAREN

    SEMI            shift and go to state 164


state 107

    (22) class_declaration -> area CLASS ID LBLOCK . attribute RBLOCK
    (27) attribute -> . attribute area var_declaration
    (28) attribute -> . area var_declaration
    (29) attribute -> . attribute area fun_declaration
    (30) attribute -> . area fun_declaration
    (32) area -> . PRIVATE
    (33) area -> . PUBLIC
    (34) area -> . PROTECTED

    PRIVATE         shift and go to state 20
    PUBLIC          shift and go to state 21
    PROTECTED       shift and go to state 22

    area                           shift and go to state 149
    attribute                      shift and go to state 165

state 108

    (14) echo_stmt -> echo_stmt ECHO STRING SEMI .

    ECHO            reduce using rule 14 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    CLOSETAG        reduce using rule 14 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    VARIABLE        reduce using rule 14 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    TIMESTIMES      reduce using rule 14 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    AMPERSANT       reduce using rule 14 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    FUNCTION        reduce using rule 14 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    PRIVATE         reduce using rule 14 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    PUBLIC          reduce using rule 14 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    PROTECTED       reduce using rule 14 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    REQUIRE         reduce using rule 14 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    INCLUDE         reduce using rule 14 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    CLASS           reduce using rule 14 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    IF              reduce using rule 14 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    SWITCH          reduce using rule 14 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    CASE            reduce using rule 14 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    DEFAULT         reduce using rule 14 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    FOR             reduce using rule 14 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    WHILE           reduce using rule 14 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    DO              reduce using rule 14 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    ID              reduce using rule 14 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    COMMENTS        reduce using rule 14 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    BREAK           reduce using rule 14 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    SEMI            reduce using rule 14 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    LBLOCK          reduce using rule 14 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    RETURN          reduce using rule 14 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    LPAREN          reduce using rule 14 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    NUM             reduce using rule 14 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    TRUE            reduce using rule 14 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    FALSE           reduce using rule 14 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    RBLOCK          reduce using rule 14 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    ELSE            reduce using rule 14 (echo_stmt -> echo_stmt ECHO STRING SEMI .)
    ELSEIF          reduce using rule 14 (echo_stmt -> echo_stmt ECHO STRING SEMI .)


state 109

    (15) echo_stmt -> echo_stmt ECHO VARIABLE SEMI .

    ECHO            reduce using rule 15 (echo_stmt -> echo_stmt ECHO VARIABLE SEMI .)
    CLOSETAG        reduce using rule 15 (echo_stmt -> echo_stmt ECHO VARIABLE SEMI .)
    VARIABLE        reduce using rule 15 (echo_stmt -> echo_stmt ECHO VARIABLE SEMI .)
    TIMESTIMES      reduce using rule 15 (echo_stmt -> echo_stmt ECHO VARIABLE SEMI .)
    AMPERSANT       reduce using rule 15 (echo_stmt -> echo_stmt ECHO VARIABLE SEMI .)
    FUNCTION        reduce using rule 15 (echo_stmt -> echo_stmt ECHO VARIABLE SEMI .)
    PRIVATE         reduce using rule 15 (echo_stmt -> echo_stmt ECHO VARIABLE SEMI .)
    PUBLIC          reduce using rule 15 (echo_stmt -> echo_stmt ECHO VARIABLE SEMI .)
    PROTECTED       reduce using rule 15 (echo_stmt -> echo_stmt ECHO VARIABLE SEMI .)
    REQUIRE         reduce using rule 15 (echo_stmt -> echo_stmt ECHO VARIABLE SEMI .)
    INCLUDE         reduce using rule 15 (echo_stmt -> echo_stmt ECHO VARIABLE SEMI .)
    CLASS           reduce using rule 15 (echo_stmt -> echo_stmt ECHO VARIABLE SEMI .)
    IF              reduce using rule 15 (echo_stmt -> echo_stmt ECHO VARIABLE SEMI .)
    SWITCH          reduce using rule 15 (echo_stmt -> echo_stmt ECHO VARIABLE SEMI .)
    CASE            reduce using rule 15 (echo_stmt -> echo_stmt ECHO VARIABLE SEMI .)
    DEFAULT         reduce using rule 15 (echo_stmt -> echo_stmt ECHO VARIABLE SEMI .)
    FOR             reduce using rule 15 (echo_stmt -> echo_stmt ECHO VARIABLE SEMI .)
    WHILE           reduce using rule 15 (echo_stmt -> echo_stmt ECHO VARIABLE SEMI .)
    DO              reduce using rule 15 (echo_stmt -> echo_stmt ECHO VARIABLE SEMI .)
    ID              reduce using rule 15 (echo_stmt -> echo_stmt ECHO VARIABLE SEMI .)
    COMMENTS        reduce using rule 15 (echo_stmt -> echo_stmt ECHO VARIABLE SEMI .)
    BREAK           reduce using rule 15 (echo_stmt -> echo_stmt ECHO VARIABLE SEMI .)
    SEMI            reduce using rule 15 (echo_stmt -> echo_stmt ECHO VARIABLE SEMI .)
    LBLOCK          reduce using rule 15 (echo_stmt -> echo_stmt ECHO VARIABLE SEMI .)
    RETURN          reduce using rule 15 (echo_stmt -> echo_stmt ECHO VARIABLE SEMI .)
    LPAREN          reduce using rule 15 (echo_stmt -> echo_stmt ECHO VARIABLE SEMI .)
    NUM             reduce using rule 15 (echo_stmt -> echo_stmt ECHO VARIABLE SEMI .)
    TRUE            reduce using rule 15 (echo_stmt -> echo_stmt ECHO VARIABLE SEMI .)
    FALSE           reduce using rule 15 (echo_stmt -> echo_stmt ECHO VARIABLE SEMI .)
    RBLOCK          reduce using rule 15 (echo_stmt -> echo_stmt ECHO VARIABLE SEMI .)
    ELSE            reduce using rule 15 (echo_stmt -> echo_stmt ECHO VARIABLE SEMI .)
    ELSEIF          reduce using rule 15 (echo_stmt -> echo_stmt ECHO VARIABLE SEMI .)


state 110

    (17) echo_stmt -> echo_stmt ECHO NUM SEMI .

    ECHO            reduce using rule 17 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    CLOSETAG        reduce using rule 17 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    VARIABLE        reduce using rule 17 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    TIMESTIMES      reduce using rule 17 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    AMPERSANT       reduce using rule 17 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    FUNCTION        reduce using rule 17 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    PRIVATE         reduce using rule 17 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    PUBLIC          reduce using rule 17 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    PROTECTED       reduce using rule 17 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    REQUIRE         reduce using rule 17 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    INCLUDE         reduce using rule 17 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    CLASS           reduce using rule 17 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    IF              reduce using rule 17 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    SWITCH          reduce using rule 17 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    CASE            reduce using rule 17 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    DEFAULT         reduce using rule 17 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    FOR             reduce using rule 17 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    WHILE           reduce using rule 17 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    DO              reduce using rule 17 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    ID              reduce using rule 17 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    COMMENTS        reduce using rule 17 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    BREAK           reduce using rule 17 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    SEMI            reduce using rule 17 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    LBLOCK          reduce using rule 17 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    RETURN          reduce using rule 17 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    LPAREN          reduce using rule 17 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    NUM             reduce using rule 17 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    TRUE            reduce using rule 17 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    FALSE           reduce using rule 17 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    RBLOCK          reduce using rule 17 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    ELSE            reduce using rule 17 (echo_stmt -> echo_stmt ECHO NUM SEMI .)
    ELSEIF          reduce using rule 17 (echo_stmt -> echo_stmt ECHO NUM SEMI .)


state 111

    (18) echo_stmt -> echo_stmt ECHO boolean SEMI .

    ECHO            reduce using rule 18 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    CLOSETAG        reduce using rule 18 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    VARIABLE        reduce using rule 18 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    TIMESTIMES      reduce using rule 18 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    AMPERSANT       reduce using rule 18 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    FUNCTION        reduce using rule 18 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    PRIVATE         reduce using rule 18 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    PUBLIC          reduce using rule 18 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    PROTECTED       reduce using rule 18 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    REQUIRE         reduce using rule 18 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    INCLUDE         reduce using rule 18 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    CLASS           reduce using rule 18 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    IF              reduce using rule 18 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    SWITCH          reduce using rule 18 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    CASE            reduce using rule 18 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    DEFAULT         reduce using rule 18 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    FOR             reduce using rule 18 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    WHILE           reduce using rule 18 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    DO              reduce using rule 18 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    ID              reduce using rule 18 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    COMMENTS        reduce using rule 18 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    BREAK           reduce using rule 18 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    SEMI            reduce using rule 18 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    LBLOCK          reduce using rule 18 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    RETURN          reduce using rule 18 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    LPAREN          reduce using rule 18 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    NUM             reduce using rule 18 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    TRUE            reduce using rule 18 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    FALSE           reduce using rule 18 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    RBLOCK          reduce using rule 18 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    ELSE            reduce using rule 18 (echo_stmt -> echo_stmt ECHO boolean SEMI .)
    ELSEIF          reduce using rule 18 (echo_stmt -> echo_stmt ECHO boolean SEMI .)


state 112

    (19) echo_stmt -> echo_stmt ECHO fun_declaration SEMI .

    ECHO            reduce using rule 19 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    CLOSETAG        reduce using rule 19 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    VARIABLE        reduce using rule 19 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    TIMESTIMES      reduce using rule 19 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    AMPERSANT       reduce using rule 19 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    FUNCTION        reduce using rule 19 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    PRIVATE         reduce using rule 19 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    PUBLIC          reduce using rule 19 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    PROTECTED       reduce using rule 19 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    REQUIRE         reduce using rule 19 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    INCLUDE         reduce using rule 19 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    CLASS           reduce using rule 19 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    IF              reduce using rule 19 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    SWITCH          reduce using rule 19 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    CASE            reduce using rule 19 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    DEFAULT         reduce using rule 19 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    FOR             reduce using rule 19 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    WHILE           reduce using rule 19 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    DO              reduce using rule 19 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    ID              reduce using rule 19 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    COMMENTS        reduce using rule 19 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    BREAK           reduce using rule 19 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    SEMI            reduce using rule 19 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    LBLOCK          reduce using rule 19 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    RETURN          reduce using rule 19 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    LPAREN          reduce using rule 19 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    NUM             reduce using rule 19 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    TRUE            reduce using rule 19 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    FALSE           reduce using rule 19 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    RBLOCK          reduce using rule 19 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    ELSE            reduce using rule 19 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)
    ELSEIF          reduce using rule 19 (echo_stmt -> echo_stmt ECHO fun_declaration SEMI .)


state 113

    (43) var_declaration -> VARIABLE EQUAL VARIABLE SEMI . var_declaration
    (44) var_declaration -> VARIABLE EQUAL VARIABLE SEMI .
    (35) var_declaration -> . VARIABLE SEMI var_declaration
    (36) var_declaration -> . VARIABLE SEMI
    (37) var_declaration -> . TIMESTIMES VARIABLE SEMI
    (38) var_declaration -> . TIMESTIMES VARIABLE SEMI var_declaration
    (39) var_declaration -> . VARIABLE EQUAL NUM SEMI var_declaration
    (40) var_declaration -> . VARIABLE EQUAL NUM SEMI
    (41) var_declaration -> . VARIABLE EQUAL boolean SEMI var_declaration
    (42) var_declaration -> . VARIABLE EQUAL boolean SEMI
    (43) var_declaration -> . VARIABLE EQUAL VARIABLE SEMI var_declaration
    (44) var_declaration -> . VARIABLE EQUAL VARIABLE SEMI
    (45) var_declaration -> . AMPERSANT VARIABLE SEMI var_declaration
    (46) var_declaration -> . AMPERSANT VARIABLE EQUAL VARIABLE SEMI selection_stmt
    (47) var_declaration -> . AMPERSANT VARIABLE SEMI
    (48) var_declaration -> . VARIABLE EQUAL simple_expression SEMI

    CLOSETAG        reduce using rule 44 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI .)
    VARIABLE        reduce using rule 44 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI .)
    TIMESTIMES      reduce using rule 44 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI .)
    AMPERSANT       reduce using rule 44 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI .)
    FUNCTION        reduce using rule 44 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI .)
    PRIVATE         reduce using rule 44 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI .)
    PUBLIC          reduce using rule 44 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI .)
    PROTECTED       reduce using rule 44 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI .)
    REQUIRE         reduce using rule 44 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI .)
    INCLUDE         reduce using rule 44 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI .)
    CLASS           reduce using rule 44 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI .)
    IF              reduce using rule 44 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI .)
    SWITCH          reduce using rule 44 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI .)
    CASE            reduce using rule 44 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI .)
    DEFAULT         reduce using rule 44 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI .)
    FOR             reduce using rule 44 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI .)
    WHILE           reduce using rule 44 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI .)
    DO              reduce using rule 44 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI .)
    ID              reduce using rule 44 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI .)
    COMMENTS        reduce using rule 44 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI .)
    ECHO            reduce using rule 44 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI .)
    SEMI            reduce using rule 44 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI .)
    RBLOCK          reduce using rule 44 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI .)
    LBLOCK          reduce using rule 44 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI .)
    RETURN          reduce using rule 44 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI .)
    LPAREN          reduce using rule 44 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI .)
    NUM             reduce using rule 44 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI .)
    TRUE            reduce using rule 44 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI .)
    FALSE           reduce using rule 44 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI .)

  ! VARIABLE        [ shift and go to state 15 ]
  ! TIMESTIMES      [ shift and go to state 16 ]
  ! AMPERSANT       [ shift and go to state 17 ]

    var_declaration                shift and go to state 166

state 114

    (112) factor -> VARIABLE LPAREN . args RPAREN
    (113) args -> . args_list
    (114) args -> . empty
    (115) args -> . VOID
    (116) args_list -> . args_list COMMA expression
    (117) args_list -> . expression
    (123) empty -> .
    (82) expression -> . var EQUAL expression
    (83) expression -> . simple_expression
    (84) expression -> . var EQUAL AMPERSANT VARIABLE
    (85) expression -> . expression AND expression
    (86) expression -> . expression OR expression
    (87) var -> . VARIABLE
    (88) var -> . VARIABLE LBRACKET expression RBRACKET
    (89) simple_expression -> . additive_expression relop additive_expression
    (90) simple_expression -> . additive_expression
    (98) additive_expression -> . additive_expression addop term
    (99) additive_expression -> . term
    (100) additive_expression -> . term MINUSMINUS
    (101) additive_expression -> . term PLUSPLUS
    (104) term -> . term mulop factor
    (105) term -> . factor
    (108) factor -> . LPAREN expression RPAREN
    (109) factor -> . var
    (110) factor -> . NUM
    (111) factor -> . boolean
    (112) factor -> . VARIABLE LPAREN args RPAREN
    (118) boolean -> . TRUE
    (119) boolean -> . FALSE

    VOID            shift and go to state 170
    RPAREN          reduce using rule 123 (empty -> .)
    VARIABLE        shift and go to state 86
    LPAREN          shift and go to state 72
    NUM             shift and go to state 87
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63

    args                           shift and go to state 167
    args_list                      shift and go to state 168
    empty                          shift and go to state 169
    expression                     shift and go to state 171
    var                            shift and go to state 84
    simple_expression              shift and go to state 85
    additive_expression            shift and go to state 69
    term                           shift and go to state 70
    factor                         shift and go to state 71
    boolean                        shift and go to state 88

state 115

    (88) var -> VARIABLE LBRACKET . expression RBRACKET
    (82) expression -> . var EQUAL expression
    (83) expression -> . simple_expression
    (84) expression -> . var EQUAL AMPERSANT VARIABLE
    (85) expression -> . expression AND expression
    (86) expression -> . expression OR expression
    (87) var -> . VARIABLE
    (88) var -> . VARIABLE LBRACKET expression RBRACKET
    (89) simple_expression -> . additive_expression relop additive_expression
    (90) simple_expression -> . additive_expression
    (98) additive_expression -> . additive_expression addop term
    (99) additive_expression -> . term
    (100) additive_expression -> . term MINUSMINUS
    (101) additive_expression -> . term PLUSPLUS
    (104) term -> . term mulop factor
    (105) term -> . factor
    (108) factor -> . LPAREN expression RPAREN
    (109) factor -> . var
    (110) factor -> . NUM
    (111) factor -> . boolean
    (112) factor -> . VARIABLE LPAREN args RPAREN
    (118) boolean -> . TRUE
    (119) boolean -> . FALSE

    VARIABLE        shift and go to state 86
    LPAREN          shift and go to state 72
    NUM             shift and go to state 87
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63

    expression                     shift and go to state 172
    var                            shift and go to state 84
    simple_expression              shift and go to state 85
    additive_expression            shift and go to state 69
    term                           shift and go to state 70
    factor                         shift and go to state 71
    boolean                        shift and go to state 88

state 116

    (39) var_declaration -> VARIABLE EQUAL NUM SEMI . var_declaration
    (40) var_declaration -> VARIABLE EQUAL NUM SEMI .
    (35) var_declaration -> . VARIABLE SEMI var_declaration
    (36) var_declaration -> . VARIABLE SEMI
    (37) var_declaration -> . TIMESTIMES VARIABLE SEMI
    (38) var_declaration -> . TIMESTIMES VARIABLE SEMI var_declaration
    (39) var_declaration -> . VARIABLE EQUAL NUM SEMI var_declaration
    (40) var_declaration -> . VARIABLE EQUAL NUM SEMI
    (41) var_declaration -> . VARIABLE EQUAL boolean SEMI var_declaration
    (42) var_declaration -> . VARIABLE EQUAL boolean SEMI
    (43) var_declaration -> . VARIABLE EQUAL VARIABLE SEMI var_declaration
    (44) var_declaration -> . VARIABLE EQUAL VARIABLE SEMI
    (45) var_declaration -> . AMPERSANT VARIABLE SEMI var_declaration
    (46) var_declaration -> . AMPERSANT VARIABLE EQUAL VARIABLE SEMI selection_stmt
    (47) var_declaration -> . AMPERSANT VARIABLE SEMI
    (48) var_declaration -> . VARIABLE EQUAL simple_expression SEMI

    CLOSETAG        reduce using rule 40 (var_declaration -> VARIABLE EQUAL NUM SEMI .)
    VARIABLE        reduce using rule 40 (var_declaration -> VARIABLE EQUAL NUM SEMI .)
    TIMESTIMES      reduce using rule 40 (var_declaration -> VARIABLE EQUAL NUM SEMI .)
    AMPERSANT       reduce using rule 40 (var_declaration -> VARIABLE EQUAL NUM SEMI .)
    FUNCTION        reduce using rule 40 (var_declaration -> VARIABLE EQUAL NUM SEMI .)
    PRIVATE         reduce using rule 40 (var_declaration -> VARIABLE EQUAL NUM SEMI .)
    PUBLIC          reduce using rule 40 (var_declaration -> VARIABLE EQUAL NUM SEMI .)
    PROTECTED       reduce using rule 40 (var_declaration -> VARIABLE EQUAL NUM SEMI .)
    REQUIRE         reduce using rule 40 (var_declaration -> VARIABLE EQUAL NUM SEMI .)
    INCLUDE         reduce using rule 40 (var_declaration -> VARIABLE EQUAL NUM SEMI .)
    CLASS           reduce using rule 40 (var_declaration -> VARIABLE EQUAL NUM SEMI .)
    IF              reduce using rule 40 (var_declaration -> VARIABLE EQUAL NUM SEMI .)
    SWITCH          reduce using rule 40 (var_declaration -> VARIABLE EQUAL NUM SEMI .)
    CASE            reduce using rule 40 (var_declaration -> VARIABLE EQUAL NUM SEMI .)
    DEFAULT         reduce using rule 40 (var_declaration -> VARIABLE EQUAL NUM SEMI .)
    FOR             reduce using rule 40 (var_declaration -> VARIABLE EQUAL NUM SEMI .)
    WHILE           reduce using rule 40 (var_declaration -> VARIABLE EQUAL NUM SEMI .)
    DO              reduce using rule 40 (var_declaration -> VARIABLE EQUAL NUM SEMI .)
    ID              reduce using rule 40 (var_declaration -> VARIABLE EQUAL NUM SEMI .)
    COMMENTS        reduce using rule 40 (var_declaration -> VARIABLE EQUAL NUM SEMI .)
    ECHO            reduce using rule 40 (var_declaration -> VARIABLE EQUAL NUM SEMI .)
    SEMI            reduce using rule 40 (var_declaration -> VARIABLE EQUAL NUM SEMI .)
    RBLOCK          reduce using rule 40 (var_declaration -> VARIABLE EQUAL NUM SEMI .)
    LBLOCK          reduce using rule 40 (var_declaration -> VARIABLE EQUAL NUM SEMI .)
    RETURN          reduce using rule 40 (var_declaration -> VARIABLE EQUAL NUM SEMI .)
    LPAREN          reduce using rule 40 (var_declaration -> VARIABLE EQUAL NUM SEMI .)
    NUM             reduce using rule 40 (var_declaration -> VARIABLE EQUAL NUM SEMI .)
    TRUE            reduce using rule 40 (var_declaration -> VARIABLE EQUAL NUM SEMI .)
    FALSE           reduce using rule 40 (var_declaration -> VARIABLE EQUAL NUM SEMI .)

  ! VARIABLE        [ shift and go to state 15 ]
  ! TIMESTIMES      [ shift and go to state 16 ]
  ! AMPERSANT       [ shift and go to state 17 ]

    var_declaration                shift and go to state 173

state 117

    (41) var_declaration -> VARIABLE EQUAL boolean SEMI . var_declaration
    (42) var_declaration -> VARIABLE EQUAL boolean SEMI .
    (35) var_declaration -> . VARIABLE SEMI var_declaration
    (36) var_declaration -> . VARIABLE SEMI
    (37) var_declaration -> . TIMESTIMES VARIABLE SEMI
    (38) var_declaration -> . TIMESTIMES VARIABLE SEMI var_declaration
    (39) var_declaration -> . VARIABLE EQUAL NUM SEMI var_declaration
    (40) var_declaration -> . VARIABLE EQUAL NUM SEMI
    (41) var_declaration -> . VARIABLE EQUAL boolean SEMI var_declaration
    (42) var_declaration -> . VARIABLE EQUAL boolean SEMI
    (43) var_declaration -> . VARIABLE EQUAL VARIABLE SEMI var_declaration
    (44) var_declaration -> . VARIABLE EQUAL VARIABLE SEMI
    (45) var_declaration -> . AMPERSANT VARIABLE SEMI var_declaration
    (46) var_declaration -> . AMPERSANT VARIABLE EQUAL VARIABLE SEMI selection_stmt
    (47) var_declaration -> . AMPERSANT VARIABLE SEMI
    (48) var_declaration -> . VARIABLE EQUAL simple_expression SEMI

    CLOSETAG        reduce using rule 42 (var_declaration -> VARIABLE EQUAL boolean SEMI .)
    VARIABLE        reduce using rule 42 (var_declaration -> VARIABLE EQUAL boolean SEMI .)
    TIMESTIMES      reduce using rule 42 (var_declaration -> VARIABLE EQUAL boolean SEMI .)
    AMPERSANT       reduce using rule 42 (var_declaration -> VARIABLE EQUAL boolean SEMI .)
    FUNCTION        reduce using rule 42 (var_declaration -> VARIABLE EQUAL boolean SEMI .)
    PRIVATE         reduce using rule 42 (var_declaration -> VARIABLE EQUAL boolean SEMI .)
    PUBLIC          reduce using rule 42 (var_declaration -> VARIABLE EQUAL boolean SEMI .)
    PROTECTED       reduce using rule 42 (var_declaration -> VARIABLE EQUAL boolean SEMI .)
    REQUIRE         reduce using rule 42 (var_declaration -> VARIABLE EQUAL boolean SEMI .)
    INCLUDE         reduce using rule 42 (var_declaration -> VARIABLE EQUAL boolean SEMI .)
    CLASS           reduce using rule 42 (var_declaration -> VARIABLE EQUAL boolean SEMI .)
    IF              reduce using rule 42 (var_declaration -> VARIABLE EQUAL boolean SEMI .)
    SWITCH          reduce using rule 42 (var_declaration -> VARIABLE EQUAL boolean SEMI .)
    CASE            reduce using rule 42 (var_declaration -> VARIABLE EQUAL boolean SEMI .)
    DEFAULT         reduce using rule 42 (var_declaration -> VARIABLE EQUAL boolean SEMI .)
    FOR             reduce using rule 42 (var_declaration -> VARIABLE EQUAL boolean SEMI .)
    WHILE           reduce using rule 42 (var_declaration -> VARIABLE EQUAL boolean SEMI .)
    DO              reduce using rule 42 (var_declaration -> VARIABLE EQUAL boolean SEMI .)
    ID              reduce using rule 42 (var_declaration -> VARIABLE EQUAL boolean SEMI .)
    COMMENTS        reduce using rule 42 (var_declaration -> VARIABLE EQUAL boolean SEMI .)
    ECHO            reduce using rule 42 (var_declaration -> VARIABLE EQUAL boolean SEMI .)
    SEMI            reduce using rule 42 (var_declaration -> VARIABLE EQUAL boolean SEMI .)
    RBLOCK          reduce using rule 42 (var_declaration -> VARIABLE EQUAL boolean SEMI .)
    LBLOCK          reduce using rule 42 (var_declaration -> VARIABLE EQUAL boolean SEMI .)
    RETURN          reduce using rule 42 (var_declaration -> VARIABLE EQUAL boolean SEMI .)
    LPAREN          reduce using rule 42 (var_declaration -> VARIABLE EQUAL boolean SEMI .)
    NUM             reduce using rule 42 (var_declaration -> VARIABLE EQUAL boolean SEMI .)
    TRUE            reduce using rule 42 (var_declaration -> VARIABLE EQUAL boolean SEMI .)
    FALSE           reduce using rule 42 (var_declaration -> VARIABLE EQUAL boolean SEMI .)

  ! VARIABLE        [ shift and go to state 15 ]
  ! TIMESTIMES      [ shift and go to state 16 ]
  ! AMPERSANT       [ shift and go to state 17 ]

    var_declaration                shift and go to state 174

state 118

    (48) var_declaration -> VARIABLE EQUAL simple_expression SEMI .

    CLOSETAG        reduce using rule 48 (var_declaration -> VARIABLE EQUAL simple_expression SEMI .)
    VARIABLE        reduce using rule 48 (var_declaration -> VARIABLE EQUAL simple_expression SEMI .)
    TIMESTIMES      reduce using rule 48 (var_declaration -> VARIABLE EQUAL simple_expression SEMI .)
    AMPERSANT       reduce using rule 48 (var_declaration -> VARIABLE EQUAL simple_expression SEMI .)
    FUNCTION        reduce using rule 48 (var_declaration -> VARIABLE EQUAL simple_expression SEMI .)
    PRIVATE         reduce using rule 48 (var_declaration -> VARIABLE EQUAL simple_expression SEMI .)
    PUBLIC          reduce using rule 48 (var_declaration -> VARIABLE EQUAL simple_expression SEMI .)
    PROTECTED       reduce using rule 48 (var_declaration -> VARIABLE EQUAL simple_expression SEMI .)
    REQUIRE         reduce using rule 48 (var_declaration -> VARIABLE EQUAL simple_expression SEMI .)
    INCLUDE         reduce using rule 48 (var_declaration -> VARIABLE EQUAL simple_expression SEMI .)
    CLASS           reduce using rule 48 (var_declaration -> VARIABLE EQUAL simple_expression SEMI .)
    IF              reduce using rule 48 (var_declaration -> VARIABLE EQUAL simple_expression SEMI .)
    SWITCH          reduce using rule 48 (var_declaration -> VARIABLE EQUAL simple_expression SEMI .)
    CASE            reduce using rule 48 (var_declaration -> VARIABLE EQUAL simple_expression SEMI .)
    DEFAULT         reduce using rule 48 (var_declaration -> VARIABLE EQUAL simple_expression SEMI .)
    FOR             reduce using rule 48 (var_declaration -> VARIABLE EQUAL simple_expression SEMI .)
    WHILE           reduce using rule 48 (var_declaration -> VARIABLE EQUAL simple_expression SEMI .)
    DO              reduce using rule 48 (var_declaration -> VARIABLE EQUAL simple_expression SEMI .)
    ID              reduce using rule 48 (var_declaration -> VARIABLE EQUAL simple_expression SEMI .)
    COMMENTS        reduce using rule 48 (var_declaration -> VARIABLE EQUAL simple_expression SEMI .)
    ECHO            reduce using rule 48 (var_declaration -> VARIABLE EQUAL simple_expression SEMI .)
    SEMI            reduce using rule 48 (var_declaration -> VARIABLE EQUAL simple_expression SEMI .)
    RBLOCK          reduce using rule 48 (var_declaration -> VARIABLE EQUAL simple_expression SEMI .)
    LBLOCK          reduce using rule 48 (var_declaration -> VARIABLE EQUAL simple_expression SEMI .)
    RETURN          reduce using rule 48 (var_declaration -> VARIABLE EQUAL simple_expression SEMI .)
    LPAREN          reduce using rule 48 (var_declaration -> VARIABLE EQUAL simple_expression SEMI .)
    NUM             reduce using rule 48 (var_declaration -> VARIABLE EQUAL simple_expression SEMI .)
    TRUE            reduce using rule 48 (var_declaration -> VARIABLE EQUAL simple_expression SEMI .)
    FALSE           reduce using rule 48 (var_declaration -> VARIABLE EQUAL simple_expression SEMI .)


state 119

    (89) simple_expression -> additive_expression relop . additive_expression
    (98) additive_expression -> . additive_expression addop term
    (99) additive_expression -> . term
    (100) additive_expression -> . term MINUSMINUS
    (101) additive_expression -> . term PLUSPLUS
    (104) term -> . term mulop factor
    (105) term -> . factor
    (108) factor -> . LPAREN expression RPAREN
    (109) factor -> . var
    (110) factor -> . NUM
    (111) factor -> . boolean
    (112) factor -> . VARIABLE LPAREN args RPAREN
    (87) var -> . VARIABLE
    (88) var -> . VARIABLE LBRACKET expression RBRACKET
    (118) boolean -> . TRUE
    (119) boolean -> . FALSE

    LPAREN          shift and go to state 72
    NUM             shift and go to state 87
    VARIABLE        shift and go to state 176
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63

    additive_expression            shift and go to state 175
    term                           shift and go to state 70
    factor                         shift and go to state 71
    var                            shift and go to state 73
    boolean                        shift and go to state 88

state 120

    (98) additive_expression -> additive_expression addop . term
    (104) term -> . term mulop factor
    (105) term -> . factor
    (108) factor -> . LPAREN expression RPAREN
    (109) factor -> . var
    (110) factor -> . NUM
    (111) factor -> . boolean
    (112) factor -> . VARIABLE LPAREN args RPAREN
    (87) var -> . VARIABLE
    (88) var -> . VARIABLE LBRACKET expression RBRACKET
    (118) boolean -> . TRUE
    (119) boolean -> . FALSE

    LPAREN          shift and go to state 72
    NUM             shift and go to state 87
    VARIABLE        shift and go to state 176
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63

    term                           shift and go to state 177
    factor                         shift and go to state 71
    var                            shift and go to state 73
    boolean                        shift and go to state 88

state 121

    (91) relop -> LESS .

    LPAREN          reduce using rule 91 (relop -> LESS .)
    NUM             reduce using rule 91 (relop -> LESS .)
    VARIABLE        reduce using rule 91 (relop -> LESS .)
    TRUE            reduce using rule 91 (relop -> LESS .)
    FALSE           reduce using rule 91 (relop -> LESS .)


state 122

    (92) relop -> LESSEQUAL .

    LPAREN          reduce using rule 92 (relop -> LESSEQUAL .)
    NUM             reduce using rule 92 (relop -> LESSEQUAL .)
    VARIABLE        reduce using rule 92 (relop -> LESSEQUAL .)
    TRUE            reduce using rule 92 (relop -> LESSEQUAL .)
    FALSE           reduce using rule 92 (relop -> LESSEQUAL .)


state 123

    (93) relop -> GREATER .

    LPAREN          reduce using rule 93 (relop -> GREATER .)
    NUM             reduce using rule 93 (relop -> GREATER .)
    VARIABLE        reduce using rule 93 (relop -> GREATER .)
    TRUE            reduce using rule 93 (relop -> GREATER .)
    FALSE           reduce using rule 93 (relop -> GREATER .)


state 124

    (94) relop -> GREATEREQUAL .

    LPAREN          reduce using rule 94 (relop -> GREATEREQUAL .)
    NUM             reduce using rule 94 (relop -> GREATEREQUAL .)
    VARIABLE        reduce using rule 94 (relop -> GREATEREQUAL .)
    TRUE            reduce using rule 94 (relop -> GREATEREQUAL .)
    FALSE           reduce using rule 94 (relop -> GREATEREQUAL .)


state 125

    (95) relop -> DEQUAL .

    LPAREN          reduce using rule 95 (relop -> DEQUAL .)
    NUM             reduce using rule 95 (relop -> DEQUAL .)
    VARIABLE        reduce using rule 95 (relop -> DEQUAL .)
    TRUE            reduce using rule 95 (relop -> DEQUAL .)
    FALSE           reduce using rule 95 (relop -> DEQUAL .)


state 126

    (96) relop -> DISTINT .

    LPAREN          reduce using rule 96 (relop -> DISTINT .)
    NUM             reduce using rule 96 (relop -> DISTINT .)
    VARIABLE        reduce using rule 96 (relop -> DISTINT .)
    TRUE            reduce using rule 96 (relop -> DISTINT .)
    FALSE           reduce using rule 96 (relop -> DISTINT .)


state 127

    (97) relop -> ISEQUAL .

    LPAREN          reduce using rule 97 (relop -> ISEQUAL .)
    NUM             reduce using rule 97 (relop -> ISEQUAL .)
    VARIABLE        reduce using rule 97 (relop -> ISEQUAL .)
    TRUE            reduce using rule 97 (relop -> ISEQUAL .)
    FALSE           reduce using rule 97 (relop -> ISEQUAL .)


state 128

    (102) addop -> PLUS .

    LPAREN          reduce using rule 102 (addop -> PLUS .)
    NUM             reduce using rule 102 (addop -> PLUS .)
    VARIABLE        reduce using rule 102 (addop -> PLUS .)
    TRUE            reduce using rule 102 (addop -> PLUS .)
    FALSE           reduce using rule 102 (addop -> PLUS .)


state 129

    (103) addop -> MINUS .

    LPAREN          reduce using rule 103 (addop -> MINUS .)
    NUM             reduce using rule 103 (addop -> MINUS .)
    VARIABLE        reduce using rule 103 (addop -> MINUS .)
    TRUE            reduce using rule 103 (addop -> MINUS .)
    FALSE           reduce using rule 103 (addop -> MINUS .)


state 130

    (100) additive_expression -> term MINUSMINUS .

    LESS            reduce using rule 100 (additive_expression -> term MINUSMINUS .)
    LESSEQUAL       reduce using rule 100 (additive_expression -> term MINUSMINUS .)
    GREATER         reduce using rule 100 (additive_expression -> term MINUSMINUS .)
    GREATEREQUAL    reduce using rule 100 (additive_expression -> term MINUSMINUS .)
    DEQUAL          reduce using rule 100 (additive_expression -> term MINUSMINUS .)
    DISTINT         reduce using rule 100 (additive_expression -> term MINUSMINUS .)
    ISEQUAL         reduce using rule 100 (additive_expression -> term MINUSMINUS .)
    PLUS            reduce using rule 100 (additive_expression -> term MINUSMINUS .)
    MINUS           reduce using rule 100 (additive_expression -> term MINUSMINUS .)
    SEMI            reduce using rule 100 (additive_expression -> term MINUSMINUS .)
    RPAREN          reduce using rule 100 (additive_expression -> term MINUSMINUS .)
    AND             reduce using rule 100 (additive_expression -> term MINUSMINUS .)
    OR              reduce using rule 100 (additive_expression -> term MINUSMINUS .)
    COMMA           reduce using rule 100 (additive_expression -> term MINUSMINUS .)
    RBRACKET        reduce using rule 100 (additive_expression -> term MINUSMINUS .)


state 131

    (101) additive_expression -> term PLUSPLUS .

    LESS            reduce using rule 101 (additive_expression -> term PLUSPLUS .)
    LESSEQUAL       reduce using rule 101 (additive_expression -> term PLUSPLUS .)
    GREATER         reduce using rule 101 (additive_expression -> term PLUSPLUS .)
    GREATEREQUAL    reduce using rule 101 (additive_expression -> term PLUSPLUS .)
    DEQUAL          reduce using rule 101 (additive_expression -> term PLUSPLUS .)
    DISTINT         reduce using rule 101 (additive_expression -> term PLUSPLUS .)
    ISEQUAL         reduce using rule 101 (additive_expression -> term PLUSPLUS .)
    PLUS            reduce using rule 101 (additive_expression -> term PLUSPLUS .)
    MINUS           reduce using rule 101 (additive_expression -> term PLUSPLUS .)
    SEMI            reduce using rule 101 (additive_expression -> term PLUSPLUS .)
    RPAREN          reduce using rule 101 (additive_expression -> term PLUSPLUS .)
    AND             reduce using rule 101 (additive_expression -> term PLUSPLUS .)
    OR              reduce using rule 101 (additive_expression -> term PLUSPLUS .)
    COMMA           reduce using rule 101 (additive_expression -> term PLUSPLUS .)
    RBRACKET        reduce using rule 101 (additive_expression -> term PLUSPLUS .)


state 132

    (104) term -> term mulop . factor
    (108) factor -> . LPAREN expression RPAREN
    (109) factor -> . var
    (110) factor -> . NUM
    (111) factor -> . boolean
    (112) factor -> . VARIABLE LPAREN args RPAREN
    (87) var -> . VARIABLE
    (88) var -> . VARIABLE LBRACKET expression RBRACKET
    (118) boolean -> . TRUE
    (119) boolean -> . FALSE

    LPAREN          shift and go to state 72
    NUM             shift and go to state 87
    VARIABLE        shift and go to state 176
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63

    factor                         shift and go to state 178
    var                            shift and go to state 73
    boolean                        shift and go to state 88

state 133

    (106) mulop -> TIMES .

    LPAREN          reduce using rule 106 (mulop -> TIMES .)
    NUM             reduce using rule 106 (mulop -> TIMES .)
    VARIABLE        reduce using rule 106 (mulop -> TIMES .)
    TRUE            reduce using rule 106 (mulop -> TIMES .)
    FALSE           reduce using rule 106 (mulop -> TIMES .)


state 134

    (107) mulop -> DIVIDE .

    LPAREN          reduce using rule 107 (mulop -> DIVIDE .)
    NUM             reduce using rule 107 (mulop -> DIVIDE .)
    VARIABLE        reduce using rule 107 (mulop -> DIVIDE .)
    TRUE            reduce using rule 107 (mulop -> DIVIDE .)
    FALSE           reduce using rule 107 (mulop -> DIVIDE .)


state 135

    (108) factor -> LPAREN expression . RPAREN
    (85) expression -> expression . AND expression
    (86) expression -> expression . OR expression

    RPAREN          shift and go to state 179
    AND             shift and go to state 152
    OR              shift and go to state 153


state 136

    (38) var_declaration -> TIMESTIMES VARIABLE SEMI var_declaration .

    CLOSETAG        reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE SEMI var_declaration .)
    VARIABLE        reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE SEMI var_declaration .)
    TIMESTIMES      reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE SEMI var_declaration .)
    AMPERSANT       reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE SEMI var_declaration .)
    FUNCTION        reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE SEMI var_declaration .)
    PRIVATE         reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE SEMI var_declaration .)
    PUBLIC          reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE SEMI var_declaration .)
    PROTECTED       reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE SEMI var_declaration .)
    REQUIRE         reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE SEMI var_declaration .)
    INCLUDE         reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE SEMI var_declaration .)
    CLASS           reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE SEMI var_declaration .)
    IF              reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE SEMI var_declaration .)
    SWITCH          reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE SEMI var_declaration .)
    CASE            reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE SEMI var_declaration .)
    DEFAULT         reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE SEMI var_declaration .)
    FOR             reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE SEMI var_declaration .)
    WHILE           reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE SEMI var_declaration .)
    DO              reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE SEMI var_declaration .)
    ID              reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE SEMI var_declaration .)
    COMMENTS        reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE SEMI var_declaration .)
    ECHO            reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE SEMI var_declaration .)
    SEMI            reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE SEMI var_declaration .)
    RBLOCK          reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE SEMI var_declaration .)
    LBLOCK          reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE SEMI var_declaration .)
    RETURN          reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE SEMI var_declaration .)
    LPAREN          reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE SEMI var_declaration .)
    NUM             reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE SEMI var_declaration .)
    TRUE            reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE SEMI var_declaration .)
    FALSE           reduce using rule 38 (var_declaration -> TIMESTIMES VARIABLE SEMI var_declaration .)


state 137

    (45) var_declaration -> AMPERSANT VARIABLE SEMI var_declaration .

    CLOSETAG        reduce using rule 45 (var_declaration -> AMPERSANT VARIABLE SEMI var_declaration .)
    VARIABLE        reduce using rule 45 (var_declaration -> AMPERSANT VARIABLE SEMI var_declaration .)
    TIMESTIMES      reduce using rule 45 (var_declaration -> AMPERSANT VARIABLE SEMI var_declaration .)
    AMPERSANT       reduce using rule 45 (var_declaration -> AMPERSANT VARIABLE SEMI var_declaration .)
    FUNCTION        reduce using rule 45 (var_declaration -> AMPERSANT VARIABLE SEMI var_declaration .)
    PRIVATE         reduce using rule 45 (var_declaration -> AMPERSANT VARIABLE SEMI var_declaration .)
    PUBLIC          reduce using rule 45 (var_declaration -> AMPERSANT VARIABLE SEMI var_declaration .)
    PROTECTED       reduce using rule 45 (var_declaration -> AMPERSANT VARIABLE SEMI var_declaration .)
    REQUIRE         reduce using rule 45 (var_declaration -> AMPERSANT VARIABLE SEMI var_declaration .)
    INCLUDE         reduce using rule 45 (var_declaration -> AMPERSANT VARIABLE SEMI var_declaration .)
    CLASS           reduce using rule 45 (var_declaration -> AMPERSANT VARIABLE SEMI var_declaration .)
    IF              reduce using rule 45 (var_declaration -> AMPERSANT VARIABLE SEMI var_declaration .)
    SWITCH          reduce using rule 45 (var_declaration -> AMPERSANT VARIABLE SEMI var_declaration .)
    CASE            reduce using rule 45 (var_declaration -> AMPERSANT VARIABLE SEMI var_declaration .)
    DEFAULT         reduce using rule 45 (var_declaration -> AMPERSANT VARIABLE SEMI var_declaration .)
    FOR             reduce using rule 45 (var_declaration -> AMPERSANT VARIABLE SEMI var_declaration .)
    WHILE           reduce using rule 45 (var_declaration -> AMPERSANT VARIABLE SEMI var_declaration .)
    DO              reduce using rule 45 (var_declaration -> AMPERSANT VARIABLE SEMI var_declaration .)
    ID              reduce using rule 45 (var_declaration -> AMPERSANT VARIABLE SEMI var_declaration .)
    COMMENTS        reduce using rule 45 (var_declaration -> AMPERSANT VARIABLE SEMI var_declaration .)
    ECHO            reduce using rule 45 (var_declaration -> AMPERSANT VARIABLE SEMI var_declaration .)
    SEMI            reduce using rule 45 (var_declaration -> AMPERSANT VARIABLE SEMI var_declaration .)
    RBLOCK          reduce using rule 45 (var_declaration -> AMPERSANT VARIABLE SEMI var_declaration .)
    LBLOCK          reduce using rule 45 (var_declaration -> AMPERSANT VARIABLE SEMI var_declaration .)
    RETURN          reduce using rule 45 (var_declaration -> AMPERSANT VARIABLE SEMI var_declaration .)
    LPAREN          reduce using rule 45 (var_declaration -> AMPERSANT VARIABLE SEMI var_declaration .)
    NUM             reduce using rule 45 (var_declaration -> AMPERSANT VARIABLE SEMI var_declaration .)
    TRUE            reduce using rule 45 (var_declaration -> AMPERSANT VARIABLE SEMI var_declaration .)
    FALSE           reduce using rule 45 (var_declaration -> AMPERSANT VARIABLE SEMI var_declaration .)


state 138

    (46) var_declaration -> AMPERSANT VARIABLE EQUAL VARIABLE . SEMI selection_stmt

    SEMI            shift and go to state 180


state 139

    (49) fun_declaration -> FUNCTION ID LPAREN params . RPAREN
    (50) fun_declaration -> FUNCTION ID LPAREN params . RPAREN compount_stmt

    RPAREN          shift and go to state 181


state 140

    (51) params -> param_list .
    (53) param_list -> param_list . COMMA param_list

    RPAREN          reduce using rule 51 (params -> param_list .)
    COMMA           shift and go to state 182


state 141

    (52) params -> empty .

    RPAREN          reduce using rule 52 (params -> empty .)


state 142

    (54) param_list -> param .

    COMMA           reduce using rule 54 (param_list -> param .)
    RPAREN          reduce using rule 54 (param_list -> param .)


state 143

    (55) param -> VARIABLE .
    (56) param -> VARIABLE . LBRACKET RBRACKET

    COMMA           reduce using rule 55 (param -> VARIABLE .)
    RPAREN          reduce using rule 55 (param -> VARIABLE .)
    LBRACKET        shift and go to state 183


state 144

    (120) typeclass -> ID VARIABLE EQUAL NEW . constructor SEMI
    (121) constructor -> . ID LPAREN RPAREN
    (122) constructor -> . ID LPAREN args RPAREN

    ID              shift and go to state 184

    constructor                    shift and go to state 185

state 145

    (20) header_declaration -> REQUIRE LPAREN STRING RPAREN . SEMI

    SEMI            shift and go to state 186


state 146

    (21) header_declaration -> INCLUDE LPAREN STRING RPAREN . SEMI

    SEMI            shift and go to state 187


state 147

    (23) class_declaration -> CLASS ID LBLOCK attribute . RBLOCK
    (27) attribute -> attribute . area var_declaration
    (29) attribute -> attribute . area fun_declaration
    (32) area -> . PRIVATE
    (33) area -> . PUBLIC
    (34) area -> . PROTECTED

    RBLOCK          shift and go to state 188
    PRIVATE         shift and go to state 20
    PUBLIC          shift and go to state 21
    PROTECTED       shift and go to state 22

    area                           shift and go to state 189

state 148

    (24) class_declaration -> CLASS ID LBLOCK RBLOCK .

    CLOSETAG        reduce using rule 24 (class_declaration -> CLASS ID LBLOCK RBLOCK .)
    VARIABLE        reduce using rule 24 (class_declaration -> CLASS ID LBLOCK RBLOCK .)
    TIMESTIMES      reduce using rule 24 (class_declaration -> CLASS ID LBLOCK RBLOCK .)
    AMPERSANT       reduce using rule 24 (class_declaration -> CLASS ID LBLOCK RBLOCK .)
    FUNCTION        reduce using rule 24 (class_declaration -> CLASS ID LBLOCK RBLOCK .)
    PRIVATE         reduce using rule 24 (class_declaration -> CLASS ID LBLOCK RBLOCK .)
    PUBLIC          reduce using rule 24 (class_declaration -> CLASS ID LBLOCK RBLOCK .)
    PROTECTED       reduce using rule 24 (class_declaration -> CLASS ID LBLOCK RBLOCK .)
    REQUIRE         reduce using rule 24 (class_declaration -> CLASS ID LBLOCK RBLOCK .)
    INCLUDE         reduce using rule 24 (class_declaration -> CLASS ID LBLOCK RBLOCK .)
    CLASS           reduce using rule 24 (class_declaration -> CLASS ID LBLOCK RBLOCK .)
    IF              reduce using rule 24 (class_declaration -> CLASS ID LBLOCK RBLOCK .)
    SWITCH          reduce using rule 24 (class_declaration -> CLASS ID LBLOCK RBLOCK .)
    CASE            reduce using rule 24 (class_declaration -> CLASS ID LBLOCK RBLOCK .)
    DEFAULT         reduce using rule 24 (class_declaration -> CLASS ID LBLOCK RBLOCK .)
    FOR             reduce using rule 24 (class_declaration -> CLASS ID LBLOCK RBLOCK .)
    WHILE           reduce using rule 24 (class_declaration -> CLASS ID LBLOCK RBLOCK .)
    DO              reduce using rule 24 (class_declaration -> CLASS ID LBLOCK RBLOCK .)
    ID              reduce using rule 24 (class_declaration -> CLASS ID LBLOCK RBLOCK .)
    COMMENTS        reduce using rule 24 (class_declaration -> CLASS ID LBLOCK RBLOCK .)
    ECHO            reduce using rule 24 (class_declaration -> CLASS ID LBLOCK RBLOCK .)
    BREAK           reduce using rule 24 (class_declaration -> CLASS ID LBLOCK RBLOCK .)
    SEMI            reduce using rule 24 (class_declaration -> CLASS ID LBLOCK RBLOCK .)
    ELSE            reduce using rule 24 (class_declaration -> CLASS ID LBLOCK RBLOCK .)
    ELSEIF          reduce using rule 24 (class_declaration -> CLASS ID LBLOCK RBLOCK .)
    RBLOCK          reduce using rule 24 (class_declaration -> CLASS ID LBLOCK RBLOCK .)
    LBLOCK          reduce using rule 24 (class_declaration -> CLASS ID LBLOCK RBLOCK .)
    RETURN          reduce using rule 24 (class_declaration -> CLASS ID LBLOCK RBLOCK .)
    LPAREN          reduce using rule 24 (class_declaration -> CLASS ID LBLOCK RBLOCK .)
    NUM             reduce using rule 24 (class_declaration -> CLASS ID LBLOCK RBLOCK .)
    TRUE            reduce using rule 24 (class_declaration -> CLASS ID LBLOCK RBLOCK .)
    FALSE           reduce using rule 24 (class_declaration -> CLASS ID LBLOCK RBLOCK .)


state 149

    (28) attribute -> area . var_declaration
    (30) attribute -> area . fun_declaration
    (35) var_declaration -> . VARIABLE SEMI var_declaration
    (36) var_declaration -> . VARIABLE SEMI
    (37) var_declaration -> . TIMESTIMES VARIABLE SEMI
    (38) var_declaration -> . TIMESTIMES VARIABLE SEMI var_declaration
    (39) var_declaration -> . VARIABLE EQUAL NUM SEMI var_declaration
    (40) var_declaration -> . VARIABLE EQUAL NUM SEMI
    (41) var_declaration -> . VARIABLE EQUAL boolean SEMI var_declaration
    (42) var_declaration -> . VARIABLE EQUAL boolean SEMI
    (43) var_declaration -> . VARIABLE EQUAL VARIABLE SEMI var_declaration
    (44) var_declaration -> . VARIABLE EQUAL VARIABLE SEMI
    (45) var_declaration -> . AMPERSANT VARIABLE SEMI var_declaration
    (46) var_declaration -> . AMPERSANT VARIABLE EQUAL VARIABLE SEMI selection_stmt
    (47) var_declaration -> . AMPERSANT VARIABLE SEMI
    (48) var_declaration -> . VARIABLE EQUAL simple_expression SEMI
    (49) fun_declaration -> . FUNCTION ID LPAREN params RPAREN
    (50) fun_declaration -> . FUNCTION ID LPAREN params RPAREN compount_stmt

    VARIABLE        shift and go to state 15
    TIMESTIMES      shift and go to state 16
    AMPERSANT       shift and go to state 17
    FUNCTION        shift and go to state 18

    var_declaration                shift and go to state 190
    fun_declaration                shift and go to state 191

state 150

    (25) class_declaration -> CLASS ID EXTENDS ID . LBLOCK attribute RBLOCK
    (26) class_declaration -> CLASS ID EXTENDS ID . LBLOCK RBLOCK

    LBLOCK          shift and go to state 192


state 151

    (70) selection_stmt -> IF LPAREN expression RPAREN . statement
    (71) selection_stmt -> IF LPAREN expression RPAREN . statement selection
    (62) statement -> . expression_stmt
    (63) statement -> . compount_stmt
    (64) statement -> . selection_stmt
    (65) statement -> . iteration_stmt
    (66) statement -> . return_stmt
    (67) statement -> . class_declaration
    (68) statement -> . echo_stmt
    (69) expression_stmt -> . expression SEMI
    (57) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (70) selection_stmt -> . IF LPAREN expression RPAREN statement
    (71) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (74) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (75) selection_stmt -> . CASE NUM COLON statement BREAK SEMI
    (76) selection_stmt -> . DEFAULT COLON statement BREAK SEMI
    (77) iteration_stmt -> . FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement
    (78) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (79) iteration_stmt -> . DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN
    (80) return_stmt -> . RETURN SEMI
    (81) return_stmt -> . RETURN expression SEMI
    (22) class_declaration -> . area CLASS ID LBLOCK attribute RBLOCK
    (23) class_declaration -> . CLASS ID LBLOCK attribute RBLOCK
    (24) class_declaration -> . CLASS ID LBLOCK RBLOCK
    (25) class_declaration -> . CLASS ID EXTENDS ID LBLOCK attribute RBLOCK
    (26) class_declaration -> . CLASS ID EXTENDS ID LBLOCK RBLOCK
    (14) echo_stmt -> . echo_stmt ECHO STRING SEMI
    (15) echo_stmt -> . echo_stmt ECHO VARIABLE SEMI
    (16) echo_stmt -> . empty
    (17) echo_stmt -> . echo_stmt ECHO NUM SEMI
    (18) echo_stmt -> . echo_stmt ECHO boolean SEMI
    (19) echo_stmt -> . echo_stmt ECHO fun_declaration SEMI
    (82) expression -> . var EQUAL expression
    (83) expression -> . simple_expression
    (84) expression -> . var EQUAL AMPERSANT VARIABLE
    (85) expression -> . expression AND expression
    (86) expression -> . expression OR expression
    (32) area -> . PRIVATE
    (33) area -> . PUBLIC
    (34) area -> . PROTECTED
    (123) empty -> .
    (87) var -> . VARIABLE
    (88) var -> . VARIABLE LBRACKET expression RBRACKET
    (89) simple_expression -> . additive_expression relop additive_expression
    (90) simple_expression -> . additive_expression
    (98) additive_expression -> . additive_expression addop term
    (99) additive_expression -> . term
    (100) additive_expression -> . term MINUSMINUS
    (101) additive_expression -> . term PLUSPLUS
    (104) term -> . term mulop factor
    (105) term -> . factor
    (108) factor -> . LPAREN expression RPAREN
    (109) factor -> . var
    (110) factor -> . NUM
    (111) factor -> . boolean
    (112) factor -> . VARIABLE LPAREN args RPAREN
    (118) boolean -> . TRUE
    (119) boolean -> . FALSE

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LBLOCK          shift and go to state 101
    IF              shift and go to state 27
    SWITCH          shift and go to state 28
    CASE            shift and go to state 29
    DEFAULT         shift and go to state 30
    FOR             shift and go to state 31
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    RETURN          shift and go to state 102
    CLASS           shift and go to state 25
    PRIVATE         shift and go to state 20
    PUBLIC          shift and go to state 21
    PROTECTED       shift and go to state 22
    ECHO            reduce using rule 123 (empty -> .)
    ELSE            reduce using rule 123 (empty -> .)
    ELSEIF          reduce using rule 123 (empty -> .)
    CLOSETAG        reduce using rule 123 (empty -> .)
    TIMESTIMES      reduce using rule 123 (empty -> .)
    AMPERSANT       reduce using rule 123 (empty -> .)
    FUNCTION        reduce using rule 123 (empty -> .)
    REQUIRE         reduce using rule 123 (empty -> .)
    INCLUDE         reduce using rule 123 (empty -> .)
    ID              reduce using rule 123 (empty -> .)
    COMMENTS        reduce using rule 123 (empty -> .)
    BREAK           reduce using rule 123 (empty -> .)
    SEMI            reduce using rule 123 (empty -> .)
    RBLOCK          reduce using rule 123 (empty -> .)
    VARIABLE        shift and go to state 86
    LPAREN          shift and go to state 72
    NUM             shift and go to state 87
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63

  ! VARIABLE        [ reduce using rule 123 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 123 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 123 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 123 (empty -> .) ]
  ! CLASS           [ reduce using rule 123 (empty -> .) ]
  ! IF              [ reduce using rule 123 (empty -> .) ]
  ! SWITCH          [ reduce using rule 123 (empty -> .) ]
  ! CASE            [ reduce using rule 123 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 123 (empty -> .) ]
  ! FOR             [ reduce using rule 123 (empty -> .) ]
  ! WHILE           [ reduce using rule 123 (empty -> .) ]
  ! DO              [ reduce using rule 123 (empty -> .) ]
  ! LBLOCK          [ reduce using rule 123 (empty -> .) ]
  ! RETURN          [ reduce using rule 123 (empty -> .) ]
  ! LPAREN          [ reduce using rule 123 (empty -> .) ]
  ! NUM             [ reduce using rule 123 (empty -> .) ]
  ! TRUE            [ reduce using rule 123 (empty -> .) ]
  ! FALSE           [ reduce using rule 123 (empty -> .) ]

    expression                     shift and go to state 100
    statement                      shift and go to state 193
    expression_stmt                shift and go to state 93
    compount_stmt                  shift and go to state 94
    selection_stmt                 shift and go to state 95
    iteration_stmt                 shift and go to state 96
    return_stmt                    shift and go to state 97
    class_declaration              shift and go to state 98
    echo_stmt                      shift and go to state 99
    var                            shift and go to state 84
    additive_expression            shift and go to state 69
    area                           shift and go to state 103
    empty                          shift and go to state 26
    boolean                        shift and go to state 88
    simple_expression              shift and go to state 85
    term                           shift and go to state 70
    factor                         shift and go to state 71

state 152

    (85) expression -> expression AND . expression
    (82) expression -> . var EQUAL expression
    (83) expression -> . simple_expression
    (84) expression -> . var EQUAL AMPERSANT VARIABLE
    (85) expression -> . expression AND expression
    (86) expression -> . expression OR expression
    (87) var -> . VARIABLE
    (88) var -> . VARIABLE LBRACKET expression RBRACKET
    (89) simple_expression -> . additive_expression relop additive_expression
    (90) simple_expression -> . additive_expression
    (98) additive_expression -> . additive_expression addop term
    (99) additive_expression -> . term
    (100) additive_expression -> . term MINUSMINUS
    (101) additive_expression -> . term PLUSPLUS
    (104) term -> . term mulop factor
    (105) term -> . factor
    (108) factor -> . LPAREN expression RPAREN
    (109) factor -> . var
    (110) factor -> . NUM
    (111) factor -> . boolean
    (112) factor -> . VARIABLE LPAREN args RPAREN
    (118) boolean -> . TRUE
    (119) boolean -> . FALSE

    VARIABLE        shift and go to state 86
    LPAREN          shift and go to state 72
    NUM             shift and go to state 87
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63

    expression                     shift and go to state 194
    var                            shift and go to state 84
    simple_expression              shift and go to state 85
    additive_expression            shift and go to state 69
    term                           shift and go to state 70
    factor                         shift and go to state 71
    boolean                        shift and go to state 88

state 153

    (86) expression -> expression OR . expression
    (82) expression -> . var EQUAL expression
    (83) expression -> . simple_expression
    (84) expression -> . var EQUAL AMPERSANT VARIABLE
    (85) expression -> . expression AND expression
    (86) expression -> . expression OR expression
    (87) var -> . VARIABLE
    (88) var -> . VARIABLE LBRACKET expression RBRACKET
    (89) simple_expression -> . additive_expression relop additive_expression
    (90) simple_expression -> . additive_expression
    (98) additive_expression -> . additive_expression addop term
    (99) additive_expression -> . term
    (100) additive_expression -> . term MINUSMINUS
    (101) additive_expression -> . term PLUSPLUS
    (104) term -> . term mulop factor
    (105) term -> . factor
    (108) factor -> . LPAREN expression RPAREN
    (109) factor -> . var
    (110) factor -> . NUM
    (111) factor -> . boolean
    (112) factor -> . VARIABLE LPAREN args RPAREN
    (118) boolean -> . TRUE
    (119) boolean -> . FALSE

    VARIABLE        shift and go to state 86
    LPAREN          shift and go to state 72
    NUM             shift and go to state 87
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63

    expression                     shift and go to state 195
    var                            shift and go to state 84
    simple_expression              shift and go to state 85
    additive_expression            shift and go to state 69
    term                           shift and go to state 70
    factor                         shift and go to state 71
    boolean                        shift and go to state 88

state 154

    (82) expression -> var EQUAL . expression
    (84) expression -> var EQUAL . AMPERSANT VARIABLE
    (82) expression -> . var EQUAL expression
    (83) expression -> . simple_expression
    (84) expression -> . var EQUAL AMPERSANT VARIABLE
    (85) expression -> . expression AND expression
    (86) expression -> . expression OR expression
    (87) var -> . VARIABLE
    (88) var -> . VARIABLE LBRACKET expression RBRACKET
    (89) simple_expression -> . additive_expression relop additive_expression
    (90) simple_expression -> . additive_expression
    (98) additive_expression -> . additive_expression addop term
    (99) additive_expression -> . term
    (100) additive_expression -> . term MINUSMINUS
    (101) additive_expression -> . term PLUSPLUS
    (104) term -> . term mulop factor
    (105) term -> . factor
    (108) factor -> . LPAREN expression RPAREN
    (109) factor -> . var
    (110) factor -> . NUM
    (111) factor -> . boolean
    (112) factor -> . VARIABLE LPAREN args RPAREN
    (118) boolean -> . TRUE
    (119) boolean -> . FALSE

    AMPERSANT       shift and go to state 197
    VARIABLE        shift and go to state 86
    LPAREN          shift and go to state 72
    NUM             shift and go to state 87
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63

    var                            shift and go to state 84
    expression                     shift and go to state 196
    simple_expression              shift and go to state 85
    additive_expression            shift and go to state 69
    term                           shift and go to state 70
    factor                         shift and go to state 71
    boolean                        shift and go to state 88

state 155

    (74) selection_stmt -> SWITCH LPAREN var RPAREN . statement
    (62) statement -> . expression_stmt
    (63) statement -> . compount_stmt
    (64) statement -> . selection_stmt
    (65) statement -> . iteration_stmt
    (66) statement -> . return_stmt
    (67) statement -> . class_declaration
    (68) statement -> . echo_stmt
    (69) expression_stmt -> . expression SEMI
    (57) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (70) selection_stmt -> . IF LPAREN expression RPAREN statement
    (71) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (74) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (75) selection_stmt -> . CASE NUM COLON statement BREAK SEMI
    (76) selection_stmt -> . DEFAULT COLON statement BREAK SEMI
    (77) iteration_stmt -> . FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement
    (78) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (79) iteration_stmt -> . DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN
    (80) return_stmt -> . RETURN SEMI
    (81) return_stmt -> . RETURN expression SEMI
    (22) class_declaration -> . area CLASS ID LBLOCK attribute RBLOCK
    (23) class_declaration -> . CLASS ID LBLOCK attribute RBLOCK
    (24) class_declaration -> . CLASS ID LBLOCK RBLOCK
    (25) class_declaration -> . CLASS ID EXTENDS ID LBLOCK attribute RBLOCK
    (26) class_declaration -> . CLASS ID EXTENDS ID LBLOCK RBLOCK
    (14) echo_stmt -> . echo_stmt ECHO STRING SEMI
    (15) echo_stmt -> . echo_stmt ECHO VARIABLE SEMI
    (16) echo_stmt -> . empty
    (17) echo_stmt -> . echo_stmt ECHO NUM SEMI
    (18) echo_stmt -> . echo_stmt ECHO boolean SEMI
    (19) echo_stmt -> . echo_stmt ECHO fun_declaration SEMI
    (82) expression -> . var EQUAL expression
    (83) expression -> . simple_expression
    (84) expression -> . var EQUAL AMPERSANT VARIABLE
    (85) expression -> . expression AND expression
    (86) expression -> . expression OR expression
    (32) area -> . PRIVATE
    (33) area -> . PUBLIC
    (34) area -> . PROTECTED
    (123) empty -> .
    (87) var -> . VARIABLE
    (88) var -> . VARIABLE LBRACKET expression RBRACKET
    (89) simple_expression -> . additive_expression relop additive_expression
    (90) simple_expression -> . additive_expression
    (98) additive_expression -> . additive_expression addop term
    (99) additive_expression -> . term
    (100) additive_expression -> . term MINUSMINUS
    (101) additive_expression -> . term PLUSPLUS
    (104) term -> . term mulop factor
    (105) term -> . factor
    (108) factor -> . LPAREN expression RPAREN
    (109) factor -> . var
    (110) factor -> . NUM
    (111) factor -> . boolean
    (112) factor -> . VARIABLE LPAREN args RPAREN
    (118) boolean -> . TRUE
    (119) boolean -> . FALSE

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LBLOCK          shift and go to state 101
    IF              shift and go to state 27
    SWITCH          shift and go to state 28
    CASE            shift and go to state 29
    DEFAULT         shift and go to state 30
    FOR             shift and go to state 31
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    RETURN          shift and go to state 102
    CLASS           shift and go to state 25
    PRIVATE         shift and go to state 20
    PUBLIC          shift and go to state 21
    PROTECTED       shift and go to state 22
    ECHO            reduce using rule 123 (empty -> .)
    ELSE            reduce using rule 123 (empty -> .)
    ELSEIF          reduce using rule 123 (empty -> .)
    CLOSETAG        reduce using rule 123 (empty -> .)
    TIMESTIMES      reduce using rule 123 (empty -> .)
    AMPERSANT       reduce using rule 123 (empty -> .)
    FUNCTION        reduce using rule 123 (empty -> .)
    REQUIRE         reduce using rule 123 (empty -> .)
    INCLUDE         reduce using rule 123 (empty -> .)
    ID              reduce using rule 123 (empty -> .)
    COMMENTS        reduce using rule 123 (empty -> .)
    BREAK           reduce using rule 123 (empty -> .)
    SEMI            reduce using rule 123 (empty -> .)
    RBLOCK          reduce using rule 123 (empty -> .)
    VARIABLE        shift and go to state 86
    LPAREN          shift and go to state 72
    NUM             shift and go to state 87
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63

  ! VARIABLE        [ reduce using rule 123 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 123 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 123 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 123 (empty -> .) ]
  ! CLASS           [ reduce using rule 123 (empty -> .) ]
  ! IF              [ reduce using rule 123 (empty -> .) ]
  ! SWITCH          [ reduce using rule 123 (empty -> .) ]
  ! CASE            [ reduce using rule 123 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 123 (empty -> .) ]
  ! FOR             [ reduce using rule 123 (empty -> .) ]
  ! WHILE           [ reduce using rule 123 (empty -> .) ]
  ! DO              [ reduce using rule 123 (empty -> .) ]
  ! LBLOCK          [ reduce using rule 123 (empty -> .) ]
  ! RETURN          [ reduce using rule 123 (empty -> .) ]
  ! LPAREN          [ reduce using rule 123 (empty -> .) ]
  ! NUM             [ reduce using rule 123 (empty -> .) ]
  ! TRUE            [ reduce using rule 123 (empty -> .) ]
  ! FALSE           [ reduce using rule 123 (empty -> .) ]

    var                            shift and go to state 84
    statement                      shift and go to state 198
    expression_stmt                shift and go to state 93
    compount_stmt                  shift and go to state 94
    selection_stmt                 shift and go to state 95
    iteration_stmt                 shift and go to state 96
    return_stmt                    shift and go to state 97
    class_declaration              shift and go to state 98
    echo_stmt                      shift and go to state 99
    expression                     shift and go to state 100
    additive_expression            shift and go to state 69
    area                           shift and go to state 103
    empty                          shift and go to state 26
    boolean                        shift and go to state 88
    simple_expression              shift and go to state 85
    term                           shift and go to state 70
    factor                         shift and go to state 71

state 156

    (75) selection_stmt -> CASE NUM COLON statement . BREAK SEMI

    BREAK           shift and go to state 199


state 157

    (76) selection_stmt -> DEFAULT COLON statement BREAK . SEMI

    SEMI            shift and go to state 200


state 158

    (69) expression_stmt -> expression SEMI .

    BREAK           reduce using rule 69 (expression_stmt -> expression SEMI .)
    SEMI            reduce using rule 69 (expression_stmt -> expression SEMI .)
    ELSE            reduce using rule 69 (expression_stmt -> expression SEMI .)
    ELSEIF          reduce using rule 69 (expression_stmt -> expression SEMI .)
    CLOSETAG        reduce using rule 69 (expression_stmt -> expression SEMI .)
    VARIABLE        reduce using rule 69 (expression_stmt -> expression SEMI .)
    TIMESTIMES      reduce using rule 69 (expression_stmt -> expression SEMI .)
    AMPERSANT       reduce using rule 69 (expression_stmt -> expression SEMI .)
    FUNCTION        reduce using rule 69 (expression_stmt -> expression SEMI .)
    PRIVATE         reduce using rule 69 (expression_stmt -> expression SEMI .)
    PUBLIC          reduce using rule 69 (expression_stmt -> expression SEMI .)
    PROTECTED       reduce using rule 69 (expression_stmt -> expression SEMI .)
    REQUIRE         reduce using rule 69 (expression_stmt -> expression SEMI .)
    INCLUDE         reduce using rule 69 (expression_stmt -> expression SEMI .)
    CLASS           reduce using rule 69 (expression_stmt -> expression SEMI .)
    IF              reduce using rule 69 (expression_stmt -> expression SEMI .)
    SWITCH          reduce using rule 69 (expression_stmt -> expression SEMI .)
    CASE            reduce using rule 69 (expression_stmt -> expression SEMI .)
    DEFAULT         reduce using rule 69 (expression_stmt -> expression SEMI .)
    FOR             reduce using rule 69 (expression_stmt -> expression SEMI .)
    WHILE           reduce using rule 69 (expression_stmt -> expression SEMI .)
    DO              reduce using rule 69 (expression_stmt -> expression SEMI .)
    ID              reduce using rule 69 (expression_stmt -> expression SEMI .)
    COMMENTS        reduce using rule 69 (expression_stmt -> expression SEMI .)
    ECHO            reduce using rule 69 (expression_stmt -> expression SEMI .)
    RBLOCK          reduce using rule 69 (expression_stmt -> expression SEMI .)
    LBLOCK          reduce using rule 69 (expression_stmt -> expression SEMI .)
    RETURN          reduce using rule 69 (expression_stmt -> expression SEMI .)
    LPAREN          reduce using rule 69 (expression_stmt -> expression SEMI .)
    NUM             reduce using rule 69 (expression_stmt -> expression SEMI .)
    TRUE            reduce using rule 69 (expression_stmt -> expression SEMI .)
    FALSE           reduce using rule 69 (expression_stmt -> expression SEMI .)


state 159

    (57) compount_stmt -> LBLOCK echo_stmt . local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (14) echo_stmt -> echo_stmt . ECHO STRING SEMI
    (15) echo_stmt -> echo_stmt . ECHO VARIABLE SEMI
    (17) echo_stmt -> echo_stmt . ECHO NUM SEMI
    (18) echo_stmt -> echo_stmt . ECHO boolean SEMI
    (19) echo_stmt -> echo_stmt . ECHO fun_declaration SEMI
    (58) local_declarations -> . local_declarations var_declaration
    (59) local_declarations -> . empty
    (123) empty -> .

  ! shift/reduce conflict for ECHO resolved as shift
    ECHO            shift and go to state 39
    VARIABLE        reduce using rule 123 (empty -> .)
    TIMESTIMES      reduce using rule 123 (empty -> .)
    AMPERSANT       reduce using rule 123 (empty -> .)
    LBLOCK          reduce using rule 123 (empty -> .)
    IF              reduce using rule 123 (empty -> .)
    SWITCH          reduce using rule 123 (empty -> .)
    CASE            reduce using rule 123 (empty -> .)
    DEFAULT         reduce using rule 123 (empty -> .)
    FOR             reduce using rule 123 (empty -> .)
    WHILE           reduce using rule 123 (empty -> .)
    DO              reduce using rule 123 (empty -> .)
    RETURN          reduce using rule 123 (empty -> .)
    CLASS           reduce using rule 123 (empty -> .)
    PRIVATE         reduce using rule 123 (empty -> .)
    PUBLIC          reduce using rule 123 (empty -> .)
    PROTECTED       reduce using rule 123 (empty -> .)
    LPAREN          reduce using rule 123 (empty -> .)
    NUM             reduce using rule 123 (empty -> .)
    TRUE            reduce using rule 123 (empty -> .)
    FALSE           reduce using rule 123 (empty -> .)
    RBLOCK          reduce using rule 123 (empty -> .)

  ! ECHO            [ reduce using rule 123 (empty -> .) ]

    local_declarations             shift and go to state 201
    empty                          shift and go to state 202

state 160

    (80) return_stmt -> RETURN SEMI .

    BREAK           reduce using rule 80 (return_stmt -> RETURN SEMI .)
    SEMI            reduce using rule 80 (return_stmt -> RETURN SEMI .)
    ELSE            reduce using rule 80 (return_stmt -> RETURN SEMI .)
    ELSEIF          reduce using rule 80 (return_stmt -> RETURN SEMI .)
    CLOSETAG        reduce using rule 80 (return_stmt -> RETURN SEMI .)
    VARIABLE        reduce using rule 80 (return_stmt -> RETURN SEMI .)
    TIMESTIMES      reduce using rule 80 (return_stmt -> RETURN SEMI .)
    AMPERSANT       reduce using rule 80 (return_stmt -> RETURN SEMI .)
    FUNCTION        reduce using rule 80 (return_stmt -> RETURN SEMI .)
    PRIVATE         reduce using rule 80 (return_stmt -> RETURN SEMI .)
    PUBLIC          reduce using rule 80 (return_stmt -> RETURN SEMI .)
    PROTECTED       reduce using rule 80 (return_stmt -> RETURN SEMI .)
    REQUIRE         reduce using rule 80 (return_stmt -> RETURN SEMI .)
    INCLUDE         reduce using rule 80 (return_stmt -> RETURN SEMI .)
    CLASS           reduce using rule 80 (return_stmt -> RETURN SEMI .)
    IF              reduce using rule 80 (return_stmt -> RETURN SEMI .)
    SWITCH          reduce using rule 80 (return_stmt -> RETURN SEMI .)
    CASE            reduce using rule 80 (return_stmt -> RETURN SEMI .)
    DEFAULT         reduce using rule 80 (return_stmt -> RETURN SEMI .)
    FOR             reduce using rule 80 (return_stmt -> RETURN SEMI .)
    WHILE           reduce using rule 80 (return_stmt -> RETURN SEMI .)
    DO              reduce using rule 80 (return_stmt -> RETURN SEMI .)
    ID              reduce using rule 80 (return_stmt -> RETURN SEMI .)
    COMMENTS        reduce using rule 80 (return_stmt -> RETURN SEMI .)
    ECHO            reduce using rule 80 (return_stmt -> RETURN SEMI .)
    RBLOCK          reduce using rule 80 (return_stmt -> RETURN SEMI .)
    LBLOCK          reduce using rule 80 (return_stmt -> RETURN SEMI .)
    RETURN          reduce using rule 80 (return_stmt -> RETURN SEMI .)
    LPAREN          reduce using rule 80 (return_stmt -> RETURN SEMI .)
    NUM             reduce using rule 80 (return_stmt -> RETURN SEMI .)
    TRUE            reduce using rule 80 (return_stmt -> RETURN SEMI .)
    FALSE           reduce using rule 80 (return_stmt -> RETURN SEMI .)


state 161

    (81) return_stmt -> RETURN expression . SEMI
    (85) expression -> expression . AND expression
    (86) expression -> expression . OR expression

    SEMI            shift and go to state 203
    AND             shift and go to state 152
    OR              shift and go to state 153


state 162

    (77) iteration_stmt -> FOR LPAREN var_declaration SEMI . expression SEMI additive_expression RPAREN statement
    (82) expression -> . var EQUAL expression
    (83) expression -> . simple_expression
    (84) expression -> . var EQUAL AMPERSANT VARIABLE
    (85) expression -> . expression AND expression
    (86) expression -> . expression OR expression
    (87) var -> . VARIABLE
    (88) var -> . VARIABLE LBRACKET expression RBRACKET
    (89) simple_expression -> . additive_expression relop additive_expression
    (90) simple_expression -> . additive_expression
    (98) additive_expression -> . additive_expression addop term
    (99) additive_expression -> . term
    (100) additive_expression -> . term MINUSMINUS
    (101) additive_expression -> . term PLUSPLUS
    (104) term -> . term mulop factor
    (105) term -> . factor
    (108) factor -> . LPAREN expression RPAREN
    (109) factor -> . var
    (110) factor -> . NUM
    (111) factor -> . boolean
    (112) factor -> . VARIABLE LPAREN args RPAREN
    (118) boolean -> . TRUE
    (119) boolean -> . FALSE

    VARIABLE        shift and go to state 86
    LPAREN          shift and go to state 72
    NUM             shift and go to state 87
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63

    expression                     shift and go to state 204
    additive_expression            shift and go to state 69
    var                            shift and go to state 84
    simple_expression              shift and go to state 85
    term                           shift and go to state 70
    factor                         shift and go to state 71
    boolean                        shift and go to state 88

state 163

    (78) iteration_stmt -> WHILE LPAREN expression RPAREN . statement
    (62) statement -> . expression_stmt
    (63) statement -> . compount_stmt
    (64) statement -> . selection_stmt
    (65) statement -> . iteration_stmt
    (66) statement -> . return_stmt
    (67) statement -> . class_declaration
    (68) statement -> . echo_stmt
    (69) expression_stmt -> . expression SEMI
    (57) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (70) selection_stmt -> . IF LPAREN expression RPAREN statement
    (71) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (74) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (75) selection_stmt -> . CASE NUM COLON statement BREAK SEMI
    (76) selection_stmt -> . DEFAULT COLON statement BREAK SEMI
    (77) iteration_stmt -> . FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement
    (78) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (79) iteration_stmt -> . DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN
    (80) return_stmt -> . RETURN SEMI
    (81) return_stmt -> . RETURN expression SEMI
    (22) class_declaration -> . area CLASS ID LBLOCK attribute RBLOCK
    (23) class_declaration -> . CLASS ID LBLOCK attribute RBLOCK
    (24) class_declaration -> . CLASS ID LBLOCK RBLOCK
    (25) class_declaration -> . CLASS ID EXTENDS ID LBLOCK attribute RBLOCK
    (26) class_declaration -> . CLASS ID EXTENDS ID LBLOCK RBLOCK
    (14) echo_stmt -> . echo_stmt ECHO STRING SEMI
    (15) echo_stmt -> . echo_stmt ECHO VARIABLE SEMI
    (16) echo_stmt -> . empty
    (17) echo_stmt -> . echo_stmt ECHO NUM SEMI
    (18) echo_stmt -> . echo_stmt ECHO boolean SEMI
    (19) echo_stmt -> . echo_stmt ECHO fun_declaration SEMI
    (82) expression -> . var EQUAL expression
    (83) expression -> . simple_expression
    (84) expression -> . var EQUAL AMPERSANT VARIABLE
    (85) expression -> . expression AND expression
    (86) expression -> . expression OR expression
    (32) area -> . PRIVATE
    (33) area -> . PUBLIC
    (34) area -> . PROTECTED
    (123) empty -> .
    (87) var -> . VARIABLE
    (88) var -> . VARIABLE LBRACKET expression RBRACKET
    (89) simple_expression -> . additive_expression relop additive_expression
    (90) simple_expression -> . additive_expression
    (98) additive_expression -> . additive_expression addop term
    (99) additive_expression -> . term
    (100) additive_expression -> . term MINUSMINUS
    (101) additive_expression -> . term PLUSPLUS
    (104) term -> . term mulop factor
    (105) term -> . factor
    (108) factor -> . LPAREN expression RPAREN
    (109) factor -> . var
    (110) factor -> . NUM
    (111) factor -> . boolean
    (112) factor -> . VARIABLE LPAREN args RPAREN
    (118) boolean -> . TRUE
    (119) boolean -> . FALSE

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LBLOCK          shift and go to state 101
    IF              shift and go to state 27
    SWITCH          shift and go to state 28
    CASE            shift and go to state 29
    DEFAULT         shift and go to state 30
    FOR             shift and go to state 31
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    RETURN          shift and go to state 102
    CLASS           shift and go to state 25
    PRIVATE         shift and go to state 20
    PUBLIC          shift and go to state 21
    PROTECTED       shift and go to state 22
    ECHO            reduce using rule 123 (empty -> .)
    ELSE            reduce using rule 123 (empty -> .)
    ELSEIF          reduce using rule 123 (empty -> .)
    CLOSETAG        reduce using rule 123 (empty -> .)
    TIMESTIMES      reduce using rule 123 (empty -> .)
    AMPERSANT       reduce using rule 123 (empty -> .)
    FUNCTION        reduce using rule 123 (empty -> .)
    REQUIRE         reduce using rule 123 (empty -> .)
    INCLUDE         reduce using rule 123 (empty -> .)
    ID              reduce using rule 123 (empty -> .)
    COMMENTS        reduce using rule 123 (empty -> .)
    BREAK           reduce using rule 123 (empty -> .)
    SEMI            reduce using rule 123 (empty -> .)
    RBLOCK          reduce using rule 123 (empty -> .)
    VARIABLE        shift and go to state 86
    LPAREN          shift and go to state 72
    NUM             shift and go to state 87
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63

  ! VARIABLE        [ reduce using rule 123 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 123 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 123 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 123 (empty -> .) ]
  ! CLASS           [ reduce using rule 123 (empty -> .) ]
  ! IF              [ reduce using rule 123 (empty -> .) ]
  ! SWITCH          [ reduce using rule 123 (empty -> .) ]
  ! CASE            [ reduce using rule 123 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 123 (empty -> .) ]
  ! FOR             [ reduce using rule 123 (empty -> .) ]
  ! WHILE           [ reduce using rule 123 (empty -> .) ]
  ! DO              [ reduce using rule 123 (empty -> .) ]
  ! LBLOCK          [ reduce using rule 123 (empty -> .) ]
  ! RETURN          [ reduce using rule 123 (empty -> .) ]
  ! LPAREN          [ reduce using rule 123 (empty -> .) ]
  ! NUM             [ reduce using rule 123 (empty -> .) ]
  ! TRUE            [ reduce using rule 123 (empty -> .) ]
  ! FALSE           [ reduce using rule 123 (empty -> .) ]

    expression                     shift and go to state 100
    statement                      shift and go to state 205
    expression_stmt                shift and go to state 93
    compount_stmt                  shift and go to state 94
    selection_stmt                 shift and go to state 95
    iteration_stmt                 shift and go to state 96
    return_stmt                    shift and go to state 97
    class_declaration              shift and go to state 98
    echo_stmt                      shift and go to state 99
    var                            shift and go to state 84
    additive_expression            shift and go to state 69
    area                           shift and go to state 103
    empty                          shift and go to state 26
    boolean                        shift and go to state 88
    simple_expression              shift and go to state 85
    term                           shift and go to state 70
    factor                         shift and go to state 71

state 164

    (79) iteration_stmt -> DO LBLOCK statement SEMI . RBLOCK WHILE LPAREN expression RPAREN

    RBLOCK          shift and go to state 206


state 165

    (22) class_declaration -> area CLASS ID LBLOCK attribute . RBLOCK
    (27) attribute -> attribute . area var_declaration
    (29) attribute -> attribute . area fun_declaration
    (32) area -> . PRIVATE
    (33) area -> . PUBLIC
    (34) area -> . PROTECTED

    RBLOCK          shift and go to state 207
    PRIVATE         shift and go to state 20
    PUBLIC          shift and go to state 21
    PROTECTED       shift and go to state 22

    area                           shift and go to state 189

state 166

    (43) var_declaration -> VARIABLE EQUAL VARIABLE SEMI var_declaration .

    CLOSETAG        reduce using rule 43 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI var_declaration .)
    VARIABLE        reduce using rule 43 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI var_declaration .)
    TIMESTIMES      reduce using rule 43 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI var_declaration .)
    AMPERSANT       reduce using rule 43 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI var_declaration .)
    FUNCTION        reduce using rule 43 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI var_declaration .)
    PRIVATE         reduce using rule 43 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI var_declaration .)
    PUBLIC          reduce using rule 43 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI var_declaration .)
    PROTECTED       reduce using rule 43 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI var_declaration .)
    REQUIRE         reduce using rule 43 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI var_declaration .)
    INCLUDE         reduce using rule 43 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI var_declaration .)
    CLASS           reduce using rule 43 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI var_declaration .)
    IF              reduce using rule 43 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI var_declaration .)
    SWITCH          reduce using rule 43 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI var_declaration .)
    CASE            reduce using rule 43 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI var_declaration .)
    DEFAULT         reduce using rule 43 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI var_declaration .)
    FOR             reduce using rule 43 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI var_declaration .)
    WHILE           reduce using rule 43 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI var_declaration .)
    DO              reduce using rule 43 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI var_declaration .)
    ID              reduce using rule 43 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI var_declaration .)
    COMMENTS        reduce using rule 43 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI var_declaration .)
    ECHO            reduce using rule 43 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI var_declaration .)
    SEMI            reduce using rule 43 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI var_declaration .)
    RBLOCK          reduce using rule 43 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI var_declaration .)
    LBLOCK          reduce using rule 43 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI var_declaration .)
    RETURN          reduce using rule 43 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI var_declaration .)
    LPAREN          reduce using rule 43 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI var_declaration .)
    NUM             reduce using rule 43 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI var_declaration .)
    TRUE            reduce using rule 43 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI var_declaration .)
    FALSE           reduce using rule 43 (var_declaration -> VARIABLE EQUAL VARIABLE SEMI var_declaration .)


state 167

    (112) factor -> VARIABLE LPAREN args . RPAREN

    RPAREN          shift and go to state 208


state 168

    (113) args -> args_list .
    (116) args_list -> args_list . COMMA expression

    RPAREN          reduce using rule 113 (args -> args_list .)
    COMMA           shift and go to state 209


state 169

    (114) args -> empty .

    RPAREN          reduce using rule 114 (args -> empty .)


state 170

    (115) args -> VOID .

    RPAREN          reduce using rule 115 (args -> VOID .)


state 171

    (117) args_list -> expression .
    (85) expression -> expression . AND expression
    (86) expression -> expression . OR expression

    COMMA           reduce using rule 117 (args_list -> expression .)
    RPAREN          reduce using rule 117 (args_list -> expression .)
    AND             shift and go to state 152
    OR              shift and go to state 153


state 172

    (88) var -> VARIABLE LBRACKET expression . RBRACKET
    (85) expression -> expression . AND expression
    (86) expression -> expression . OR expression

    RBRACKET        shift and go to state 210
    AND             shift and go to state 152
    OR              shift and go to state 153


state 173

    (39) var_declaration -> VARIABLE EQUAL NUM SEMI var_declaration .

    CLOSETAG        reduce using rule 39 (var_declaration -> VARIABLE EQUAL NUM SEMI var_declaration .)
    VARIABLE        reduce using rule 39 (var_declaration -> VARIABLE EQUAL NUM SEMI var_declaration .)
    TIMESTIMES      reduce using rule 39 (var_declaration -> VARIABLE EQUAL NUM SEMI var_declaration .)
    AMPERSANT       reduce using rule 39 (var_declaration -> VARIABLE EQUAL NUM SEMI var_declaration .)
    FUNCTION        reduce using rule 39 (var_declaration -> VARIABLE EQUAL NUM SEMI var_declaration .)
    PRIVATE         reduce using rule 39 (var_declaration -> VARIABLE EQUAL NUM SEMI var_declaration .)
    PUBLIC          reduce using rule 39 (var_declaration -> VARIABLE EQUAL NUM SEMI var_declaration .)
    PROTECTED       reduce using rule 39 (var_declaration -> VARIABLE EQUAL NUM SEMI var_declaration .)
    REQUIRE         reduce using rule 39 (var_declaration -> VARIABLE EQUAL NUM SEMI var_declaration .)
    INCLUDE         reduce using rule 39 (var_declaration -> VARIABLE EQUAL NUM SEMI var_declaration .)
    CLASS           reduce using rule 39 (var_declaration -> VARIABLE EQUAL NUM SEMI var_declaration .)
    IF              reduce using rule 39 (var_declaration -> VARIABLE EQUAL NUM SEMI var_declaration .)
    SWITCH          reduce using rule 39 (var_declaration -> VARIABLE EQUAL NUM SEMI var_declaration .)
    CASE            reduce using rule 39 (var_declaration -> VARIABLE EQUAL NUM SEMI var_declaration .)
    DEFAULT         reduce using rule 39 (var_declaration -> VARIABLE EQUAL NUM SEMI var_declaration .)
    FOR             reduce using rule 39 (var_declaration -> VARIABLE EQUAL NUM SEMI var_declaration .)
    WHILE           reduce using rule 39 (var_declaration -> VARIABLE EQUAL NUM SEMI var_declaration .)
    DO              reduce using rule 39 (var_declaration -> VARIABLE EQUAL NUM SEMI var_declaration .)
    ID              reduce using rule 39 (var_declaration -> VARIABLE EQUAL NUM SEMI var_declaration .)
    COMMENTS        reduce using rule 39 (var_declaration -> VARIABLE EQUAL NUM SEMI var_declaration .)
    ECHO            reduce using rule 39 (var_declaration -> VARIABLE EQUAL NUM SEMI var_declaration .)
    SEMI            reduce using rule 39 (var_declaration -> VARIABLE EQUAL NUM SEMI var_declaration .)
    RBLOCK          reduce using rule 39 (var_declaration -> VARIABLE EQUAL NUM SEMI var_declaration .)
    LBLOCK          reduce using rule 39 (var_declaration -> VARIABLE EQUAL NUM SEMI var_declaration .)
    RETURN          reduce using rule 39 (var_declaration -> VARIABLE EQUAL NUM SEMI var_declaration .)
    LPAREN          reduce using rule 39 (var_declaration -> VARIABLE EQUAL NUM SEMI var_declaration .)
    NUM             reduce using rule 39 (var_declaration -> VARIABLE EQUAL NUM SEMI var_declaration .)
    TRUE            reduce using rule 39 (var_declaration -> VARIABLE EQUAL NUM SEMI var_declaration .)
    FALSE           reduce using rule 39 (var_declaration -> VARIABLE EQUAL NUM SEMI var_declaration .)


state 174

    (41) var_declaration -> VARIABLE EQUAL boolean SEMI var_declaration .

    CLOSETAG        reduce using rule 41 (var_declaration -> VARIABLE EQUAL boolean SEMI var_declaration .)
    VARIABLE        reduce using rule 41 (var_declaration -> VARIABLE EQUAL boolean SEMI var_declaration .)
    TIMESTIMES      reduce using rule 41 (var_declaration -> VARIABLE EQUAL boolean SEMI var_declaration .)
    AMPERSANT       reduce using rule 41 (var_declaration -> VARIABLE EQUAL boolean SEMI var_declaration .)
    FUNCTION        reduce using rule 41 (var_declaration -> VARIABLE EQUAL boolean SEMI var_declaration .)
    PRIVATE         reduce using rule 41 (var_declaration -> VARIABLE EQUAL boolean SEMI var_declaration .)
    PUBLIC          reduce using rule 41 (var_declaration -> VARIABLE EQUAL boolean SEMI var_declaration .)
    PROTECTED       reduce using rule 41 (var_declaration -> VARIABLE EQUAL boolean SEMI var_declaration .)
    REQUIRE         reduce using rule 41 (var_declaration -> VARIABLE EQUAL boolean SEMI var_declaration .)
    INCLUDE         reduce using rule 41 (var_declaration -> VARIABLE EQUAL boolean SEMI var_declaration .)
    CLASS           reduce using rule 41 (var_declaration -> VARIABLE EQUAL boolean SEMI var_declaration .)
    IF              reduce using rule 41 (var_declaration -> VARIABLE EQUAL boolean SEMI var_declaration .)
    SWITCH          reduce using rule 41 (var_declaration -> VARIABLE EQUAL boolean SEMI var_declaration .)
    CASE            reduce using rule 41 (var_declaration -> VARIABLE EQUAL boolean SEMI var_declaration .)
    DEFAULT         reduce using rule 41 (var_declaration -> VARIABLE EQUAL boolean SEMI var_declaration .)
    FOR             reduce using rule 41 (var_declaration -> VARIABLE EQUAL boolean SEMI var_declaration .)
    WHILE           reduce using rule 41 (var_declaration -> VARIABLE EQUAL boolean SEMI var_declaration .)
    DO              reduce using rule 41 (var_declaration -> VARIABLE EQUAL boolean SEMI var_declaration .)
    ID              reduce using rule 41 (var_declaration -> VARIABLE EQUAL boolean SEMI var_declaration .)
    COMMENTS        reduce using rule 41 (var_declaration -> VARIABLE EQUAL boolean SEMI var_declaration .)
    ECHO            reduce using rule 41 (var_declaration -> VARIABLE EQUAL boolean SEMI var_declaration .)
    SEMI            reduce using rule 41 (var_declaration -> VARIABLE EQUAL boolean SEMI var_declaration .)
    RBLOCK          reduce using rule 41 (var_declaration -> VARIABLE EQUAL boolean SEMI var_declaration .)
    LBLOCK          reduce using rule 41 (var_declaration -> VARIABLE EQUAL boolean SEMI var_declaration .)
    RETURN          reduce using rule 41 (var_declaration -> VARIABLE EQUAL boolean SEMI var_declaration .)
    LPAREN          reduce using rule 41 (var_declaration -> VARIABLE EQUAL boolean SEMI var_declaration .)
    NUM             reduce using rule 41 (var_declaration -> VARIABLE EQUAL boolean SEMI var_declaration .)
    TRUE            reduce using rule 41 (var_declaration -> VARIABLE EQUAL boolean SEMI var_declaration .)
    FALSE           reduce using rule 41 (var_declaration -> VARIABLE EQUAL boolean SEMI var_declaration .)


state 175

    (89) simple_expression -> additive_expression relop additive_expression .
    (98) additive_expression -> additive_expression . addop term
    (102) addop -> . PLUS
    (103) addop -> . MINUS

    SEMI            reduce using rule 89 (simple_expression -> additive_expression relop additive_expression .)
    RPAREN          reduce using rule 89 (simple_expression -> additive_expression relop additive_expression .)
    AND             reduce using rule 89 (simple_expression -> additive_expression relop additive_expression .)
    OR              reduce using rule 89 (simple_expression -> additive_expression relop additive_expression .)
    COMMA           reduce using rule 89 (simple_expression -> additive_expression relop additive_expression .)
    RBRACKET        reduce using rule 89 (simple_expression -> additive_expression relop additive_expression .)
    PLUS            shift and go to state 128
    MINUS           shift and go to state 129

    addop                          shift and go to state 120

state 176

    (112) factor -> VARIABLE . LPAREN args RPAREN
    (87) var -> VARIABLE .
    (88) var -> VARIABLE . LBRACKET expression RBRACKET

    LPAREN          shift and go to state 114
    MINUSMINUS      reduce using rule 87 (var -> VARIABLE .)
    PLUSPLUS        reduce using rule 87 (var -> VARIABLE .)
    TIMES           reduce using rule 87 (var -> VARIABLE .)
    DIVIDE          reduce using rule 87 (var -> VARIABLE .)
    PLUS            reduce using rule 87 (var -> VARIABLE .)
    MINUS           reduce using rule 87 (var -> VARIABLE .)
    SEMI            reduce using rule 87 (var -> VARIABLE .)
    RPAREN          reduce using rule 87 (var -> VARIABLE .)
    AND             reduce using rule 87 (var -> VARIABLE .)
    OR              reduce using rule 87 (var -> VARIABLE .)
    COMMA           reduce using rule 87 (var -> VARIABLE .)
    RBRACKET        reduce using rule 87 (var -> VARIABLE .)
    LESS            reduce using rule 87 (var -> VARIABLE .)
    LESSEQUAL       reduce using rule 87 (var -> VARIABLE .)
    GREATER         reduce using rule 87 (var -> VARIABLE .)
    GREATEREQUAL    reduce using rule 87 (var -> VARIABLE .)
    DEQUAL          reduce using rule 87 (var -> VARIABLE .)
    DISTINT         reduce using rule 87 (var -> VARIABLE .)
    ISEQUAL         reduce using rule 87 (var -> VARIABLE .)
    LBRACKET        shift and go to state 115


state 177

    (98) additive_expression -> additive_expression addop term .
    (104) term -> term . mulop factor
    (106) mulop -> . TIMES
    (107) mulop -> . DIVIDE

    LESS            reduce using rule 98 (additive_expression -> additive_expression addop term .)
    LESSEQUAL       reduce using rule 98 (additive_expression -> additive_expression addop term .)
    GREATER         reduce using rule 98 (additive_expression -> additive_expression addop term .)
    GREATEREQUAL    reduce using rule 98 (additive_expression -> additive_expression addop term .)
    DEQUAL          reduce using rule 98 (additive_expression -> additive_expression addop term .)
    DISTINT         reduce using rule 98 (additive_expression -> additive_expression addop term .)
    ISEQUAL         reduce using rule 98 (additive_expression -> additive_expression addop term .)
    PLUS            reduce using rule 98 (additive_expression -> additive_expression addop term .)
    MINUS           reduce using rule 98 (additive_expression -> additive_expression addop term .)
    SEMI            reduce using rule 98 (additive_expression -> additive_expression addop term .)
    RPAREN          reduce using rule 98 (additive_expression -> additive_expression addop term .)
    AND             reduce using rule 98 (additive_expression -> additive_expression addop term .)
    OR              reduce using rule 98 (additive_expression -> additive_expression addop term .)
    COMMA           reduce using rule 98 (additive_expression -> additive_expression addop term .)
    RBRACKET        reduce using rule 98 (additive_expression -> additive_expression addop term .)
    TIMES           shift and go to state 133
    DIVIDE          shift and go to state 134

    mulop                          shift and go to state 132

state 178

    (104) term -> term mulop factor .

    MINUSMINUS      reduce using rule 104 (term -> term mulop factor .)
    PLUSPLUS        reduce using rule 104 (term -> term mulop factor .)
    TIMES           reduce using rule 104 (term -> term mulop factor .)
    DIVIDE          reduce using rule 104 (term -> term mulop factor .)
    LESS            reduce using rule 104 (term -> term mulop factor .)
    LESSEQUAL       reduce using rule 104 (term -> term mulop factor .)
    GREATER         reduce using rule 104 (term -> term mulop factor .)
    GREATEREQUAL    reduce using rule 104 (term -> term mulop factor .)
    DEQUAL          reduce using rule 104 (term -> term mulop factor .)
    DISTINT         reduce using rule 104 (term -> term mulop factor .)
    ISEQUAL         reduce using rule 104 (term -> term mulop factor .)
    PLUS            reduce using rule 104 (term -> term mulop factor .)
    MINUS           reduce using rule 104 (term -> term mulop factor .)
    SEMI            reduce using rule 104 (term -> term mulop factor .)
    RPAREN          reduce using rule 104 (term -> term mulop factor .)
    AND             reduce using rule 104 (term -> term mulop factor .)
    OR              reduce using rule 104 (term -> term mulop factor .)
    COMMA           reduce using rule 104 (term -> term mulop factor .)
    RBRACKET        reduce using rule 104 (term -> term mulop factor .)


state 179

    (108) factor -> LPAREN expression RPAREN .

    MINUSMINUS      reduce using rule 108 (factor -> LPAREN expression RPAREN .)
    PLUSPLUS        reduce using rule 108 (factor -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 108 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 108 (factor -> LPAREN expression RPAREN .)
    LESS            reduce using rule 108 (factor -> LPAREN expression RPAREN .)
    LESSEQUAL       reduce using rule 108 (factor -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 108 (factor -> LPAREN expression RPAREN .)
    GREATEREQUAL    reduce using rule 108 (factor -> LPAREN expression RPAREN .)
    DEQUAL          reduce using rule 108 (factor -> LPAREN expression RPAREN .)
    DISTINT         reduce using rule 108 (factor -> LPAREN expression RPAREN .)
    ISEQUAL         reduce using rule 108 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 108 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 108 (factor -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 108 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 108 (factor -> LPAREN expression RPAREN .)
    AND             reduce using rule 108 (factor -> LPAREN expression RPAREN .)
    OR              reduce using rule 108 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 108 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 108 (factor -> LPAREN expression RPAREN .)


state 180

    (46) var_declaration -> AMPERSANT VARIABLE EQUAL VARIABLE SEMI . selection_stmt
    (70) selection_stmt -> . IF LPAREN expression RPAREN statement
    (71) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (74) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (75) selection_stmt -> . CASE NUM COLON statement BREAK SEMI
    (76) selection_stmt -> . DEFAULT COLON statement BREAK SEMI

    IF              shift and go to state 27
    SWITCH          shift and go to state 28
    CASE            shift and go to state 29
    DEFAULT         shift and go to state 30

    selection_stmt                 shift and go to state 211

state 181

    (49) fun_declaration -> FUNCTION ID LPAREN params RPAREN .
    (50) fun_declaration -> FUNCTION ID LPAREN params RPAREN . compount_stmt
    (57) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK

    CLOSETAG        reduce using rule 49 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    VARIABLE        reduce using rule 49 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    TIMESTIMES      reduce using rule 49 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    AMPERSANT       reduce using rule 49 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    FUNCTION        reduce using rule 49 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    PRIVATE         reduce using rule 49 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    PUBLIC          reduce using rule 49 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    PROTECTED       reduce using rule 49 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    REQUIRE         reduce using rule 49 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    INCLUDE         reduce using rule 49 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    CLASS           reduce using rule 49 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    IF              reduce using rule 49 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    SWITCH          reduce using rule 49 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    CASE            reduce using rule 49 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    DEFAULT         reduce using rule 49 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    FOR             reduce using rule 49 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    WHILE           reduce using rule 49 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    DO              reduce using rule 49 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    ID              reduce using rule 49 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    COMMENTS        reduce using rule 49 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    ECHO            reduce using rule 49 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    SEMI            reduce using rule 49 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    RBLOCK          reduce using rule 49 (fun_declaration -> FUNCTION ID LPAREN params RPAREN .)
    LBLOCK          shift and go to state 101

    compount_stmt                  shift and go to state 212

state 182

    (53) param_list -> param_list COMMA . param_list
    (53) param_list -> . param_list COMMA param_list
    (54) param_list -> . param
    (55) param -> . VARIABLE
    (56) param -> . VARIABLE LBRACKET RBRACKET

    VARIABLE        shift and go to state 143

    param_list                     shift and go to state 213
    param                          shift and go to state 142

state 183

    (56) param -> VARIABLE LBRACKET . RBRACKET

    RBRACKET        shift and go to state 214


state 184

    (121) constructor -> ID . LPAREN RPAREN
    (122) constructor -> ID . LPAREN args RPAREN

    LPAREN          shift and go to state 215


state 185

    (120) typeclass -> ID VARIABLE EQUAL NEW constructor . SEMI

    SEMI            shift and go to state 216


state 186

    (20) header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .

    CLOSETAG        reduce using rule 20 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    VARIABLE        reduce using rule 20 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    TIMESTIMES      reduce using rule 20 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    AMPERSANT       reduce using rule 20 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    FUNCTION        reduce using rule 20 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    PRIVATE         reduce using rule 20 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    PUBLIC          reduce using rule 20 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    PROTECTED       reduce using rule 20 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    REQUIRE         reduce using rule 20 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    INCLUDE         reduce using rule 20 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    CLASS           reduce using rule 20 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    IF              reduce using rule 20 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    SWITCH          reduce using rule 20 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    CASE            reduce using rule 20 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    DEFAULT         reduce using rule 20 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    FOR             reduce using rule 20 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    WHILE           reduce using rule 20 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    DO              reduce using rule 20 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    ID              reduce using rule 20 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    COMMENTS        reduce using rule 20 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)
    ECHO            reduce using rule 20 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMI .)


state 187

    (21) header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .

    CLOSETAG        reduce using rule 21 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    VARIABLE        reduce using rule 21 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    TIMESTIMES      reduce using rule 21 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    AMPERSANT       reduce using rule 21 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    FUNCTION        reduce using rule 21 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    PRIVATE         reduce using rule 21 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    PUBLIC          reduce using rule 21 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    PROTECTED       reduce using rule 21 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    REQUIRE         reduce using rule 21 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    INCLUDE         reduce using rule 21 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    CLASS           reduce using rule 21 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    IF              reduce using rule 21 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    SWITCH          reduce using rule 21 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    CASE            reduce using rule 21 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    DEFAULT         reduce using rule 21 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    FOR             reduce using rule 21 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    WHILE           reduce using rule 21 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    DO              reduce using rule 21 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    ID              reduce using rule 21 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    COMMENTS        reduce using rule 21 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)
    ECHO            reduce using rule 21 (header_declaration -> INCLUDE LPAREN STRING RPAREN SEMI .)


state 188

    (23) class_declaration -> CLASS ID LBLOCK attribute RBLOCK .

    CLOSETAG        reduce using rule 23 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    VARIABLE        reduce using rule 23 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    TIMESTIMES      reduce using rule 23 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    AMPERSANT       reduce using rule 23 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    FUNCTION        reduce using rule 23 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    PRIVATE         reduce using rule 23 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    PUBLIC          reduce using rule 23 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    PROTECTED       reduce using rule 23 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    REQUIRE         reduce using rule 23 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    INCLUDE         reduce using rule 23 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    CLASS           reduce using rule 23 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    IF              reduce using rule 23 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    SWITCH          reduce using rule 23 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    CASE            reduce using rule 23 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    DEFAULT         reduce using rule 23 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    FOR             reduce using rule 23 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    WHILE           reduce using rule 23 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    DO              reduce using rule 23 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    ID              reduce using rule 23 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    COMMENTS        reduce using rule 23 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    ECHO            reduce using rule 23 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    BREAK           reduce using rule 23 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    SEMI            reduce using rule 23 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    ELSE            reduce using rule 23 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    ELSEIF          reduce using rule 23 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    RBLOCK          reduce using rule 23 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    LBLOCK          reduce using rule 23 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    RETURN          reduce using rule 23 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    LPAREN          reduce using rule 23 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    NUM             reduce using rule 23 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    TRUE            reduce using rule 23 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)
    FALSE           reduce using rule 23 (class_declaration -> CLASS ID LBLOCK attribute RBLOCK .)


state 189

    (27) attribute -> attribute area . var_declaration
    (29) attribute -> attribute area . fun_declaration
    (35) var_declaration -> . VARIABLE SEMI var_declaration
    (36) var_declaration -> . VARIABLE SEMI
    (37) var_declaration -> . TIMESTIMES VARIABLE SEMI
    (38) var_declaration -> . TIMESTIMES VARIABLE SEMI var_declaration
    (39) var_declaration -> . VARIABLE EQUAL NUM SEMI var_declaration
    (40) var_declaration -> . VARIABLE EQUAL NUM SEMI
    (41) var_declaration -> . VARIABLE EQUAL boolean SEMI var_declaration
    (42) var_declaration -> . VARIABLE EQUAL boolean SEMI
    (43) var_declaration -> . VARIABLE EQUAL VARIABLE SEMI var_declaration
    (44) var_declaration -> . VARIABLE EQUAL VARIABLE SEMI
    (45) var_declaration -> . AMPERSANT VARIABLE SEMI var_declaration
    (46) var_declaration -> . AMPERSANT VARIABLE EQUAL VARIABLE SEMI selection_stmt
    (47) var_declaration -> . AMPERSANT VARIABLE SEMI
    (48) var_declaration -> . VARIABLE EQUAL simple_expression SEMI
    (49) fun_declaration -> . FUNCTION ID LPAREN params RPAREN
    (50) fun_declaration -> . FUNCTION ID LPAREN params RPAREN compount_stmt

    VARIABLE        shift and go to state 15
    TIMESTIMES      shift and go to state 16
    AMPERSANT       shift and go to state 17
    FUNCTION        shift and go to state 18

    var_declaration                shift and go to state 217
    fun_declaration                shift and go to state 218

state 190

    (28) attribute -> area var_declaration .

    RBLOCK          reduce using rule 28 (attribute -> area var_declaration .)
    PRIVATE         reduce using rule 28 (attribute -> area var_declaration .)
    PUBLIC          reduce using rule 28 (attribute -> area var_declaration .)
    PROTECTED       reduce using rule 28 (attribute -> area var_declaration .)


state 191

    (30) attribute -> area fun_declaration .

    RBLOCK          reduce using rule 30 (attribute -> area fun_declaration .)
    PRIVATE         reduce using rule 30 (attribute -> area fun_declaration .)
    PUBLIC          reduce using rule 30 (attribute -> area fun_declaration .)
    PROTECTED       reduce using rule 30 (attribute -> area fun_declaration .)


state 192

    (25) class_declaration -> CLASS ID EXTENDS ID LBLOCK . attribute RBLOCK
    (26) class_declaration -> CLASS ID EXTENDS ID LBLOCK . RBLOCK
    (27) attribute -> . attribute area var_declaration
    (28) attribute -> . area var_declaration
    (29) attribute -> . attribute area fun_declaration
    (30) attribute -> . area fun_declaration
    (32) area -> . PRIVATE
    (33) area -> . PUBLIC
    (34) area -> . PROTECTED

    RBLOCK          shift and go to state 220
    PRIVATE         shift and go to state 20
    PUBLIC          shift and go to state 21
    PROTECTED       shift and go to state 22

    attribute                      shift and go to state 219
    area                           shift and go to state 149

state 193

    (70) selection_stmt -> IF LPAREN expression RPAREN statement .
    (71) selection_stmt -> IF LPAREN expression RPAREN statement . selection
    (72) selection -> . ELSE statement
    (73) selection -> . ELSEIF statement selection

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
    CLOSETAG        reduce using rule 70 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    VARIABLE        reduce using rule 70 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    TIMESTIMES      reduce using rule 70 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    AMPERSANT       reduce using rule 70 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    FUNCTION        reduce using rule 70 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    PRIVATE         reduce using rule 70 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    PUBLIC          reduce using rule 70 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    PROTECTED       reduce using rule 70 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    REQUIRE         reduce using rule 70 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    INCLUDE         reduce using rule 70 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    CLASS           reduce using rule 70 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 70 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 70 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    CASE            reduce using rule 70 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 70 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 70 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 70 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    DO              reduce using rule 70 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 70 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    COMMENTS        reduce using rule 70 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    ECHO            reduce using rule 70 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 70 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 70 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    RBLOCK          reduce using rule 70 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    LBLOCK          reduce using rule 70 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 70 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 70 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    NUM             reduce using rule 70 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    TRUE            reduce using rule 70 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    FALSE           reduce using rule 70 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 222
    ELSEIF          shift and go to state 223

  ! ELSE            [ reduce using rule 70 (selection_stmt -> IF LPAREN expression RPAREN statement .) ]
  ! ELSEIF          [ reduce using rule 70 (selection_stmt -> IF LPAREN expression RPAREN statement .) ]

    selection                      shift and go to state 221

state 194

    (85) expression -> expression AND expression .
    (85) expression -> expression . AND expression
    (86) expression -> expression . OR expression

    RPAREN          reduce using rule 85 (expression -> expression AND expression .)
    AND             reduce using rule 85 (expression -> expression AND expression .)
    OR              reduce using rule 85 (expression -> expression AND expression .)
    SEMI            reduce using rule 85 (expression -> expression AND expression .)
    COMMA           reduce using rule 85 (expression -> expression AND expression .)
    RBRACKET        reduce using rule 85 (expression -> expression AND expression .)

  ! AND             [ shift and go to state 152 ]
  ! OR              [ shift and go to state 153 ]


state 195

    (86) expression -> expression OR expression .
    (85) expression -> expression . AND expression
    (86) expression -> expression . OR expression

    RPAREN          reduce using rule 86 (expression -> expression OR expression .)
    OR              reduce using rule 86 (expression -> expression OR expression .)
    SEMI            reduce using rule 86 (expression -> expression OR expression .)
    COMMA           reduce using rule 86 (expression -> expression OR expression .)
    RBRACKET        reduce using rule 86 (expression -> expression OR expression .)
    AND             shift and go to state 152

  ! AND             [ reduce using rule 86 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 153 ]


state 196

    (82) expression -> var EQUAL expression .
    (85) expression -> expression . AND expression
    (86) expression -> expression . OR expression

    RPAREN          reduce using rule 82 (expression -> var EQUAL expression .)
    SEMI            reduce using rule 82 (expression -> var EQUAL expression .)
    COMMA           reduce using rule 82 (expression -> var EQUAL expression .)
    RBRACKET        reduce using rule 82 (expression -> var EQUAL expression .)
    AND             shift and go to state 152
    OR              shift and go to state 153

  ! AND             [ reduce using rule 82 (expression -> var EQUAL expression .) ]
  ! OR              [ reduce using rule 82 (expression -> var EQUAL expression .) ]


state 197

    (84) expression -> var EQUAL AMPERSANT . VARIABLE

    VARIABLE        shift and go to state 224


state 198

    (74) selection_stmt -> SWITCH LPAREN var RPAREN statement .

    CLOSETAG        reduce using rule 74 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    VARIABLE        reduce using rule 74 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    TIMESTIMES      reduce using rule 74 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    AMPERSANT       reduce using rule 74 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    FUNCTION        reduce using rule 74 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    PRIVATE         reduce using rule 74 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    PUBLIC          reduce using rule 74 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    PROTECTED       reduce using rule 74 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    REQUIRE         reduce using rule 74 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    INCLUDE         reduce using rule 74 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    CLASS           reduce using rule 74 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    IF              reduce using rule 74 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    SWITCH          reduce using rule 74 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    CASE            reduce using rule 74 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    DEFAULT         reduce using rule 74 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    FOR             reduce using rule 74 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    WHILE           reduce using rule 74 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    DO              reduce using rule 74 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    ID              reduce using rule 74 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    COMMENTS        reduce using rule 74 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    ECHO            reduce using rule 74 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    BREAK           reduce using rule 74 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    SEMI            reduce using rule 74 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    ELSE            reduce using rule 74 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    ELSEIF          reduce using rule 74 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    RBLOCK          reduce using rule 74 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    LBLOCK          reduce using rule 74 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    RETURN          reduce using rule 74 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    LPAREN          reduce using rule 74 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    NUM             reduce using rule 74 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    TRUE            reduce using rule 74 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    FALSE           reduce using rule 74 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)


state 199

    (75) selection_stmt -> CASE NUM COLON statement BREAK . SEMI

    SEMI            shift and go to state 225


state 200

    (76) selection_stmt -> DEFAULT COLON statement BREAK SEMI .

    CLOSETAG        reduce using rule 76 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    VARIABLE        reduce using rule 76 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    TIMESTIMES      reduce using rule 76 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    AMPERSANT       reduce using rule 76 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    FUNCTION        reduce using rule 76 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    PRIVATE         reduce using rule 76 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    PUBLIC          reduce using rule 76 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    PROTECTED       reduce using rule 76 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    REQUIRE         reduce using rule 76 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    INCLUDE         reduce using rule 76 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    CLASS           reduce using rule 76 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    IF              reduce using rule 76 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    SWITCH          reduce using rule 76 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    CASE            reduce using rule 76 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    DEFAULT         reduce using rule 76 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    FOR             reduce using rule 76 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    WHILE           reduce using rule 76 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    DO              reduce using rule 76 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    ID              reduce using rule 76 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    COMMENTS        reduce using rule 76 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    ECHO            reduce using rule 76 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    BREAK           reduce using rule 76 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    SEMI            reduce using rule 76 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    ELSE            reduce using rule 76 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    ELSEIF          reduce using rule 76 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    RBLOCK          reduce using rule 76 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    LBLOCK          reduce using rule 76 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    RETURN          reduce using rule 76 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    LPAREN          reduce using rule 76 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    NUM             reduce using rule 76 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    TRUE            reduce using rule 76 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)
    FALSE           reduce using rule 76 (selection_stmt -> DEFAULT COLON statement BREAK SEMI .)


state 201

    (57) compount_stmt -> LBLOCK echo_stmt local_declarations . echo_stmt statement_list echo_stmt RBLOCK
    (58) local_declarations -> local_declarations . var_declaration
    (14) echo_stmt -> . echo_stmt ECHO STRING SEMI
    (15) echo_stmt -> . echo_stmt ECHO VARIABLE SEMI
    (16) echo_stmt -> . empty
    (17) echo_stmt -> . echo_stmt ECHO NUM SEMI
    (18) echo_stmt -> . echo_stmt ECHO boolean SEMI
    (19) echo_stmt -> . echo_stmt ECHO fun_declaration SEMI
    (35) var_declaration -> . VARIABLE SEMI var_declaration
    (36) var_declaration -> . VARIABLE SEMI
    (37) var_declaration -> . TIMESTIMES VARIABLE SEMI
    (38) var_declaration -> . TIMESTIMES VARIABLE SEMI var_declaration
    (39) var_declaration -> . VARIABLE EQUAL NUM SEMI var_declaration
    (40) var_declaration -> . VARIABLE EQUAL NUM SEMI
    (41) var_declaration -> . VARIABLE EQUAL boolean SEMI var_declaration
    (42) var_declaration -> . VARIABLE EQUAL boolean SEMI
    (43) var_declaration -> . VARIABLE EQUAL VARIABLE SEMI var_declaration
    (44) var_declaration -> . VARIABLE EQUAL VARIABLE SEMI
    (45) var_declaration -> . AMPERSANT VARIABLE SEMI var_declaration
    (46) var_declaration -> . AMPERSANT VARIABLE EQUAL VARIABLE SEMI selection_stmt
    (47) var_declaration -> . AMPERSANT VARIABLE SEMI
    (48) var_declaration -> . VARIABLE EQUAL simple_expression SEMI
    (123) empty -> .

  ! shift/reduce conflict for VARIABLE resolved as shift
    VARIABLE        shift and go to state 15
    TIMESTIMES      shift and go to state 16
    AMPERSANT       shift and go to state 17
    ECHO            reduce using rule 123 (empty -> .)
    LBLOCK          reduce using rule 123 (empty -> .)
    IF              reduce using rule 123 (empty -> .)
    SWITCH          reduce using rule 123 (empty -> .)
    CASE            reduce using rule 123 (empty -> .)
    DEFAULT         reduce using rule 123 (empty -> .)
    FOR             reduce using rule 123 (empty -> .)
    WHILE           reduce using rule 123 (empty -> .)
    DO              reduce using rule 123 (empty -> .)
    RETURN          reduce using rule 123 (empty -> .)
    CLASS           reduce using rule 123 (empty -> .)
    PRIVATE         reduce using rule 123 (empty -> .)
    PUBLIC          reduce using rule 123 (empty -> .)
    PROTECTED       reduce using rule 123 (empty -> .)
    LPAREN          reduce using rule 123 (empty -> .)
    NUM             reduce using rule 123 (empty -> .)
    TRUE            reduce using rule 123 (empty -> .)
    FALSE           reduce using rule 123 (empty -> .)
    RBLOCK          reduce using rule 123 (empty -> .)

  ! VARIABLE        [ reduce using rule 123 (empty -> .) ]

    echo_stmt                      shift and go to state 226
    var_declaration                shift and go to state 227
    empty                          shift and go to state 26

state 202

    (59) local_declarations -> empty .

    VARIABLE        reduce using rule 59 (local_declarations -> empty .)
    TIMESTIMES      reduce using rule 59 (local_declarations -> empty .)
    AMPERSANT       reduce using rule 59 (local_declarations -> empty .)
    ECHO            reduce using rule 59 (local_declarations -> empty .)
    LBLOCK          reduce using rule 59 (local_declarations -> empty .)
    IF              reduce using rule 59 (local_declarations -> empty .)
    SWITCH          reduce using rule 59 (local_declarations -> empty .)
    CASE            reduce using rule 59 (local_declarations -> empty .)
    DEFAULT         reduce using rule 59 (local_declarations -> empty .)
    FOR             reduce using rule 59 (local_declarations -> empty .)
    WHILE           reduce using rule 59 (local_declarations -> empty .)
    DO              reduce using rule 59 (local_declarations -> empty .)
    RETURN          reduce using rule 59 (local_declarations -> empty .)
    CLASS           reduce using rule 59 (local_declarations -> empty .)
    PRIVATE         reduce using rule 59 (local_declarations -> empty .)
    PUBLIC          reduce using rule 59 (local_declarations -> empty .)
    PROTECTED       reduce using rule 59 (local_declarations -> empty .)
    LPAREN          reduce using rule 59 (local_declarations -> empty .)
    NUM             reduce using rule 59 (local_declarations -> empty .)
    TRUE            reduce using rule 59 (local_declarations -> empty .)
    FALSE           reduce using rule 59 (local_declarations -> empty .)
    RBLOCK          reduce using rule 59 (local_declarations -> empty .)


state 203

    (81) return_stmt -> RETURN expression SEMI .

    BREAK           reduce using rule 81 (return_stmt -> RETURN expression SEMI .)
    SEMI            reduce using rule 81 (return_stmt -> RETURN expression SEMI .)
    ELSE            reduce using rule 81 (return_stmt -> RETURN expression SEMI .)
    ELSEIF          reduce using rule 81 (return_stmt -> RETURN expression SEMI .)
    CLOSETAG        reduce using rule 81 (return_stmt -> RETURN expression SEMI .)
    VARIABLE        reduce using rule 81 (return_stmt -> RETURN expression SEMI .)
    TIMESTIMES      reduce using rule 81 (return_stmt -> RETURN expression SEMI .)
    AMPERSANT       reduce using rule 81 (return_stmt -> RETURN expression SEMI .)
    FUNCTION        reduce using rule 81 (return_stmt -> RETURN expression SEMI .)
    PRIVATE         reduce using rule 81 (return_stmt -> RETURN expression SEMI .)
    PUBLIC          reduce using rule 81 (return_stmt -> RETURN expression SEMI .)
    PROTECTED       reduce using rule 81 (return_stmt -> RETURN expression SEMI .)
    REQUIRE         reduce using rule 81 (return_stmt -> RETURN expression SEMI .)
    INCLUDE         reduce using rule 81 (return_stmt -> RETURN expression SEMI .)
    CLASS           reduce using rule 81 (return_stmt -> RETURN expression SEMI .)
    IF              reduce using rule 81 (return_stmt -> RETURN expression SEMI .)
    SWITCH          reduce using rule 81 (return_stmt -> RETURN expression SEMI .)
    CASE            reduce using rule 81 (return_stmt -> RETURN expression SEMI .)
    DEFAULT         reduce using rule 81 (return_stmt -> RETURN expression SEMI .)
    FOR             reduce using rule 81 (return_stmt -> RETURN expression SEMI .)
    WHILE           reduce using rule 81 (return_stmt -> RETURN expression SEMI .)
    DO              reduce using rule 81 (return_stmt -> RETURN expression SEMI .)
    ID              reduce using rule 81 (return_stmt -> RETURN expression SEMI .)
    COMMENTS        reduce using rule 81 (return_stmt -> RETURN expression SEMI .)
    ECHO            reduce using rule 81 (return_stmt -> RETURN expression SEMI .)
    RBLOCK          reduce using rule 81 (return_stmt -> RETURN expression SEMI .)
    LBLOCK          reduce using rule 81 (return_stmt -> RETURN expression SEMI .)
    RETURN          reduce using rule 81 (return_stmt -> RETURN expression SEMI .)
    LPAREN          reduce using rule 81 (return_stmt -> RETURN expression SEMI .)
    NUM             reduce using rule 81 (return_stmt -> RETURN expression SEMI .)
    TRUE            reduce using rule 81 (return_stmt -> RETURN expression SEMI .)
    FALSE           reduce using rule 81 (return_stmt -> RETURN expression SEMI .)


state 204

    (77) iteration_stmt -> FOR LPAREN var_declaration SEMI expression . SEMI additive_expression RPAREN statement
    (85) expression -> expression . AND expression
    (86) expression -> expression . OR expression

    SEMI            shift and go to state 228
    AND             shift and go to state 152
    OR              shift and go to state 153


state 205

    (78) iteration_stmt -> WHILE LPAREN expression RPAREN statement .

    CLOSETAG        reduce using rule 78 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    VARIABLE        reduce using rule 78 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    TIMESTIMES      reduce using rule 78 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    AMPERSANT       reduce using rule 78 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    FUNCTION        reduce using rule 78 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    PRIVATE         reduce using rule 78 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    PUBLIC          reduce using rule 78 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    PROTECTED       reduce using rule 78 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    REQUIRE         reduce using rule 78 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    INCLUDE         reduce using rule 78 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    CLASS           reduce using rule 78 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 78 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 78 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    CASE            reduce using rule 78 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 78 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 78 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 78 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    DO              reduce using rule 78 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    ID              reduce using rule 78 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    COMMENTS        reduce using rule 78 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    ECHO            reduce using rule 78 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 78 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 78 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 78 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    ELSEIF          reduce using rule 78 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    RBLOCK          reduce using rule 78 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    LBLOCK          reduce using rule 78 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 78 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 78 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    NUM             reduce using rule 78 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    TRUE            reduce using rule 78 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    FALSE           reduce using rule 78 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)


state 206

    (79) iteration_stmt -> DO LBLOCK statement SEMI RBLOCK . WHILE LPAREN expression RPAREN

    WHILE           shift and go to state 229


state 207

    (22) class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .

    CLOSETAG        reduce using rule 22 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    VARIABLE        reduce using rule 22 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    TIMESTIMES      reduce using rule 22 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    AMPERSANT       reduce using rule 22 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    FUNCTION        reduce using rule 22 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    PRIVATE         reduce using rule 22 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    PUBLIC          reduce using rule 22 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    PROTECTED       reduce using rule 22 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    REQUIRE         reduce using rule 22 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    INCLUDE         reduce using rule 22 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    CLASS           reduce using rule 22 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    IF              reduce using rule 22 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    SWITCH          reduce using rule 22 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    CASE            reduce using rule 22 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    DEFAULT         reduce using rule 22 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    FOR             reduce using rule 22 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    WHILE           reduce using rule 22 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    DO              reduce using rule 22 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    ID              reduce using rule 22 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    COMMENTS        reduce using rule 22 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    ECHO            reduce using rule 22 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    BREAK           reduce using rule 22 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    SEMI            reduce using rule 22 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    ELSE            reduce using rule 22 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    ELSEIF          reduce using rule 22 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    RBLOCK          reduce using rule 22 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    LBLOCK          reduce using rule 22 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    RETURN          reduce using rule 22 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    LPAREN          reduce using rule 22 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    NUM             reduce using rule 22 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    TRUE            reduce using rule 22 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)
    FALSE           reduce using rule 22 (class_declaration -> area CLASS ID LBLOCK attribute RBLOCK .)


state 208

    (112) factor -> VARIABLE LPAREN args RPAREN .

    MINUSMINUS      reduce using rule 112 (factor -> VARIABLE LPAREN args RPAREN .)
    PLUSPLUS        reduce using rule 112 (factor -> VARIABLE LPAREN args RPAREN .)
    TIMES           reduce using rule 112 (factor -> VARIABLE LPAREN args RPAREN .)
    DIVIDE          reduce using rule 112 (factor -> VARIABLE LPAREN args RPAREN .)
    LESS            reduce using rule 112 (factor -> VARIABLE LPAREN args RPAREN .)
    LESSEQUAL       reduce using rule 112 (factor -> VARIABLE LPAREN args RPAREN .)
    GREATER         reduce using rule 112 (factor -> VARIABLE LPAREN args RPAREN .)
    GREATEREQUAL    reduce using rule 112 (factor -> VARIABLE LPAREN args RPAREN .)
    DEQUAL          reduce using rule 112 (factor -> VARIABLE LPAREN args RPAREN .)
    DISTINT         reduce using rule 112 (factor -> VARIABLE LPAREN args RPAREN .)
    ISEQUAL         reduce using rule 112 (factor -> VARIABLE LPAREN args RPAREN .)
    PLUS            reduce using rule 112 (factor -> VARIABLE LPAREN args RPAREN .)
    MINUS           reduce using rule 112 (factor -> VARIABLE LPAREN args RPAREN .)
    SEMI            reduce using rule 112 (factor -> VARIABLE LPAREN args RPAREN .)
    RPAREN          reduce using rule 112 (factor -> VARIABLE LPAREN args RPAREN .)
    AND             reduce using rule 112 (factor -> VARIABLE LPAREN args RPAREN .)
    OR              reduce using rule 112 (factor -> VARIABLE LPAREN args RPAREN .)
    COMMA           reduce using rule 112 (factor -> VARIABLE LPAREN args RPAREN .)
    RBRACKET        reduce using rule 112 (factor -> VARIABLE LPAREN args RPAREN .)


state 209

    (116) args_list -> args_list COMMA . expression
    (82) expression -> . var EQUAL expression
    (83) expression -> . simple_expression
    (84) expression -> . var EQUAL AMPERSANT VARIABLE
    (85) expression -> . expression AND expression
    (86) expression -> . expression OR expression
    (87) var -> . VARIABLE
    (88) var -> . VARIABLE LBRACKET expression RBRACKET
    (89) simple_expression -> . additive_expression relop additive_expression
    (90) simple_expression -> . additive_expression
    (98) additive_expression -> . additive_expression addop term
    (99) additive_expression -> . term
    (100) additive_expression -> . term MINUSMINUS
    (101) additive_expression -> . term PLUSPLUS
    (104) term -> . term mulop factor
    (105) term -> . factor
    (108) factor -> . LPAREN expression RPAREN
    (109) factor -> . var
    (110) factor -> . NUM
    (111) factor -> . boolean
    (112) factor -> . VARIABLE LPAREN args RPAREN
    (118) boolean -> . TRUE
    (119) boolean -> . FALSE

    VARIABLE        shift and go to state 86
    LPAREN          shift and go to state 72
    NUM             shift and go to state 87
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63

    expression                     shift and go to state 230
    var                            shift and go to state 84
    simple_expression              shift and go to state 85
    additive_expression            shift and go to state 69
    term                           shift and go to state 70
    factor                         shift and go to state 71
    boolean                        shift and go to state 88

state 210

    (88) var -> VARIABLE LBRACKET expression RBRACKET .

    MINUSMINUS      reduce using rule 88 (var -> VARIABLE LBRACKET expression RBRACKET .)
    PLUSPLUS        reduce using rule 88 (var -> VARIABLE LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 88 (var -> VARIABLE LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 88 (var -> VARIABLE LBRACKET expression RBRACKET .)
    LESS            reduce using rule 88 (var -> VARIABLE LBRACKET expression RBRACKET .)
    LESSEQUAL       reduce using rule 88 (var -> VARIABLE LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 88 (var -> VARIABLE LBRACKET expression RBRACKET .)
    GREATEREQUAL    reduce using rule 88 (var -> VARIABLE LBRACKET expression RBRACKET .)
    DEQUAL          reduce using rule 88 (var -> VARIABLE LBRACKET expression RBRACKET .)
    DISTINT         reduce using rule 88 (var -> VARIABLE LBRACKET expression RBRACKET .)
    ISEQUAL         reduce using rule 88 (var -> VARIABLE LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 88 (var -> VARIABLE LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 88 (var -> VARIABLE LBRACKET expression RBRACKET .)
    SEMI            reduce using rule 88 (var -> VARIABLE LBRACKET expression RBRACKET .)
    EQUAL           reduce using rule 88 (var -> VARIABLE LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 88 (var -> VARIABLE LBRACKET expression RBRACKET .)
    AND             reduce using rule 88 (var -> VARIABLE LBRACKET expression RBRACKET .)
    OR              reduce using rule 88 (var -> VARIABLE LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 88 (var -> VARIABLE LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 88 (var -> VARIABLE LBRACKET expression RBRACKET .)


state 211

    (46) var_declaration -> AMPERSANT VARIABLE EQUAL VARIABLE SEMI selection_stmt .

    CLOSETAG        reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE EQUAL VARIABLE SEMI selection_stmt .)
    VARIABLE        reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE EQUAL VARIABLE SEMI selection_stmt .)
    TIMESTIMES      reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE EQUAL VARIABLE SEMI selection_stmt .)
    AMPERSANT       reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE EQUAL VARIABLE SEMI selection_stmt .)
    FUNCTION        reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE EQUAL VARIABLE SEMI selection_stmt .)
    PRIVATE         reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE EQUAL VARIABLE SEMI selection_stmt .)
    PUBLIC          reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE EQUAL VARIABLE SEMI selection_stmt .)
    PROTECTED       reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE EQUAL VARIABLE SEMI selection_stmt .)
    REQUIRE         reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE EQUAL VARIABLE SEMI selection_stmt .)
    INCLUDE         reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE EQUAL VARIABLE SEMI selection_stmt .)
    CLASS           reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE EQUAL VARIABLE SEMI selection_stmt .)
    IF              reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE EQUAL VARIABLE SEMI selection_stmt .)
    SWITCH          reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE EQUAL VARIABLE SEMI selection_stmt .)
    CASE            reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE EQUAL VARIABLE SEMI selection_stmt .)
    DEFAULT         reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE EQUAL VARIABLE SEMI selection_stmt .)
    FOR             reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE EQUAL VARIABLE SEMI selection_stmt .)
    WHILE           reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE EQUAL VARIABLE SEMI selection_stmt .)
    DO              reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE EQUAL VARIABLE SEMI selection_stmt .)
    ID              reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE EQUAL VARIABLE SEMI selection_stmt .)
    COMMENTS        reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE EQUAL VARIABLE SEMI selection_stmt .)
    ECHO            reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE EQUAL VARIABLE SEMI selection_stmt .)
    SEMI            reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE EQUAL VARIABLE SEMI selection_stmt .)
    RBLOCK          reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE EQUAL VARIABLE SEMI selection_stmt .)
    LBLOCK          reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE EQUAL VARIABLE SEMI selection_stmt .)
    RETURN          reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE EQUAL VARIABLE SEMI selection_stmt .)
    LPAREN          reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE EQUAL VARIABLE SEMI selection_stmt .)
    NUM             reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE EQUAL VARIABLE SEMI selection_stmt .)
    TRUE            reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE EQUAL VARIABLE SEMI selection_stmt .)
    FALSE           reduce using rule 46 (var_declaration -> AMPERSANT VARIABLE EQUAL VARIABLE SEMI selection_stmt .)


state 212

    (50) fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .

    CLOSETAG        reduce using rule 50 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    VARIABLE        reduce using rule 50 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    TIMESTIMES      reduce using rule 50 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    AMPERSANT       reduce using rule 50 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    FUNCTION        reduce using rule 50 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    PRIVATE         reduce using rule 50 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    PUBLIC          reduce using rule 50 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    PROTECTED       reduce using rule 50 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    REQUIRE         reduce using rule 50 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    INCLUDE         reduce using rule 50 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    CLASS           reduce using rule 50 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    IF              reduce using rule 50 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    SWITCH          reduce using rule 50 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    CASE            reduce using rule 50 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    DEFAULT         reduce using rule 50 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    FOR             reduce using rule 50 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    WHILE           reduce using rule 50 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    DO              reduce using rule 50 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    ID              reduce using rule 50 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    COMMENTS        reduce using rule 50 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    ECHO            reduce using rule 50 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    SEMI            reduce using rule 50 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)
    RBLOCK          reduce using rule 50 (fun_declaration -> FUNCTION ID LPAREN params RPAREN compount_stmt .)


state 213

    (53) param_list -> param_list COMMA param_list .
    (53) param_list -> param_list . COMMA param_list

    COMMA           reduce using rule 53 (param_list -> param_list COMMA param_list .)
    RPAREN          reduce using rule 53 (param_list -> param_list COMMA param_list .)

  ! COMMA           [ shift and go to state 182 ]


state 214

    (56) param -> VARIABLE LBRACKET RBRACKET .

    COMMA           reduce using rule 56 (param -> VARIABLE LBRACKET RBRACKET .)
    RPAREN          reduce using rule 56 (param -> VARIABLE LBRACKET RBRACKET .)


state 215

    (121) constructor -> ID LPAREN . RPAREN
    (122) constructor -> ID LPAREN . args RPAREN
    (113) args -> . args_list
    (114) args -> . empty
    (115) args -> . VOID
    (116) args_list -> . args_list COMMA expression
    (117) args_list -> . expression
    (123) empty -> .
    (82) expression -> . var EQUAL expression
    (83) expression -> . simple_expression
    (84) expression -> . var EQUAL AMPERSANT VARIABLE
    (85) expression -> . expression AND expression
    (86) expression -> . expression OR expression
    (87) var -> . VARIABLE
    (88) var -> . VARIABLE LBRACKET expression RBRACKET
    (89) simple_expression -> . additive_expression relop additive_expression
    (90) simple_expression -> . additive_expression
    (98) additive_expression -> . additive_expression addop term
    (99) additive_expression -> . term
    (100) additive_expression -> . term MINUSMINUS
    (101) additive_expression -> . term PLUSPLUS
    (104) term -> . term mulop factor
    (105) term -> . factor
    (108) factor -> . LPAREN expression RPAREN
    (109) factor -> . var
    (110) factor -> . NUM
    (111) factor -> . boolean
    (112) factor -> . VARIABLE LPAREN args RPAREN
    (118) boolean -> . TRUE
    (119) boolean -> . FALSE

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 231
    VOID            shift and go to state 170
    VARIABLE        shift and go to state 86
    LPAREN          shift and go to state 72
    NUM             shift and go to state 87
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63

  ! RPAREN          [ reduce using rule 123 (empty -> .) ]

    args                           shift and go to state 232
    args_list                      shift and go to state 168
    empty                          shift and go to state 169
    expression                     shift and go to state 171
    var                            shift and go to state 84
    simple_expression              shift and go to state 85
    additive_expression            shift and go to state 69
    term                           shift and go to state 70
    factor                         shift and go to state 71
    boolean                        shift and go to state 88

state 216

    (120) typeclass -> ID VARIABLE EQUAL NEW constructor SEMI .

    CLOSETAG        reduce using rule 120 (typeclass -> ID VARIABLE EQUAL NEW constructor SEMI .)
    VARIABLE        reduce using rule 120 (typeclass -> ID VARIABLE EQUAL NEW constructor SEMI .)
    TIMESTIMES      reduce using rule 120 (typeclass -> ID VARIABLE EQUAL NEW constructor SEMI .)
    AMPERSANT       reduce using rule 120 (typeclass -> ID VARIABLE EQUAL NEW constructor SEMI .)
    FUNCTION        reduce using rule 120 (typeclass -> ID VARIABLE EQUAL NEW constructor SEMI .)
    PRIVATE         reduce using rule 120 (typeclass -> ID VARIABLE EQUAL NEW constructor SEMI .)
    PUBLIC          reduce using rule 120 (typeclass -> ID VARIABLE EQUAL NEW constructor SEMI .)
    PROTECTED       reduce using rule 120 (typeclass -> ID VARIABLE EQUAL NEW constructor SEMI .)
    REQUIRE         reduce using rule 120 (typeclass -> ID VARIABLE EQUAL NEW constructor SEMI .)
    INCLUDE         reduce using rule 120 (typeclass -> ID VARIABLE EQUAL NEW constructor SEMI .)
    CLASS           reduce using rule 120 (typeclass -> ID VARIABLE EQUAL NEW constructor SEMI .)
    IF              reduce using rule 120 (typeclass -> ID VARIABLE EQUAL NEW constructor SEMI .)
    SWITCH          reduce using rule 120 (typeclass -> ID VARIABLE EQUAL NEW constructor SEMI .)
    CASE            reduce using rule 120 (typeclass -> ID VARIABLE EQUAL NEW constructor SEMI .)
    DEFAULT         reduce using rule 120 (typeclass -> ID VARIABLE EQUAL NEW constructor SEMI .)
    FOR             reduce using rule 120 (typeclass -> ID VARIABLE EQUAL NEW constructor SEMI .)
    WHILE           reduce using rule 120 (typeclass -> ID VARIABLE EQUAL NEW constructor SEMI .)
    DO              reduce using rule 120 (typeclass -> ID VARIABLE EQUAL NEW constructor SEMI .)
    ID              reduce using rule 120 (typeclass -> ID VARIABLE EQUAL NEW constructor SEMI .)
    COMMENTS        reduce using rule 120 (typeclass -> ID VARIABLE EQUAL NEW constructor SEMI .)
    ECHO            reduce using rule 120 (typeclass -> ID VARIABLE EQUAL NEW constructor SEMI .)


state 217

    (27) attribute -> attribute area var_declaration .

    RBLOCK          reduce using rule 27 (attribute -> attribute area var_declaration .)
    PRIVATE         reduce using rule 27 (attribute -> attribute area var_declaration .)
    PUBLIC          reduce using rule 27 (attribute -> attribute area var_declaration .)
    PROTECTED       reduce using rule 27 (attribute -> attribute area var_declaration .)


state 218

    (29) attribute -> attribute area fun_declaration .

    RBLOCK          reduce using rule 29 (attribute -> attribute area fun_declaration .)
    PRIVATE         reduce using rule 29 (attribute -> attribute area fun_declaration .)
    PUBLIC          reduce using rule 29 (attribute -> attribute area fun_declaration .)
    PROTECTED       reduce using rule 29 (attribute -> attribute area fun_declaration .)


state 219

    (25) class_declaration -> CLASS ID EXTENDS ID LBLOCK attribute . RBLOCK
    (27) attribute -> attribute . area var_declaration
    (29) attribute -> attribute . area fun_declaration
    (32) area -> . PRIVATE
    (33) area -> . PUBLIC
    (34) area -> . PROTECTED

    RBLOCK          shift and go to state 233
    PRIVATE         shift and go to state 20
    PUBLIC          shift and go to state 21
    PROTECTED       shift and go to state 22

    area                           shift and go to state 189

state 220

    (26) class_declaration -> CLASS ID EXTENDS ID LBLOCK RBLOCK .

    CLOSETAG        reduce using rule 26 (class_declaration -> CLASS ID EXTENDS ID LBLOCK RBLOCK .)
    VARIABLE        reduce using rule 26 (class_declaration -> CLASS ID EXTENDS ID LBLOCK RBLOCK .)
    TIMESTIMES      reduce using rule 26 (class_declaration -> CLASS ID EXTENDS ID LBLOCK RBLOCK .)
    AMPERSANT       reduce using rule 26 (class_declaration -> CLASS ID EXTENDS ID LBLOCK RBLOCK .)
    FUNCTION        reduce using rule 26 (class_declaration -> CLASS ID EXTENDS ID LBLOCK RBLOCK .)
    PRIVATE         reduce using rule 26 (class_declaration -> CLASS ID EXTENDS ID LBLOCK RBLOCK .)
    PUBLIC          reduce using rule 26 (class_declaration -> CLASS ID EXTENDS ID LBLOCK RBLOCK .)
    PROTECTED       reduce using rule 26 (class_declaration -> CLASS ID EXTENDS ID LBLOCK RBLOCK .)
    REQUIRE         reduce using rule 26 (class_declaration -> CLASS ID EXTENDS ID LBLOCK RBLOCK .)
    INCLUDE         reduce using rule 26 (class_declaration -> CLASS ID EXTENDS ID LBLOCK RBLOCK .)
    CLASS           reduce using rule 26 (class_declaration -> CLASS ID EXTENDS ID LBLOCK RBLOCK .)
    IF              reduce using rule 26 (class_declaration -> CLASS ID EXTENDS ID LBLOCK RBLOCK .)
    SWITCH          reduce using rule 26 (class_declaration -> CLASS ID EXTENDS ID LBLOCK RBLOCK .)
    CASE            reduce using rule 26 (class_declaration -> CLASS ID EXTENDS ID LBLOCK RBLOCK .)
    DEFAULT         reduce using rule 26 (class_declaration -> CLASS ID EXTENDS ID LBLOCK RBLOCK .)
    FOR             reduce using rule 26 (class_declaration -> CLASS ID EXTENDS ID LBLOCK RBLOCK .)
    WHILE           reduce using rule 26 (class_declaration -> CLASS ID EXTENDS ID LBLOCK RBLOCK .)
    DO              reduce using rule 26 (class_declaration -> CLASS ID EXTENDS ID LBLOCK RBLOCK .)
    ID              reduce using rule 26 (class_declaration -> CLASS ID EXTENDS ID LBLOCK RBLOCK .)
    COMMENTS        reduce using rule 26 (class_declaration -> CLASS ID EXTENDS ID LBLOCK RBLOCK .)
    ECHO            reduce using rule 26 (class_declaration -> CLASS ID EXTENDS ID LBLOCK RBLOCK .)
    BREAK           reduce using rule 26 (class_declaration -> CLASS ID EXTENDS ID LBLOCK RBLOCK .)
    SEMI            reduce using rule 26 (class_declaration -> CLASS ID EXTENDS ID LBLOCK RBLOCK .)
    ELSE            reduce using rule 26 (class_declaration -> CLASS ID EXTENDS ID LBLOCK RBLOCK .)
    ELSEIF          reduce using rule 26 (class_declaration -> CLASS ID EXTENDS ID LBLOCK RBLOCK .)
    RBLOCK          reduce using rule 26 (class_declaration -> CLASS ID EXTENDS ID LBLOCK RBLOCK .)
    LBLOCK          reduce using rule 26 (class_declaration -> CLASS ID EXTENDS ID LBLOCK RBLOCK .)
    RETURN          reduce using rule 26 (class_declaration -> CLASS ID EXTENDS ID LBLOCK RBLOCK .)
    LPAREN          reduce using rule 26 (class_declaration -> CLASS ID EXTENDS ID LBLOCK RBLOCK .)
    NUM             reduce using rule 26 (class_declaration -> CLASS ID EXTENDS ID LBLOCK RBLOCK .)
    TRUE            reduce using rule 26 (class_declaration -> CLASS ID EXTENDS ID LBLOCK RBLOCK .)
    FALSE           reduce using rule 26 (class_declaration -> CLASS ID EXTENDS ID LBLOCK RBLOCK .)


state 221

    (71) selection_stmt -> IF LPAREN expression RPAREN statement selection .

    CLOSETAG        reduce using rule 71 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    VARIABLE        reduce using rule 71 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    TIMESTIMES      reduce using rule 71 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    AMPERSANT       reduce using rule 71 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    FUNCTION        reduce using rule 71 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    PRIVATE         reduce using rule 71 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    PUBLIC          reduce using rule 71 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    PROTECTED       reduce using rule 71 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    REQUIRE         reduce using rule 71 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    INCLUDE         reduce using rule 71 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    CLASS           reduce using rule 71 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    IF              reduce using rule 71 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    SWITCH          reduce using rule 71 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    CASE            reduce using rule 71 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    DEFAULT         reduce using rule 71 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    FOR             reduce using rule 71 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    WHILE           reduce using rule 71 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    DO              reduce using rule 71 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    ID              reduce using rule 71 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    COMMENTS        reduce using rule 71 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    ECHO            reduce using rule 71 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    BREAK           reduce using rule 71 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    SEMI            reduce using rule 71 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    ELSE            reduce using rule 71 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    ELSEIF          reduce using rule 71 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    RBLOCK          reduce using rule 71 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    LBLOCK          reduce using rule 71 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    RETURN          reduce using rule 71 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    LPAREN          reduce using rule 71 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    NUM             reduce using rule 71 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    TRUE            reduce using rule 71 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)
    FALSE           reduce using rule 71 (selection_stmt -> IF LPAREN expression RPAREN statement selection .)


state 222

    (72) selection -> ELSE . statement
    (62) statement -> . expression_stmt
    (63) statement -> . compount_stmt
    (64) statement -> . selection_stmt
    (65) statement -> . iteration_stmt
    (66) statement -> . return_stmt
    (67) statement -> . class_declaration
    (68) statement -> . echo_stmt
    (69) expression_stmt -> . expression SEMI
    (57) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (70) selection_stmt -> . IF LPAREN expression RPAREN statement
    (71) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (74) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (75) selection_stmt -> . CASE NUM COLON statement BREAK SEMI
    (76) selection_stmt -> . DEFAULT COLON statement BREAK SEMI
    (77) iteration_stmt -> . FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement
    (78) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (79) iteration_stmt -> . DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN
    (80) return_stmt -> . RETURN SEMI
    (81) return_stmt -> . RETURN expression SEMI
    (22) class_declaration -> . area CLASS ID LBLOCK attribute RBLOCK
    (23) class_declaration -> . CLASS ID LBLOCK attribute RBLOCK
    (24) class_declaration -> . CLASS ID LBLOCK RBLOCK
    (25) class_declaration -> . CLASS ID EXTENDS ID LBLOCK attribute RBLOCK
    (26) class_declaration -> . CLASS ID EXTENDS ID LBLOCK RBLOCK
    (14) echo_stmt -> . echo_stmt ECHO STRING SEMI
    (15) echo_stmt -> . echo_stmt ECHO VARIABLE SEMI
    (16) echo_stmt -> . empty
    (17) echo_stmt -> . echo_stmt ECHO NUM SEMI
    (18) echo_stmt -> . echo_stmt ECHO boolean SEMI
    (19) echo_stmt -> . echo_stmt ECHO fun_declaration SEMI
    (82) expression -> . var EQUAL expression
    (83) expression -> . simple_expression
    (84) expression -> . var EQUAL AMPERSANT VARIABLE
    (85) expression -> . expression AND expression
    (86) expression -> . expression OR expression
    (32) area -> . PRIVATE
    (33) area -> . PUBLIC
    (34) area -> . PROTECTED
    (123) empty -> .
    (87) var -> . VARIABLE
    (88) var -> . VARIABLE LBRACKET expression RBRACKET
    (89) simple_expression -> . additive_expression relop additive_expression
    (90) simple_expression -> . additive_expression
    (98) additive_expression -> . additive_expression addop term
    (99) additive_expression -> . term
    (100) additive_expression -> . term MINUSMINUS
    (101) additive_expression -> . term PLUSPLUS
    (104) term -> . term mulop factor
    (105) term -> . factor
    (108) factor -> . LPAREN expression RPAREN
    (109) factor -> . var
    (110) factor -> . NUM
    (111) factor -> . boolean
    (112) factor -> . VARIABLE LPAREN args RPAREN
    (118) boolean -> . TRUE
    (119) boolean -> . FALSE

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LBLOCK          shift and go to state 101
    IF              shift and go to state 27
    SWITCH          shift and go to state 28
    CASE            shift and go to state 29
    DEFAULT         shift and go to state 30
    FOR             shift and go to state 31
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    RETURN          shift and go to state 102
    CLASS           shift and go to state 25
    PRIVATE         shift and go to state 20
    PUBLIC          shift and go to state 21
    PROTECTED       shift and go to state 22
    ECHO            reduce using rule 123 (empty -> .)
    ELSE            reduce using rule 123 (empty -> .)
    ELSEIF          reduce using rule 123 (empty -> .)
    CLOSETAG        reduce using rule 123 (empty -> .)
    TIMESTIMES      reduce using rule 123 (empty -> .)
    AMPERSANT       reduce using rule 123 (empty -> .)
    FUNCTION        reduce using rule 123 (empty -> .)
    REQUIRE         reduce using rule 123 (empty -> .)
    INCLUDE         reduce using rule 123 (empty -> .)
    ID              reduce using rule 123 (empty -> .)
    COMMENTS        reduce using rule 123 (empty -> .)
    BREAK           reduce using rule 123 (empty -> .)
    SEMI            reduce using rule 123 (empty -> .)
    RBLOCK          reduce using rule 123 (empty -> .)
    VARIABLE        shift and go to state 86
    LPAREN          shift and go to state 72
    NUM             shift and go to state 87
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63

  ! VARIABLE        [ reduce using rule 123 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 123 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 123 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 123 (empty -> .) ]
  ! CLASS           [ reduce using rule 123 (empty -> .) ]
  ! IF              [ reduce using rule 123 (empty -> .) ]
  ! SWITCH          [ reduce using rule 123 (empty -> .) ]
  ! CASE            [ reduce using rule 123 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 123 (empty -> .) ]
  ! FOR             [ reduce using rule 123 (empty -> .) ]
  ! WHILE           [ reduce using rule 123 (empty -> .) ]
  ! DO              [ reduce using rule 123 (empty -> .) ]
  ! LBLOCK          [ reduce using rule 123 (empty -> .) ]
  ! RETURN          [ reduce using rule 123 (empty -> .) ]
  ! LPAREN          [ reduce using rule 123 (empty -> .) ]
  ! NUM             [ reduce using rule 123 (empty -> .) ]
  ! TRUE            [ reduce using rule 123 (empty -> .) ]
  ! FALSE           [ reduce using rule 123 (empty -> .) ]

    statement                      shift and go to state 234
    expression_stmt                shift and go to state 93
    compount_stmt                  shift and go to state 94
    selection_stmt                 shift and go to state 95
    iteration_stmt                 shift and go to state 96
    return_stmt                    shift and go to state 97
    class_declaration              shift and go to state 98
    echo_stmt                      shift and go to state 99
    expression                     shift and go to state 100
    var                            shift and go to state 84
    additive_expression            shift and go to state 69
    area                           shift and go to state 103
    empty                          shift and go to state 26
    boolean                        shift and go to state 88
    simple_expression              shift and go to state 85
    term                           shift and go to state 70
    factor                         shift and go to state 71

state 223

    (73) selection -> ELSEIF . statement selection
    (62) statement -> . expression_stmt
    (63) statement -> . compount_stmt
    (64) statement -> . selection_stmt
    (65) statement -> . iteration_stmt
    (66) statement -> . return_stmt
    (67) statement -> . class_declaration
    (68) statement -> . echo_stmt
    (69) expression_stmt -> . expression SEMI
    (57) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (70) selection_stmt -> . IF LPAREN expression RPAREN statement
    (71) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (74) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (75) selection_stmt -> . CASE NUM COLON statement BREAK SEMI
    (76) selection_stmt -> . DEFAULT COLON statement BREAK SEMI
    (77) iteration_stmt -> . FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement
    (78) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (79) iteration_stmt -> . DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN
    (80) return_stmt -> . RETURN SEMI
    (81) return_stmt -> . RETURN expression SEMI
    (22) class_declaration -> . area CLASS ID LBLOCK attribute RBLOCK
    (23) class_declaration -> . CLASS ID LBLOCK attribute RBLOCK
    (24) class_declaration -> . CLASS ID LBLOCK RBLOCK
    (25) class_declaration -> . CLASS ID EXTENDS ID LBLOCK attribute RBLOCK
    (26) class_declaration -> . CLASS ID EXTENDS ID LBLOCK RBLOCK
    (14) echo_stmt -> . echo_stmt ECHO STRING SEMI
    (15) echo_stmt -> . echo_stmt ECHO VARIABLE SEMI
    (16) echo_stmt -> . empty
    (17) echo_stmt -> . echo_stmt ECHO NUM SEMI
    (18) echo_stmt -> . echo_stmt ECHO boolean SEMI
    (19) echo_stmt -> . echo_stmt ECHO fun_declaration SEMI
    (82) expression -> . var EQUAL expression
    (83) expression -> . simple_expression
    (84) expression -> . var EQUAL AMPERSANT VARIABLE
    (85) expression -> . expression AND expression
    (86) expression -> . expression OR expression
    (32) area -> . PRIVATE
    (33) area -> . PUBLIC
    (34) area -> . PROTECTED
    (123) empty -> .
    (87) var -> . VARIABLE
    (88) var -> . VARIABLE LBRACKET expression RBRACKET
    (89) simple_expression -> . additive_expression relop additive_expression
    (90) simple_expression -> . additive_expression
    (98) additive_expression -> . additive_expression addop term
    (99) additive_expression -> . term
    (100) additive_expression -> . term MINUSMINUS
    (101) additive_expression -> . term PLUSPLUS
    (104) term -> . term mulop factor
    (105) term -> . factor
    (108) factor -> . LPAREN expression RPAREN
    (109) factor -> . var
    (110) factor -> . NUM
    (111) factor -> . boolean
    (112) factor -> . VARIABLE LPAREN args RPAREN
    (118) boolean -> . TRUE
    (119) boolean -> . FALSE

    LBLOCK          shift and go to state 101
    IF              shift and go to state 27
    SWITCH          shift and go to state 28
    CASE            shift and go to state 29
    DEFAULT         shift and go to state 30
    FOR             shift and go to state 31
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    RETURN          shift and go to state 102
    CLASS           shift and go to state 25
    PRIVATE         shift and go to state 20
    PUBLIC          shift and go to state 21
    PROTECTED       shift and go to state 22
    ECHO            reduce using rule 123 (empty -> .)
    ELSE            reduce using rule 123 (empty -> .)
    ELSEIF          reduce using rule 123 (empty -> .)
    VARIABLE        shift and go to state 86
    LPAREN          shift and go to state 72
    NUM             shift and go to state 87
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63

    statement                      shift and go to state 235
    expression_stmt                shift and go to state 93
    compount_stmt                  shift and go to state 94
    selection_stmt                 shift and go to state 95
    iteration_stmt                 shift and go to state 96
    return_stmt                    shift and go to state 97
    class_declaration              shift and go to state 98
    echo_stmt                      shift and go to state 99
    expression                     shift and go to state 100
    var                            shift and go to state 84
    additive_expression            shift and go to state 69
    area                           shift and go to state 103
    empty                          shift and go to state 26
    boolean                        shift and go to state 88
    simple_expression              shift and go to state 85
    term                           shift and go to state 70
    factor                         shift and go to state 71

state 224

    (84) expression -> var EQUAL AMPERSANT VARIABLE .

    RPAREN          reduce using rule 84 (expression -> var EQUAL AMPERSANT VARIABLE .)
    AND             reduce using rule 84 (expression -> var EQUAL AMPERSANT VARIABLE .)
    OR              reduce using rule 84 (expression -> var EQUAL AMPERSANT VARIABLE .)
    SEMI            reduce using rule 84 (expression -> var EQUAL AMPERSANT VARIABLE .)
    COMMA           reduce using rule 84 (expression -> var EQUAL AMPERSANT VARIABLE .)
    RBRACKET        reduce using rule 84 (expression -> var EQUAL AMPERSANT VARIABLE .)


state 225

    (75) selection_stmt -> CASE NUM COLON statement BREAK SEMI .

    CLOSETAG        reduce using rule 75 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    VARIABLE        reduce using rule 75 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    TIMESTIMES      reduce using rule 75 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    AMPERSANT       reduce using rule 75 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    FUNCTION        reduce using rule 75 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    PRIVATE         reduce using rule 75 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    PUBLIC          reduce using rule 75 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    PROTECTED       reduce using rule 75 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    REQUIRE         reduce using rule 75 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    INCLUDE         reduce using rule 75 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    CLASS           reduce using rule 75 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    IF              reduce using rule 75 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    SWITCH          reduce using rule 75 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    CASE            reduce using rule 75 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    DEFAULT         reduce using rule 75 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    FOR             reduce using rule 75 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    WHILE           reduce using rule 75 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    DO              reduce using rule 75 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    ID              reduce using rule 75 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    COMMENTS        reduce using rule 75 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    ECHO            reduce using rule 75 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    BREAK           reduce using rule 75 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    SEMI            reduce using rule 75 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    ELSE            reduce using rule 75 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    ELSEIF          reduce using rule 75 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    RBLOCK          reduce using rule 75 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    LBLOCK          reduce using rule 75 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    RETURN          reduce using rule 75 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    LPAREN          reduce using rule 75 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    NUM             reduce using rule 75 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    TRUE            reduce using rule 75 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)
    FALSE           reduce using rule 75 (selection_stmt -> CASE NUM COLON statement BREAK SEMI .)


state 226

    (57) compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt . statement_list echo_stmt RBLOCK
    (14) echo_stmt -> echo_stmt . ECHO STRING SEMI
    (15) echo_stmt -> echo_stmt . ECHO VARIABLE SEMI
    (17) echo_stmt -> echo_stmt . ECHO NUM SEMI
    (18) echo_stmt -> echo_stmt . ECHO boolean SEMI
    (19) echo_stmt -> echo_stmt . ECHO fun_declaration SEMI
    (60) statement_list -> . statement_list statement
    (61) statement_list -> . empty
    (123) empty -> .

  ! shift/reduce conflict for ECHO resolved as shift
    ECHO            shift and go to state 39
    LBLOCK          reduce using rule 123 (empty -> .)
    IF              reduce using rule 123 (empty -> .)
    SWITCH          reduce using rule 123 (empty -> .)
    CASE            reduce using rule 123 (empty -> .)
    DEFAULT         reduce using rule 123 (empty -> .)
    FOR             reduce using rule 123 (empty -> .)
    WHILE           reduce using rule 123 (empty -> .)
    DO              reduce using rule 123 (empty -> .)
    RETURN          reduce using rule 123 (empty -> .)
    CLASS           reduce using rule 123 (empty -> .)
    PRIVATE         reduce using rule 123 (empty -> .)
    PUBLIC          reduce using rule 123 (empty -> .)
    PROTECTED       reduce using rule 123 (empty -> .)
    VARIABLE        reduce using rule 123 (empty -> .)
    LPAREN          reduce using rule 123 (empty -> .)
    NUM             reduce using rule 123 (empty -> .)
    TRUE            reduce using rule 123 (empty -> .)
    FALSE           reduce using rule 123 (empty -> .)
    RBLOCK          reduce using rule 123 (empty -> .)

  ! ECHO            [ reduce using rule 123 (empty -> .) ]

    statement_list                 shift and go to state 236
    empty                          shift and go to state 237

state 227

    (58) local_declarations -> local_declarations var_declaration .

    VARIABLE        reduce using rule 58 (local_declarations -> local_declarations var_declaration .)
    TIMESTIMES      reduce using rule 58 (local_declarations -> local_declarations var_declaration .)
    AMPERSANT       reduce using rule 58 (local_declarations -> local_declarations var_declaration .)
    ECHO            reduce using rule 58 (local_declarations -> local_declarations var_declaration .)
    LBLOCK          reduce using rule 58 (local_declarations -> local_declarations var_declaration .)
    IF              reduce using rule 58 (local_declarations -> local_declarations var_declaration .)
    SWITCH          reduce using rule 58 (local_declarations -> local_declarations var_declaration .)
    CASE            reduce using rule 58 (local_declarations -> local_declarations var_declaration .)
    DEFAULT         reduce using rule 58 (local_declarations -> local_declarations var_declaration .)
    FOR             reduce using rule 58 (local_declarations -> local_declarations var_declaration .)
    WHILE           reduce using rule 58 (local_declarations -> local_declarations var_declaration .)
    DO              reduce using rule 58 (local_declarations -> local_declarations var_declaration .)
    RETURN          reduce using rule 58 (local_declarations -> local_declarations var_declaration .)
    CLASS           reduce using rule 58 (local_declarations -> local_declarations var_declaration .)
    PRIVATE         reduce using rule 58 (local_declarations -> local_declarations var_declaration .)
    PUBLIC          reduce using rule 58 (local_declarations -> local_declarations var_declaration .)
    PROTECTED       reduce using rule 58 (local_declarations -> local_declarations var_declaration .)
    LPAREN          reduce using rule 58 (local_declarations -> local_declarations var_declaration .)
    NUM             reduce using rule 58 (local_declarations -> local_declarations var_declaration .)
    TRUE            reduce using rule 58 (local_declarations -> local_declarations var_declaration .)
    FALSE           reduce using rule 58 (local_declarations -> local_declarations var_declaration .)
    RBLOCK          reduce using rule 58 (local_declarations -> local_declarations var_declaration .)


state 228

    (77) iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI . additive_expression RPAREN statement
    (98) additive_expression -> . additive_expression addop term
    (99) additive_expression -> . term
    (100) additive_expression -> . term MINUSMINUS
    (101) additive_expression -> . term PLUSPLUS
    (104) term -> . term mulop factor
    (105) term -> . factor
    (108) factor -> . LPAREN expression RPAREN
    (109) factor -> . var
    (110) factor -> . NUM
    (111) factor -> . boolean
    (112) factor -> . VARIABLE LPAREN args RPAREN
    (87) var -> . VARIABLE
    (88) var -> . VARIABLE LBRACKET expression RBRACKET
    (118) boolean -> . TRUE
    (119) boolean -> . FALSE

    LPAREN          shift and go to state 72
    NUM             shift and go to state 87
    VARIABLE        shift and go to state 176
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63

    additive_expression            shift and go to state 238
    term                           shift and go to state 70
    factor                         shift and go to state 71
    var                            shift and go to state 73
    boolean                        shift and go to state 88

state 229

    (79) iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE . LPAREN expression RPAREN

    LPAREN          shift and go to state 239


state 230

    (116) args_list -> args_list COMMA expression .
    (85) expression -> expression . AND expression
    (86) expression -> expression . OR expression

    COMMA           reduce using rule 116 (args_list -> args_list COMMA expression .)
    RPAREN          reduce using rule 116 (args_list -> args_list COMMA expression .)
    AND             shift and go to state 152
    OR              shift and go to state 153


state 231

    (121) constructor -> ID LPAREN RPAREN .

    SEMI            reduce using rule 121 (constructor -> ID LPAREN RPAREN .)


state 232

    (122) constructor -> ID LPAREN args . RPAREN

    RPAREN          shift and go to state 240


state 233

    (25) class_declaration -> CLASS ID EXTENDS ID LBLOCK attribute RBLOCK .

    CLOSETAG        reduce using rule 25 (class_declaration -> CLASS ID EXTENDS ID LBLOCK attribute RBLOCK .)
    VARIABLE        reduce using rule 25 (class_declaration -> CLASS ID EXTENDS ID LBLOCK attribute RBLOCK .)
    TIMESTIMES      reduce using rule 25 (class_declaration -> CLASS ID EXTENDS ID LBLOCK attribute RBLOCK .)
    AMPERSANT       reduce using rule 25 (class_declaration -> CLASS ID EXTENDS ID LBLOCK attribute RBLOCK .)
    FUNCTION        reduce using rule 25 (class_declaration -> CLASS ID EXTENDS ID LBLOCK attribute RBLOCK .)
    PRIVATE         reduce using rule 25 (class_declaration -> CLASS ID EXTENDS ID LBLOCK attribute RBLOCK .)
    PUBLIC          reduce using rule 25 (class_declaration -> CLASS ID EXTENDS ID LBLOCK attribute RBLOCK .)
    PROTECTED       reduce using rule 25 (class_declaration -> CLASS ID EXTENDS ID LBLOCK attribute RBLOCK .)
    REQUIRE         reduce using rule 25 (class_declaration -> CLASS ID EXTENDS ID LBLOCK attribute RBLOCK .)
    INCLUDE         reduce using rule 25 (class_declaration -> CLASS ID EXTENDS ID LBLOCK attribute RBLOCK .)
    CLASS           reduce using rule 25 (class_declaration -> CLASS ID EXTENDS ID LBLOCK attribute RBLOCK .)
    IF              reduce using rule 25 (class_declaration -> CLASS ID EXTENDS ID LBLOCK attribute RBLOCK .)
    SWITCH          reduce using rule 25 (class_declaration -> CLASS ID EXTENDS ID LBLOCK attribute RBLOCK .)
    CASE            reduce using rule 25 (class_declaration -> CLASS ID EXTENDS ID LBLOCK attribute RBLOCK .)
    DEFAULT         reduce using rule 25 (class_declaration -> CLASS ID EXTENDS ID LBLOCK attribute RBLOCK .)
    FOR             reduce using rule 25 (class_declaration -> CLASS ID EXTENDS ID LBLOCK attribute RBLOCK .)
    WHILE           reduce using rule 25 (class_declaration -> CLASS ID EXTENDS ID LBLOCK attribute RBLOCK .)
    DO              reduce using rule 25 (class_declaration -> CLASS ID EXTENDS ID LBLOCK attribute RBLOCK .)
    ID              reduce using rule 25 (class_declaration -> CLASS ID EXTENDS ID LBLOCK attribute RBLOCK .)
    COMMENTS        reduce using rule 25 (class_declaration -> CLASS ID EXTENDS ID LBLOCK attribute RBLOCK .)
    ECHO            reduce using rule 25 (class_declaration -> CLASS ID EXTENDS ID LBLOCK attribute RBLOCK .)
    BREAK           reduce using rule 25 (class_declaration -> CLASS ID EXTENDS ID LBLOCK attribute RBLOCK .)
    SEMI            reduce using rule 25 (class_declaration -> CLASS ID EXTENDS ID LBLOCK attribute RBLOCK .)
    ELSE            reduce using rule 25 (class_declaration -> CLASS ID EXTENDS ID LBLOCK attribute RBLOCK .)
    ELSEIF          reduce using rule 25 (class_declaration -> CLASS ID EXTENDS ID LBLOCK attribute RBLOCK .)
    RBLOCK          reduce using rule 25 (class_declaration -> CLASS ID EXTENDS ID LBLOCK attribute RBLOCK .)
    LBLOCK          reduce using rule 25 (class_declaration -> CLASS ID EXTENDS ID LBLOCK attribute RBLOCK .)
    RETURN          reduce using rule 25 (class_declaration -> CLASS ID EXTENDS ID LBLOCK attribute RBLOCK .)
    LPAREN          reduce using rule 25 (class_declaration -> CLASS ID EXTENDS ID LBLOCK attribute RBLOCK .)
    NUM             reduce using rule 25 (class_declaration -> CLASS ID EXTENDS ID LBLOCK attribute RBLOCK .)
    TRUE            reduce using rule 25 (class_declaration -> CLASS ID EXTENDS ID LBLOCK attribute RBLOCK .)
    FALSE           reduce using rule 25 (class_declaration -> CLASS ID EXTENDS ID LBLOCK attribute RBLOCK .)


state 234

    (72) selection -> ELSE statement .

    ELSE            reduce using rule 72 (selection -> ELSE statement .)
    ELSEIF          reduce using rule 72 (selection -> ELSE statement .)
    CLOSETAG        reduce using rule 72 (selection -> ELSE statement .)
    VARIABLE        reduce using rule 72 (selection -> ELSE statement .)
    TIMESTIMES      reduce using rule 72 (selection -> ELSE statement .)
    AMPERSANT       reduce using rule 72 (selection -> ELSE statement .)
    FUNCTION        reduce using rule 72 (selection -> ELSE statement .)
    PRIVATE         reduce using rule 72 (selection -> ELSE statement .)
    PUBLIC          reduce using rule 72 (selection -> ELSE statement .)
    PROTECTED       reduce using rule 72 (selection -> ELSE statement .)
    REQUIRE         reduce using rule 72 (selection -> ELSE statement .)
    INCLUDE         reduce using rule 72 (selection -> ELSE statement .)
    CLASS           reduce using rule 72 (selection -> ELSE statement .)
    IF              reduce using rule 72 (selection -> ELSE statement .)
    SWITCH          reduce using rule 72 (selection -> ELSE statement .)
    CASE            reduce using rule 72 (selection -> ELSE statement .)
    DEFAULT         reduce using rule 72 (selection -> ELSE statement .)
    FOR             reduce using rule 72 (selection -> ELSE statement .)
    WHILE           reduce using rule 72 (selection -> ELSE statement .)
    DO              reduce using rule 72 (selection -> ELSE statement .)
    ID              reduce using rule 72 (selection -> ELSE statement .)
    COMMENTS        reduce using rule 72 (selection -> ELSE statement .)
    ECHO            reduce using rule 72 (selection -> ELSE statement .)
    BREAK           reduce using rule 72 (selection -> ELSE statement .)
    SEMI            reduce using rule 72 (selection -> ELSE statement .)
    RBLOCK          reduce using rule 72 (selection -> ELSE statement .)
    LBLOCK          reduce using rule 72 (selection -> ELSE statement .)
    RETURN          reduce using rule 72 (selection -> ELSE statement .)
    LPAREN          reduce using rule 72 (selection -> ELSE statement .)
    NUM             reduce using rule 72 (selection -> ELSE statement .)
    TRUE            reduce using rule 72 (selection -> ELSE statement .)
    FALSE           reduce using rule 72 (selection -> ELSE statement .)


state 235

    (73) selection -> ELSEIF statement . selection
    (72) selection -> . ELSE statement
    (73) selection -> . ELSEIF statement selection

    ELSE            shift and go to state 222
    ELSEIF          shift and go to state 223

    selection                      shift and go to state 241

state 236

    (57) compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list . echo_stmt RBLOCK
    (60) statement_list -> statement_list . statement
    (14) echo_stmt -> . echo_stmt ECHO STRING SEMI
    (15) echo_stmt -> . echo_stmt ECHO VARIABLE SEMI
    (16) echo_stmt -> . empty
    (17) echo_stmt -> . echo_stmt ECHO NUM SEMI
    (18) echo_stmt -> . echo_stmt ECHO boolean SEMI
    (19) echo_stmt -> . echo_stmt ECHO fun_declaration SEMI
    (62) statement -> . expression_stmt
    (63) statement -> . compount_stmt
    (64) statement -> . selection_stmt
    (65) statement -> . iteration_stmt
    (66) statement -> . return_stmt
    (67) statement -> . class_declaration
    (68) statement -> . echo_stmt
    (123) empty -> .
    (69) expression_stmt -> . expression SEMI
    (57) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (70) selection_stmt -> . IF LPAREN expression RPAREN statement
    (71) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (74) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (75) selection_stmt -> . CASE NUM COLON statement BREAK SEMI
    (76) selection_stmt -> . DEFAULT COLON statement BREAK SEMI
    (77) iteration_stmt -> . FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement
    (78) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (79) iteration_stmt -> . DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN
    (80) return_stmt -> . RETURN SEMI
    (81) return_stmt -> . RETURN expression SEMI
    (22) class_declaration -> . area CLASS ID LBLOCK attribute RBLOCK
    (23) class_declaration -> . CLASS ID LBLOCK attribute RBLOCK
    (24) class_declaration -> . CLASS ID LBLOCK RBLOCK
    (25) class_declaration -> . CLASS ID EXTENDS ID LBLOCK attribute RBLOCK
    (26) class_declaration -> . CLASS ID EXTENDS ID LBLOCK RBLOCK
    (82) expression -> . var EQUAL expression
    (83) expression -> . simple_expression
    (84) expression -> . var EQUAL AMPERSANT VARIABLE
    (85) expression -> . expression AND expression
    (86) expression -> . expression OR expression
    (32) area -> . PRIVATE
    (33) area -> . PUBLIC
    (34) area -> . PROTECTED
    (87) var -> . VARIABLE
    (88) var -> . VARIABLE LBRACKET expression RBRACKET
    (89) simple_expression -> . additive_expression relop additive_expression
    (90) simple_expression -> . additive_expression
    (98) additive_expression -> . additive_expression addop term
    (99) additive_expression -> . term
    (100) additive_expression -> . term MINUSMINUS
    (101) additive_expression -> . term PLUSPLUS
    (104) term -> . term mulop factor
    (105) term -> . factor
    (108) factor -> . LPAREN expression RPAREN
    (109) factor -> . var
    (110) factor -> . NUM
    (111) factor -> . boolean
    (112) factor -> . VARIABLE LPAREN args RPAREN
    (118) boolean -> . TRUE
    (119) boolean -> . FALSE

  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    RBLOCK          reduce using rule 123 (empty -> .)
    ECHO            reduce using rule 123 (empty -> .)
    LBLOCK          shift and go to state 101
    IF              shift and go to state 27
    SWITCH          shift and go to state 28
    CASE            shift and go to state 29
    DEFAULT         shift and go to state 30
    FOR             shift and go to state 31
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    RETURN          shift and go to state 102
    CLASS           shift and go to state 25
    PRIVATE         shift and go to state 20
    PUBLIC          shift and go to state 21
    PROTECTED       shift and go to state 22
    VARIABLE        shift and go to state 86
    LPAREN          shift and go to state 72
    NUM             shift and go to state 87
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63

  ! LBLOCK          [ reduce using rule 123 (empty -> .) ]
  ! IF              [ reduce using rule 123 (empty -> .) ]
  ! SWITCH          [ reduce using rule 123 (empty -> .) ]
  ! CASE            [ reduce using rule 123 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 123 (empty -> .) ]
  ! FOR             [ reduce using rule 123 (empty -> .) ]
  ! WHILE           [ reduce using rule 123 (empty -> .) ]
  ! DO              [ reduce using rule 123 (empty -> .) ]
  ! RETURN          [ reduce using rule 123 (empty -> .) ]
  ! CLASS           [ reduce using rule 123 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 123 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 123 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 123 (empty -> .) ]
  ! VARIABLE        [ reduce using rule 123 (empty -> .) ]
  ! LPAREN          [ reduce using rule 123 (empty -> .) ]
  ! NUM             [ reduce using rule 123 (empty -> .) ]
  ! TRUE            [ reduce using rule 123 (empty -> .) ]
  ! FALSE           [ reduce using rule 123 (empty -> .) ]

    echo_stmt                      shift and go to state 242
    statement                      shift and go to state 243
    empty                          shift and go to state 26
    boolean                        shift and go to state 88
    expression_stmt                shift and go to state 93
    compount_stmt                  shift and go to state 94
    selection_stmt                 shift and go to state 95
    iteration_stmt                 shift and go to state 96
    return_stmt                    shift and go to state 97
    class_declaration              shift and go to state 98
    expression                     shift and go to state 100
    var                            shift and go to state 84
    additive_expression            shift and go to state 69
    area                           shift and go to state 103
    simple_expression              shift and go to state 85
    term                           shift and go to state 70
    factor                         shift and go to state 71

state 237

    (61) statement_list -> empty .

    LBLOCK          reduce using rule 61 (statement_list -> empty .)
    IF              reduce using rule 61 (statement_list -> empty .)
    SWITCH          reduce using rule 61 (statement_list -> empty .)
    CASE            reduce using rule 61 (statement_list -> empty .)
    DEFAULT         reduce using rule 61 (statement_list -> empty .)
    FOR             reduce using rule 61 (statement_list -> empty .)
    WHILE           reduce using rule 61 (statement_list -> empty .)
    DO              reduce using rule 61 (statement_list -> empty .)
    RETURN          reduce using rule 61 (statement_list -> empty .)
    CLASS           reduce using rule 61 (statement_list -> empty .)
    PRIVATE         reduce using rule 61 (statement_list -> empty .)
    PUBLIC          reduce using rule 61 (statement_list -> empty .)
    PROTECTED       reduce using rule 61 (statement_list -> empty .)
    VARIABLE        reduce using rule 61 (statement_list -> empty .)
    LPAREN          reduce using rule 61 (statement_list -> empty .)
    NUM             reduce using rule 61 (statement_list -> empty .)
    TRUE            reduce using rule 61 (statement_list -> empty .)
    FALSE           reduce using rule 61 (statement_list -> empty .)
    RBLOCK          reduce using rule 61 (statement_list -> empty .)
    ECHO            reduce using rule 61 (statement_list -> empty .)


state 238

    (77) iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression . RPAREN statement
    (98) additive_expression -> additive_expression . addop term
    (102) addop -> . PLUS
    (103) addop -> . MINUS

    RPAREN          shift and go to state 244
    PLUS            shift and go to state 128
    MINUS           shift and go to state 129

    addop                          shift and go to state 120

state 239

    (79) iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN . expression RPAREN
    (82) expression -> . var EQUAL expression
    (83) expression -> . simple_expression
    (84) expression -> . var EQUAL AMPERSANT VARIABLE
    (85) expression -> . expression AND expression
    (86) expression -> . expression OR expression
    (87) var -> . VARIABLE
    (88) var -> . VARIABLE LBRACKET expression RBRACKET
    (89) simple_expression -> . additive_expression relop additive_expression
    (90) simple_expression -> . additive_expression
    (98) additive_expression -> . additive_expression addop term
    (99) additive_expression -> . term
    (100) additive_expression -> . term MINUSMINUS
    (101) additive_expression -> . term PLUSPLUS
    (104) term -> . term mulop factor
    (105) term -> . factor
    (108) factor -> . LPAREN expression RPAREN
    (109) factor -> . var
    (110) factor -> . NUM
    (111) factor -> . boolean
    (112) factor -> . VARIABLE LPAREN args RPAREN
    (118) boolean -> . TRUE
    (119) boolean -> . FALSE

    VARIABLE        shift and go to state 86
    LPAREN          shift and go to state 72
    NUM             shift and go to state 87
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63

    expression                     shift and go to state 245
    var                            shift and go to state 84
    simple_expression              shift and go to state 85
    additive_expression            shift and go to state 69
    term                           shift and go to state 70
    factor                         shift and go to state 71
    boolean                        shift and go to state 88

state 240

    (122) constructor -> ID LPAREN args RPAREN .

    SEMI            reduce using rule 122 (constructor -> ID LPAREN args RPAREN .)


state 241

    (73) selection -> ELSEIF statement selection .

    ELSE            reduce using rule 73 (selection -> ELSEIF statement selection .)
    ELSEIF          reduce using rule 73 (selection -> ELSEIF statement selection .)
    CLOSETAG        reduce using rule 73 (selection -> ELSEIF statement selection .)
    VARIABLE        reduce using rule 73 (selection -> ELSEIF statement selection .)
    TIMESTIMES      reduce using rule 73 (selection -> ELSEIF statement selection .)
    AMPERSANT       reduce using rule 73 (selection -> ELSEIF statement selection .)
    FUNCTION        reduce using rule 73 (selection -> ELSEIF statement selection .)
    PRIVATE         reduce using rule 73 (selection -> ELSEIF statement selection .)
    PUBLIC          reduce using rule 73 (selection -> ELSEIF statement selection .)
    PROTECTED       reduce using rule 73 (selection -> ELSEIF statement selection .)
    REQUIRE         reduce using rule 73 (selection -> ELSEIF statement selection .)
    INCLUDE         reduce using rule 73 (selection -> ELSEIF statement selection .)
    CLASS           reduce using rule 73 (selection -> ELSEIF statement selection .)
    IF              reduce using rule 73 (selection -> ELSEIF statement selection .)
    SWITCH          reduce using rule 73 (selection -> ELSEIF statement selection .)
    CASE            reduce using rule 73 (selection -> ELSEIF statement selection .)
    DEFAULT         reduce using rule 73 (selection -> ELSEIF statement selection .)
    FOR             reduce using rule 73 (selection -> ELSEIF statement selection .)
    WHILE           reduce using rule 73 (selection -> ELSEIF statement selection .)
    DO              reduce using rule 73 (selection -> ELSEIF statement selection .)
    ID              reduce using rule 73 (selection -> ELSEIF statement selection .)
    COMMENTS        reduce using rule 73 (selection -> ELSEIF statement selection .)
    ECHO            reduce using rule 73 (selection -> ELSEIF statement selection .)
    BREAK           reduce using rule 73 (selection -> ELSEIF statement selection .)
    SEMI            reduce using rule 73 (selection -> ELSEIF statement selection .)
    RBLOCK          reduce using rule 73 (selection -> ELSEIF statement selection .)
    LBLOCK          reduce using rule 73 (selection -> ELSEIF statement selection .)
    RETURN          reduce using rule 73 (selection -> ELSEIF statement selection .)
    LPAREN          reduce using rule 73 (selection -> ELSEIF statement selection .)
    NUM             reduce using rule 73 (selection -> ELSEIF statement selection .)
    TRUE            reduce using rule 73 (selection -> ELSEIF statement selection .)
    FALSE           reduce using rule 73 (selection -> ELSEIF statement selection .)


state 242

    (57) compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt . RBLOCK
    (14) echo_stmt -> echo_stmt . ECHO STRING SEMI
    (15) echo_stmt -> echo_stmt . ECHO VARIABLE SEMI
    (17) echo_stmt -> echo_stmt . ECHO NUM SEMI
    (18) echo_stmt -> echo_stmt . ECHO boolean SEMI
    (19) echo_stmt -> echo_stmt . ECHO fun_declaration SEMI
    (68) statement -> echo_stmt .

  ! shift/reduce conflict for RBLOCK resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
    RBLOCK          shift and go to state 246
    ECHO            shift and go to state 39
    LBLOCK          reduce using rule 68 (statement -> echo_stmt .)
    IF              reduce using rule 68 (statement -> echo_stmt .)
    SWITCH          reduce using rule 68 (statement -> echo_stmt .)
    CASE            reduce using rule 68 (statement -> echo_stmt .)
    DEFAULT         reduce using rule 68 (statement -> echo_stmt .)
    FOR             reduce using rule 68 (statement -> echo_stmt .)
    WHILE           reduce using rule 68 (statement -> echo_stmt .)
    DO              reduce using rule 68 (statement -> echo_stmt .)
    RETURN          reduce using rule 68 (statement -> echo_stmt .)
    CLASS           reduce using rule 68 (statement -> echo_stmt .)
    PRIVATE         reduce using rule 68 (statement -> echo_stmt .)
    PUBLIC          reduce using rule 68 (statement -> echo_stmt .)
    PROTECTED       reduce using rule 68 (statement -> echo_stmt .)
    VARIABLE        reduce using rule 68 (statement -> echo_stmt .)
    LPAREN          reduce using rule 68 (statement -> echo_stmt .)
    NUM             reduce using rule 68 (statement -> echo_stmt .)
    TRUE            reduce using rule 68 (statement -> echo_stmt .)
    FALSE           reduce using rule 68 (statement -> echo_stmt .)

  ! RBLOCK          [ reduce using rule 68 (statement -> echo_stmt .) ]
  ! ECHO            [ reduce using rule 68 (statement -> echo_stmt .) ]


state 243

    (60) statement_list -> statement_list statement .

    LBLOCK          reduce using rule 60 (statement_list -> statement_list statement .)
    IF              reduce using rule 60 (statement_list -> statement_list statement .)
    SWITCH          reduce using rule 60 (statement_list -> statement_list statement .)
    CASE            reduce using rule 60 (statement_list -> statement_list statement .)
    DEFAULT         reduce using rule 60 (statement_list -> statement_list statement .)
    FOR             reduce using rule 60 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 60 (statement_list -> statement_list statement .)
    DO              reduce using rule 60 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 60 (statement_list -> statement_list statement .)
    CLASS           reduce using rule 60 (statement_list -> statement_list statement .)
    PRIVATE         reduce using rule 60 (statement_list -> statement_list statement .)
    PUBLIC          reduce using rule 60 (statement_list -> statement_list statement .)
    PROTECTED       reduce using rule 60 (statement_list -> statement_list statement .)
    VARIABLE        reduce using rule 60 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 60 (statement_list -> statement_list statement .)
    NUM             reduce using rule 60 (statement_list -> statement_list statement .)
    TRUE            reduce using rule 60 (statement_list -> statement_list statement .)
    FALSE           reduce using rule 60 (statement_list -> statement_list statement .)
    RBLOCK          reduce using rule 60 (statement_list -> statement_list statement .)
    ECHO            reduce using rule 60 (statement_list -> statement_list statement .)


state 244

    (77) iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN . statement
    (62) statement -> . expression_stmt
    (63) statement -> . compount_stmt
    (64) statement -> . selection_stmt
    (65) statement -> . iteration_stmt
    (66) statement -> . return_stmt
    (67) statement -> . class_declaration
    (68) statement -> . echo_stmt
    (69) expression_stmt -> . expression SEMI
    (57) compount_stmt -> . LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK
    (70) selection_stmt -> . IF LPAREN expression RPAREN statement
    (71) selection_stmt -> . IF LPAREN expression RPAREN statement selection
    (74) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (75) selection_stmt -> . CASE NUM COLON statement BREAK SEMI
    (76) selection_stmt -> . DEFAULT COLON statement BREAK SEMI
    (77) iteration_stmt -> . FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement
    (78) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (79) iteration_stmt -> . DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN
    (80) return_stmt -> . RETURN SEMI
    (81) return_stmt -> . RETURN expression SEMI
    (22) class_declaration -> . area CLASS ID LBLOCK attribute RBLOCK
    (23) class_declaration -> . CLASS ID LBLOCK attribute RBLOCK
    (24) class_declaration -> . CLASS ID LBLOCK RBLOCK
    (25) class_declaration -> . CLASS ID EXTENDS ID LBLOCK attribute RBLOCK
    (26) class_declaration -> . CLASS ID EXTENDS ID LBLOCK RBLOCK
    (14) echo_stmt -> . echo_stmt ECHO STRING SEMI
    (15) echo_stmt -> . echo_stmt ECHO VARIABLE SEMI
    (16) echo_stmt -> . empty
    (17) echo_stmt -> . echo_stmt ECHO NUM SEMI
    (18) echo_stmt -> . echo_stmt ECHO boolean SEMI
    (19) echo_stmt -> . echo_stmt ECHO fun_declaration SEMI
    (82) expression -> . var EQUAL expression
    (83) expression -> . simple_expression
    (84) expression -> . var EQUAL AMPERSANT VARIABLE
    (85) expression -> . expression AND expression
    (86) expression -> . expression OR expression
    (32) area -> . PRIVATE
    (33) area -> . PUBLIC
    (34) area -> . PROTECTED
    (123) empty -> .
    (87) var -> . VARIABLE
    (88) var -> . VARIABLE LBRACKET expression RBRACKET
    (89) simple_expression -> . additive_expression relop additive_expression
    (90) simple_expression -> . additive_expression
    (98) additive_expression -> . additive_expression addop term
    (99) additive_expression -> . term
    (100) additive_expression -> . term MINUSMINUS
    (101) additive_expression -> . term PLUSPLUS
    (104) term -> . term mulop factor
    (105) term -> . factor
    (108) factor -> . LPAREN expression RPAREN
    (109) factor -> . var
    (110) factor -> . NUM
    (111) factor -> . boolean
    (112) factor -> . VARIABLE LPAREN args RPAREN
    (118) boolean -> . TRUE
    (119) boolean -> . FALSE

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LBLOCK          shift and go to state 101
    IF              shift and go to state 27
    SWITCH          shift and go to state 28
    CASE            shift and go to state 29
    DEFAULT         shift and go to state 30
    FOR             shift and go to state 31
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    RETURN          shift and go to state 102
    CLASS           shift and go to state 25
    PRIVATE         shift and go to state 20
    PUBLIC          shift and go to state 21
    PROTECTED       shift and go to state 22
    ECHO            reduce using rule 123 (empty -> .)
    ELSE            reduce using rule 123 (empty -> .)
    ELSEIF          reduce using rule 123 (empty -> .)
    CLOSETAG        reduce using rule 123 (empty -> .)
    TIMESTIMES      reduce using rule 123 (empty -> .)
    AMPERSANT       reduce using rule 123 (empty -> .)
    FUNCTION        reduce using rule 123 (empty -> .)
    REQUIRE         reduce using rule 123 (empty -> .)
    INCLUDE         reduce using rule 123 (empty -> .)
    ID              reduce using rule 123 (empty -> .)
    COMMENTS        reduce using rule 123 (empty -> .)
    BREAK           reduce using rule 123 (empty -> .)
    SEMI            reduce using rule 123 (empty -> .)
    RBLOCK          reduce using rule 123 (empty -> .)
    VARIABLE        shift and go to state 86
    LPAREN          shift and go to state 72
    NUM             shift and go to state 87
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63

  ! VARIABLE        [ reduce using rule 123 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 123 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 123 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 123 (empty -> .) ]
  ! CLASS           [ reduce using rule 123 (empty -> .) ]
  ! IF              [ reduce using rule 123 (empty -> .) ]
  ! SWITCH          [ reduce using rule 123 (empty -> .) ]
  ! CASE            [ reduce using rule 123 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 123 (empty -> .) ]
  ! FOR             [ reduce using rule 123 (empty -> .) ]
  ! WHILE           [ reduce using rule 123 (empty -> .) ]
  ! DO              [ reduce using rule 123 (empty -> .) ]
  ! LBLOCK          [ reduce using rule 123 (empty -> .) ]
  ! RETURN          [ reduce using rule 123 (empty -> .) ]
  ! LPAREN          [ reduce using rule 123 (empty -> .) ]
  ! NUM             [ reduce using rule 123 (empty -> .) ]
  ! TRUE            [ reduce using rule 123 (empty -> .) ]
  ! FALSE           [ reduce using rule 123 (empty -> .) ]

    expression                     shift and go to state 100
    additive_expression            shift and go to state 69
    statement                      shift and go to state 247
    expression_stmt                shift and go to state 93
    compount_stmt                  shift and go to state 94
    selection_stmt                 shift and go to state 95
    iteration_stmt                 shift and go to state 96
    return_stmt                    shift and go to state 97
    class_declaration              shift and go to state 98
    echo_stmt                      shift and go to state 99
    var                            shift and go to state 84
    area                           shift and go to state 103
    empty                          shift and go to state 26
    boolean                        shift and go to state 88
    simple_expression              shift and go to state 85
    term                           shift and go to state 70
    factor                         shift and go to state 71

state 245

    (79) iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression . RPAREN
    (85) expression -> expression . AND expression
    (86) expression -> expression . OR expression

    RPAREN          shift and go to state 248
    AND             shift and go to state 152
    OR              shift and go to state 153


state 246

    (57) compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .

    BREAK           reduce using rule 57 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    SEMI            reduce using rule 57 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    ELSE            reduce using rule 57 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    ELSEIF          reduce using rule 57 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    CLOSETAG        reduce using rule 57 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    VARIABLE        reduce using rule 57 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    TIMESTIMES      reduce using rule 57 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    AMPERSANT       reduce using rule 57 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    FUNCTION        reduce using rule 57 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    PRIVATE         reduce using rule 57 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    PUBLIC          reduce using rule 57 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    PROTECTED       reduce using rule 57 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    REQUIRE         reduce using rule 57 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    INCLUDE         reduce using rule 57 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    CLASS           reduce using rule 57 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    IF              reduce using rule 57 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    SWITCH          reduce using rule 57 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    CASE            reduce using rule 57 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    DEFAULT         reduce using rule 57 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    FOR             reduce using rule 57 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    WHILE           reduce using rule 57 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    DO              reduce using rule 57 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    ID              reduce using rule 57 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    COMMENTS        reduce using rule 57 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    ECHO            reduce using rule 57 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    RBLOCK          reduce using rule 57 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    LBLOCK          reduce using rule 57 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    RETURN          reduce using rule 57 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    LPAREN          reduce using rule 57 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    NUM             reduce using rule 57 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    TRUE            reduce using rule 57 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)
    FALSE           reduce using rule 57 (compount_stmt -> LBLOCK echo_stmt local_declarations echo_stmt statement_list echo_stmt RBLOCK .)


state 247

    (77) iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .

    CLOSETAG        reduce using rule 77 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    VARIABLE        reduce using rule 77 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    TIMESTIMES      reduce using rule 77 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    AMPERSANT       reduce using rule 77 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    FUNCTION        reduce using rule 77 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    PRIVATE         reduce using rule 77 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    PUBLIC          reduce using rule 77 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    PROTECTED       reduce using rule 77 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    REQUIRE         reduce using rule 77 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    INCLUDE         reduce using rule 77 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    CLASS           reduce using rule 77 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    IF              reduce using rule 77 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    SWITCH          reduce using rule 77 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    CASE            reduce using rule 77 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    DEFAULT         reduce using rule 77 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    FOR             reduce using rule 77 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    WHILE           reduce using rule 77 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    DO              reduce using rule 77 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    ID              reduce using rule 77 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    COMMENTS        reduce using rule 77 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    ECHO            reduce using rule 77 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    BREAK           reduce using rule 77 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    SEMI            reduce using rule 77 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    ELSE            reduce using rule 77 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    ELSEIF          reduce using rule 77 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    RBLOCK          reduce using rule 77 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    LBLOCK          reduce using rule 77 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    RETURN          reduce using rule 77 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    LPAREN          reduce using rule 77 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    NUM             reduce using rule 77 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    TRUE            reduce using rule 77 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)
    FALSE           reduce using rule 77 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN statement .)


state 248

    (79) iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .

    CLOSETAG        reduce using rule 79 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    VARIABLE        reduce using rule 79 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    TIMESTIMES      reduce using rule 79 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    AMPERSANT       reduce using rule 79 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    FUNCTION        reduce using rule 79 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    PRIVATE         reduce using rule 79 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    PUBLIC          reduce using rule 79 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    PROTECTED       reduce using rule 79 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    REQUIRE         reduce using rule 79 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    INCLUDE         reduce using rule 79 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    CLASS           reduce using rule 79 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    IF              reduce using rule 79 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    SWITCH          reduce using rule 79 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    CASE            reduce using rule 79 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    DEFAULT         reduce using rule 79 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    FOR             reduce using rule 79 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    WHILE           reduce using rule 79 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    DO              reduce using rule 79 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    ID              reduce using rule 79 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    COMMENTS        reduce using rule 79 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    ECHO            reduce using rule 79 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    BREAK           reduce using rule 79 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    SEMI            reduce using rule 79 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    ELSE            reduce using rule 79 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    ELSEIF          reduce using rule 79 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    RBLOCK          reduce using rule 79 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    LBLOCK          reduce using rule 79 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    RETURN          reduce using rule 79 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    LPAREN          reduce using rule 79 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    NUM             reduce using rule 79 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    TRUE            reduce using rule 79 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)
    FALSE           reduce using rule 79 (iteration_stmt -> DO LBLOCK statement SEMI RBLOCK WHILE LPAREN expression RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VARIABLE in state 2 resolved as shift
WARNING: shift/reduce conflict for TIMESTIMES in state 2 resolved as shift
WARNING: shift/reduce conflict for AMPERSANT in state 2 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 2 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 2 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 2 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 2 resolved as shift
WARNING: shift/reduce conflict for REQUIRE in state 2 resolved as shift
WARNING: shift/reduce conflict for INCLUDE in state 2 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 2 resolved as shift
WARNING: shift/reduce conflict for IF in state 2 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 2 resolved as shift
WARNING: shift/reduce conflict for CASE in state 2 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 2 resolved as shift
WARNING: shift/reduce conflict for FOR in state 2 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 2 resolved as shift
WARNING: shift/reduce conflict for DO in state 2 resolved as shift
WARNING: shift/reduce conflict for ID in state 2 resolved as shift
WARNING: shift/reduce conflict for COMMENTS in state 2 resolved as shift
WARNING: shift/reduce conflict for CLOSETAG in state 3 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 3 resolved as shift
WARNING: shift/reduce conflict for TIMESTIMES in state 3 resolved as shift
WARNING: shift/reduce conflict for AMPERSANT in state 3 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 3 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 3 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 3 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 3 resolved as shift
WARNING: shift/reduce conflict for REQUIRE in state 3 resolved as shift
WARNING: shift/reduce conflict for INCLUDE in state 3 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 3 resolved as shift
WARNING: shift/reduce conflict for IF in state 3 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 3 resolved as shift
WARNING: shift/reduce conflict for CASE in state 3 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 3 resolved as shift
WARNING: shift/reduce conflict for FOR in state 3 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 3 resolved as shift
WARNING: shift/reduce conflict for DO in state 3 resolved as shift
WARNING: shift/reduce conflict for ID in state 3 resolved as shift
WARNING: shift/reduce conflict for COMMENTS in state 3 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 10 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 65 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 66 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 67 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 99 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 151 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 151 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 151 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 151 resolved as shift
WARNING: shift/reduce conflict for IF in state 151 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 151 resolved as shift
WARNING: shift/reduce conflict for CASE in state 151 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 151 resolved as shift
WARNING: shift/reduce conflict for FOR in state 151 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 151 resolved as shift
WARNING: shift/reduce conflict for DO in state 151 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 151 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 151 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 151 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 151 resolved as shift
WARNING: shift/reduce conflict for NUM in state 151 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 151 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 151 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 155 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 155 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 155 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 155 resolved as shift
WARNING: shift/reduce conflict for IF in state 155 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 155 resolved as shift
WARNING: shift/reduce conflict for CASE in state 155 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 155 resolved as shift
WARNING: shift/reduce conflict for FOR in state 155 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 155 resolved as shift
WARNING: shift/reduce conflict for DO in state 155 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 155 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 155 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 155 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 155 resolved as shift
WARNING: shift/reduce conflict for NUM in state 155 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 155 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 155 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 159 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 163 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 163 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 163 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 163 resolved as shift
WARNING: shift/reduce conflict for IF in state 163 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 163 resolved as shift
WARNING: shift/reduce conflict for CASE in state 163 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 163 resolved as shift
WARNING: shift/reduce conflict for FOR in state 163 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 163 resolved as shift
WARNING: shift/reduce conflict for DO in state 163 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 163 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 163 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 163 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 163 resolved as shift
WARNING: shift/reduce conflict for NUM in state 163 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 163 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 163 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 193 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 193 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 201 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 215 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 222 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 222 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 222 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 222 resolved as shift
WARNING: shift/reduce conflict for IF in state 222 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 222 resolved as shift
WARNING: shift/reduce conflict for CASE in state 222 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 222 resolved as shift
WARNING: shift/reduce conflict for FOR in state 222 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 222 resolved as shift
WARNING: shift/reduce conflict for DO in state 222 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 222 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 222 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 222 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 222 resolved as shift
WARNING: shift/reduce conflict for NUM in state 222 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 222 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 222 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 226 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 236 resolved as shift
WARNING: shift/reduce conflict for IF in state 236 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 236 resolved as shift
WARNING: shift/reduce conflict for CASE in state 236 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 236 resolved as shift
WARNING: shift/reduce conflict for FOR in state 236 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 236 resolved as shift
WARNING: shift/reduce conflict for DO in state 236 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 236 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 236 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 236 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 236 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 236 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 236 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 236 resolved as shift
WARNING: shift/reduce conflict for NUM in state 236 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 236 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 236 resolved as shift
WARNING: shift/reduce conflict for RBLOCK in state 242 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 242 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 244 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 244 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 244 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 244 resolved as shift
WARNING: shift/reduce conflict for IF in state 244 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 244 resolved as shift
WARNING: shift/reduce conflict for CASE in state 244 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 244 resolved as shift
WARNING: shift/reduce conflict for FOR in state 244 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 244 resolved as shift
WARNING: shift/reduce conflict for DO in state 244 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 244 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 244 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 244 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 244 resolved as shift
WARNING: shift/reduce conflict for NUM in state 244 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 244 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 244 resolved as shift
